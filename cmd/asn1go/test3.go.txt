package NCBIAccess

type LinkSet struct {
	Num	int64	`xml:"num" json:"num"`
	Uids	[]int64	`xml:"uids" json:"uids,omitempty" asn1:"optional"`
	Weights	[]int64	`xml:"weights" json:"weights,omitempty" asn1:"optional"`
}
package NCBIBiblio

import "NCBIGeneral"

type ArticleId struct {
	Pubmed	*PubMedId		`xml:"pubmed" json:"pubmed,omitempty"`
	Medline	*MedlineUID		`xml:"medline" json:"medline,omitempty"`
	Doi	*DOI			`xml:"doi" json:"doi,omitempty"`
	Pii	*PII			`xml:"pii" json:"pii,omitempty"`
	Pmcid	*PmcID			`xml:"pmcid" json:"pmcid,omitempty"`
	Pmcpid	*PmcPid			`xml:"pmcpid" json:"pmcpid,omitempty"`
	Pmpid	*PmPid			`xml:"pmpid" json:"pmpid,omitempty"`
	Other	*NCBIGeneral.Dbtag	`xml:"other" json:"other,omitempty"`
}
//ArticleId,ChoiceOption
type PubMedId int64
type MedlineUID int64
type DOI string
type PII string
type PmcID int64
type PmcPid string
type PmPid string
type ArticleIdSet []ArticleId
type PubStatus int
//PubStatus,IntegerEnum:received(1),accepted(2),epublish(3),ppublish(4),revised(5),pmc(6),pmcr(7),pubmed(8),pubmedr(9),aheadofprint(10),premedline(11),medline(12),other(255)
type PubStatusDate struct {
	Pubstatus	*PubStatus		`xml:"pubstatus" json:"pubstatus,omitempty"`
	Date		*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
}
type PubStatusDateSet []PubStatusDate
type CitArt struct {
	Title	*Title		`xml:"title" json:"title,omitempty" asn1:"optional"`
	Authors	*AuthList	`xml:"authors" json:"authors,omitempty" asn1:"optional"`
	From	struct {
		Journal	*CitJour	`xml:"journal" json:"journal,omitempty"`
		Book	*CitBook	`xml:"book" json:"book,omitempty"`
		Proc	*CitProc	`xml:"proc" json:"proc,omitempty"`
	}			`xml:"from" json:"from"`//From,ChoiceOption
	Ids	*ArticleIdSet	`xml:"ids" json:"ids,omitempty" asn1:"optional"`
}
type CitJour struct {
	Title	*Title		`xml:"title" json:"title,omitempty"`
	Imp	*Imprint	`xml:"imp" json:"imp,omitempty"`
}
type CitBook struct {
	Title	*Title		`xml:"title" json:"title,omitempty"`
	Coll	*Title		`xml:"coll" json:"coll,omitempty" asn1:"optional"`
	Authors	*AuthList	`xml:"authors" json:"authors,omitempty"`
	Imp	*Imprint	`xml:"imp" json:"imp,omitempty"`
}
type CitProc struct {
	Book	*CitBook	`xml:"book" json:"book,omitempty"`
	Meet	*Meeting	`xml:"meet" json:"meet,omitempty"`
}
type CitPat struct {
	Title		string			`xml:"title" json:"title"`
	Authors		*AuthList		`xml:"authors" json:"authors,omitempty"`
	Country		string			`xml:"country" json:"country"`
	DocType		string			`xml:"doc-type" json:"doc_type"`
	Number		string			`xml:"number" json:"number,omitempty" asn1:"optional"`
	DateIssue	*NCBIGeneral.Date	`xml:"date-issue" json:"date_issue,omitempty" asn1:"optional"`
	Class		[]string		`xml:"class" json:"class,omitempty" asn1:"optional"`
	AppNumber	string			`xml:"app-number" json:"app_number,omitempty" asn1:"optional"`
	AppDate		*NCBIGeneral.Date	`xml:"app-date" json:"app_date,omitempty" asn1:"optional"`
	Applicants	*AuthList		`xml:"applicants" json:"applicants,omitempty" asn1:"optional"`
	Assignees	*AuthList		`xml:"assignees" json:"assignees,omitempty" asn1:"optional"`
	Priority	[]PatentPriority	`xml:"priority" json:"priority,omitempty" asn1:"optional"`
	Abstract	string			`xml:"abstract" json:"abstract,omitempty" asn1:"optional"`
}
type PatentPriority struct {
	Country	string			`xml:"country" json:"country"`
	Number	string			`xml:"number" json:"number"`
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
}
type IdPat struct {
	Country	string	`xml:"country" json:"country"`
	Id	struct {
		Number		string	`xml:"number" json:"number"`
		AppNumber	string	`xml:"app-number" json:"app_number"`
	}		`xml:"id" json:"id"`//Id,ChoiceOption
	DocType	string	`xml:"doc-type" json:"doc_type,omitempty" asn1:"optional"`
}
type CitLet struct {
	Cit	*CitBook	`xml:"cit" json:"cit,omitempty"`
	ManId	string		`xml:"man-id" json:"man_id,omitempty" asn1:"optional"`
	Type	string		`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,EnumList:manuscript(1),letter(2),thesis(3)
}
type CitSub struct {
	Authors	*AuthList		`xml:"authors" json:"authors,omitempty"`
	Imp	*Imprint		`xml:"imp" json:"imp,omitempty" asn1:"optional"`
	Medium	string			`xml:"medium" json:"medium,omitempty" asn1:"optional"`//Medium,EnumList:paper(1),tape(2),floppy(3),email(4),other(255)
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty" asn1:"optional"`
	Descr	string			`xml:"descr" json:"descr,omitempty" asn1:"optional"`
}
type CitGen struct {
	Cit		string			`xml:"cit" json:"cit,omitempty" asn1:"optional"`
	Authors		*AuthList		`xml:"authors" json:"authors,omitempty" asn1:"optional"`
	Muid		int64			`xml:"muid" json:"muid,omitempty" asn1:"optional"`
	Journal		*Title			`xml:"journal" json:"journal,omitempty" asn1:"optional"`
	Volume		string			`xml:"volume" json:"volume,omitempty" asn1:"optional"`
	Issue		string			`xml:"issue" json:"issue,omitempty" asn1:"optional"`
	Pages		string			`xml:"pages" json:"pages,omitempty" asn1:"optional"`
	Date		*NCBIGeneral.Date	`xml:"date" json:"date,omitempty" asn1:"optional"`
	SerialNumber	int64			`xml:"serial-number" json:"serial_number,omitempty" asn1:"optional"`
	Title		string			`xml:"title" json:"title,omitempty" asn1:"optional"`
	Pmid		*PubMedId		`xml:"pmid" json:"pmid,omitempty" asn1:"optional"`
}
type AuthList struct {
	Names	struct {
		Std	[]Author	`xml:"std" json:"std,omitempty"`
		Ml	[]string	`xml:"ml" json:"ml,omitempty"`
		Str	[]string	`xml:"str" json:"str,omitempty"`
	}		`xml:"names" json:"names"`//Names,ChoiceOption
	Affil	*Affil	`xml:"affil" json:"affil,omitempty" asn1:"optional"`
}
type Author struct {
	Name	*NCBIGeneral.PersonId	`xml:"name" json:"name,omitempty"`
	Level	string			`xml:"level" json:"level,omitempty" asn1:"optional"`//Level,EnumList:primary(1),secondary(2)
	Role	string			`xml:"role" json:"role,omitempty" asn1:"optional"`//Role,EnumList:compiler(1),editor(2),patent-assignee(3),translator(4)
	Affil	*Affil			`xml:"affil" json:"affil,omitempty" asn1:"optional"`
	IsCorr	bool			`xml:"is-corr" json:"is_corr,omitempty" asn1:"optional"`
}
type Affil struct {
	Str	string	`xml:"str" json:"str"`
	Std	struct {
		Affil		string	`xml:"affil" json:"affil,omitempty" asn1:"optional"`
		Div		string	`xml:"div" json:"div,omitempty" asn1:"optional"`
		City		string	`xml:"city" json:"city,omitempty" asn1:"optional"`
		Sub		string	`xml:"sub" json:"sub,omitempty" asn1:"optional"`
		Country		string	`xml:"country" json:"country,omitempty" asn1:"optional"`
		Street		string	`xml:"street" json:"street,omitempty" asn1:"optional"`
		Email		string	`xml:"email" json:"email,omitempty" asn1:"optional"`
		Fax		string	`xml:"fax" json:"fax,omitempty" asn1:"optional"`
		Phone		string	`xml:"phone" json:"phone,omitempty" asn1:"optional"`
		PostalCode	string	`xml:"postal-code" json:"postal_code,omitempty" asn1:"optional"`
	}	`xml:"std" json:"std"`
}
//Affil,ChoiceOption
type Title []struct {
	Name	string	`xml:"name" json:"name"`
	Tsub	string	`xml:"tsub" json:"tsub"`
	Trans	string	`xml:"trans" json:"trans"`
	Jta	string	`xml:"jta" json:"jta"`
	IsoJta	string	`xml:"iso-jta" json:"iso_jta"`
	MlJta	string	`xml:"ml-jta" json:"ml_jta"`
	Coden	string	`xml:"coden" json:"coden"`
	Issn	string	`xml:"issn" json:"issn"`
	Abr	string	`xml:"abr" json:"abr"`
	Isbn	string	`xml:"isbn" json:"isbn"`
}
type Imprint struct {
	Date		*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
	Volume		string			`xml:"volume" json:"volume,omitempty" asn1:"optional"`
	Issue		string			`xml:"issue" json:"issue,omitempty" asn1:"optional"`
	Pages		string			`xml:"pages" json:"pages,omitempty" asn1:"optional"`
	Section		string			`xml:"section" json:"section,omitempty" asn1:"optional"`
	Pub		*Affil			`xml:"pub" json:"pub,omitempty" asn1:"optional"`
	Cprt		*NCBIGeneral.Date	`xml:"cprt" json:"cprt,omitempty" asn1:"optional"`
	PartSup		string			`xml:"part-sup" json:"part_sup,omitempty" asn1:"optional"`
	Language	string			`xml:"language" json:"language" asn1:"default:ENG"`
	Prepub		string			`xml:"prepub" json:"prepub,omitempty" asn1:"optional"`//Prepub,EnumList:submitted(1),in-press(2),other(255)
	PartSupi	string			`xml:"part-supi" json:"part_supi,omitempty" asn1:"optional"`
	Retract		*CitRetract		`xml:"retract" json:"retract,omitempty" asn1:"optional"`
	Pubstatus	*PubStatus		`xml:"pubstatus" json:"pubstatus,omitempty" asn1:"optional"`
	History		*PubStatusDateSet	`xml:"history" json:"history,omitempty" asn1:"optional"`
}
type CitRetract struct {
	Type	string	`xml:"type" json:"type"`//Type,EnumList:retracted(1),notice(2),in-error(3),erratum(4)
	Exp	string	`xml:"exp" json:"exp,omitempty" asn1:"optional"`
}
type Meeting struct {
	Number	string			`xml:"number" json:"number"`
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
	Place	*Affil			`xml:"place" json:"place,omitempty" asn1:"optional"`
}
package NCBIBioTree

import "NCBIGeneral"

type BioTreeContainer struct {
	Treetype	string			`xml:"treetype" json:"treetype,omitempty" asn1:"optional"`
	Fdict		*FeatureDictSet		`xml:"fdict" json:"fdict,omitempty"`
	Nodes		*NodeSet		`xml:"nodes" json:"nodes,omitempty"`
	Label		string			`xml:"label" json:"label,omitempty" asn1:"optional"`
	User		*NCBIGeneral.UserObject	`xml:"user" json:"user,omitempty" asn1:"optional"`
}
type NodeSet []Node
type Node struct {
	Id		int64		`xml:"id" json:"id"`
	Parent		int64		`xml:"parent" json:"parent,omitempty" asn1:"optional"`
	Features	*NodeFeatureSet	`xml:"features" json:"features,omitempty" asn1:"optional"`
}
type NodeFeatureSet []NodeFeature
type NodeFeature struct {
	Featureid	int64	`xml:"featureid" json:"featureid"`
	Value		string	`xml:"value" json:"value" asn1:"utf8"`
}
type FeatureDictSet []FeatureDescr
type FeatureDescr struct {
	Id	int64	`xml:"id" json:"id"`
	Name	string	`xml:"name" json:"name"`
}
type DistanceMatrix struct {
	Labels		[]string	`xml:"labels" json:"labels,omitempty"`
	Distances	[]float64	`xml:"distances" json:"distances,omitempty"`
}
package NCBIBlast4

import "NCBISequence"
import "NCBISeqset"
import "NCBIScoreMat"
import "NCBISeqloc"
import "NCBISeqalign"

type Blast4Request struct {
	Ident	string			`xml:"ident" json:"ident,omitempty" asn1:"optional"`
	Body	*Blast4RequestBody	`xml:"body" json:"body,omitempty"`
}
type Blast4Archive struct {
	Request		*Blast4Request			`xml:"request" json:"request,omitempty"`
	Results		*Blast4GetSearchResultsReply	`xml:"results" json:"results,omitempty"`
	Messages	[]Blast4Error			`xml:"messages" json:"messages,omitempty" asn1:"optional"`
}
type Blast4RequestBody struct {
	FinishParams		*Blast4FinishParamsRequest	`xml:"finish-params" json:"finish_params,omitempty"`
	GetDatabases		interface{}			`xml:"get-databases" json:"get_databases"`
	GetMatrices		interface{}			`xml:"get-matrices" json:"get_matrices"`
	GetParameters		interface{}			`xml:"get-parameters" json:"get_parameters"`
	GetParamsets		interface{}			`xml:"get-paramsets" json:"get_paramsets"`
	GetPrograms		interface{}			`xml:"get-programs" json:"get_programs"`
	GetSearchResults	*Blast4GetSearchResultsRequest	`xml:"get-search-results" json:"get_search_results,omitempty"`
	GetSequences		*Blast4GetSequencesRequest	`xml:"get-sequences" json:"get_sequences,omitempty"`
	QueueSearch		*Blast4QueueSearchRequest	`xml:"queue-search" json:"queue_search,omitempty"`
	GetRequestInfo		*Blast4GetRequestInfoRequest	`xml:"get-request-info" json:"get_request_info,omitempty"`
	GetSequenceParts	*Blast4GetSeqPartsRequest	`xml:"get-sequence-parts" json:"get_sequence_parts,omitempty"`
	GetWindowmaskedTaxids	interface{}			`xml:"get-windowmasked-taxids" json:"get_windowmasked_taxids"`
	GetProtocolInfo		*Blast4GetProtocolInfoRequest	`xml:"get-protocol-info" json:"get_protocol_info,omitempty"`
	GetSearchInfo		*Blast4GetSearchInfoRequest	`xml:"get-search-info" json:"get_search_info,omitempty"`
	GetDatabasesEx		*Blast4GetDatabasesExRequest	`xml:"get-databases-ex" json:"get_databases_ex,omitempty"`
}
//Blast4RequestBody,ChoiceOption
type Blast4GetDatabasesExRequest struct {
	Params *Blast4Parameters `xml:"params" json:"params,omitempty" asn1:"optional"`
}
type Blast4FinishParamsRequest struct {
	Program		string			`xml:"program" json:"program"`
	Service		string			`xml:"service" json:"service"`
	Paramset	string			`xml:"paramset" json:"paramset,omitempty" asn1:"optional"`
	Params		*Blast4Parameters	`xml:"params" json:"params,omitempty" asn1:"optional"`
}
type Blast4ResultTypes string
//Blast4ResultTypes,EnumList:default(63),alignments(1),phi-alignments(2),masks(4),ka-blocks(8),search-stats(16),pssm(32),simple-results(64)
type Blast4GetSearchResultsRequest struct {
	RequestId	string	`xml:"request-id" json:"request_id"`
	ResultTypes	int64	`xml:"result-types" json:"result_types,omitempty" asn1:"optional"`
}
type Blast4Queries struct {
	Pssm		*NCBIScoreMat.PssmWithParameters	`xml:"pssm" json:"pssm,omitempty"`
	SeqLocList	[]NCBISeqloc.SeqLoc			`xml:"seq-loc-list" json:"seq_loc_list,omitempty"`
	BioseqSet	*NCBISeqset.BioseqSet			`xml:"bioseq-set" json:"bioseq_set,omitempty"`
}
//Blast4Queries,ChoiceOption
type Blast4QueueSearchRequest struct {
	Program			string			`xml:"program" json:"program"`
	Service			string			`xml:"service" json:"service"`
	Queries			*Blast4Queries		`xml:"queries" json:"queries,omitempty"`
	Subject			*Blast4Subject		`xml:"subject" json:"subject,omitempty"`
	Paramset		string			`xml:"paramset" json:"paramset,omitempty" asn1:"optional"`
	AlgorithmOptions	*Blast4Parameters	`xml:"algorithm-options" json:"algorithm_options,omitempty" asn1:"optional"`
	ProgramOptions		*Blast4Parameters	`xml:"program-options" json:"program_options,omitempty" asn1:"optional"`
	FormatOptions		*Blast4Parameters	`xml:"format-options" json:"format_options,omitempty" asn1:"optional"`
}
type Blast4GetSearchStatusRequest struct {
	RequestId string `xml:"request-id" json:"request_id"`
}
type Blast4GetSearchStatusReply struct {
	Status string `xml:"status" json:"status"`
}
type Blast4GetRequestInfoRequest struct {
	RequestId string `xml:"request-id" json:"request_id"`
}
type Blast4GetRequestInfoReply struct {
	Database		*Blast4Database		`xml:"database" json:"database,omitempty"`
	Program			string			`xml:"program" json:"program"`
	Service			string			`xml:"service" json:"service"`
	CreatedBy		string			`xml:"created-by" json:"created_by"`
	Queries			*Blast4Queries		`xml:"queries" json:"queries,omitempty"`
	AlgorithmOptions	*Blast4Parameters	`xml:"algorithm-options" json:"algorithm_options,omitempty"`
	ProgramOptions		*Blast4Parameters	`xml:"program-options" json:"program_options,omitempty"`
	FormatOptions		*Blast4Parameters	`xml:"format-options" json:"format_options,omitempty" asn1:"optional"`
	Subjects		*Blast4Subject		`xml:"subjects" json:"subjects,omitempty" asn1:"optional"`
}
type Blast4GetSearchStrategyRequest struct {
	RequestId string `xml:"request-id" json:"request_id"`
}
type Blast4GetSearchStrategyReply Blast4Request
type Blast4GetSequencesRequest struct {
	Database	*Blast4Database		`xml:"database" json:"database,omitempty"`
	SeqIds		[]NCBISeqloc.SeqId	`xml:"seq-ids" json:"seq_ids,omitempty"`
	SkipSeqData	bool			`xml:"skip-seq-data" json:"skip_seq_data"`
	TargetOnly	bool			`xml:"target-only" json:"target_only,omitempty" asn1:"optional"`
}
type Blast4GetSeqPartsRequest struct {
	Database	*Blast4Database			`xml:"database" json:"database,omitempty"`
	SeqLocations	[]NCBISeqloc.SeqInterval	`xml:"seq-locations" json:"seq_locations,omitempty"`
}
type Blast4GetProtocolInfoRequest Blast4Parameters
type Blast4GetSearchInfoRequest struct {
	RequestId	string			`xml:"request-id" json:"request_id"`
	Info		*Blast4Parameters	`xml:"info" json:"info,omitempty" asn1:"optional"`
}
type Blast4Reply struct {
	Errors	[]Blast4Error		`xml:"errors" json:"errors,omitempty" asn1:"optional"`
	Body	*Blast4ReplyBody	`xml:"body" json:"body,omitempty"`
}
type Blast4ReplyBody struct {
	FinishParams		*Blast4FinishParamsReply		`xml:"finish-params" json:"finish_params,omitempty"`
	GetDatabases		*Blast4GetDatabasesReply		`xml:"get-databases" json:"get_databases,omitempty"`
	GetMatrices		*Blast4GetMatricesReply			`xml:"get-matrices" json:"get_matrices,omitempty"`
	GetParameters		*Blast4GetParametersReply		`xml:"get-parameters" json:"get_parameters,omitempty"`
	GetParamsets		*Blast4GetParamsetsReply		`xml:"get-paramsets" json:"get_paramsets,omitempty"`
	GetPrograms		*Blast4GetProgramsReply			`xml:"get-programs" json:"get_programs,omitempty"`
	GetSearchResults	*Blast4GetSearchResultsReply		`xml:"get-search-results" json:"get_search_results,omitempty"`
	GetSequences		*Blast4GetSequencesReply		`xml:"get-sequences" json:"get_sequences,omitempty"`
	QueueSearch		*Blast4QueueSearchReply			`xml:"queue-search" json:"queue_search,omitempty"`
	GetQueries		*Blast4GetQueriesReply			`xml:"get-queries" json:"get_queries,omitempty"`
	GetRequestInfo		*Blast4GetRequestInfoReply		`xml:"get-request-info" json:"get_request_info,omitempty"`
	GetSequenceParts	*Blast4GetSeqPartsReply			`xml:"get-sequence-parts" json:"get_sequence_parts,omitempty"`
	GetWindowmaskedTaxids	*Blast4GetWindowmaskedTaxidsReply	`xml:"get-windowmasked-taxids" json:"get_windowmasked_taxids,omitempty"`
	GetProtocolInfo		*Blast4GetProtocolInfoReply		`xml:"get-protocol-info" json:"get_protocol_info,omitempty"`
	GetSearchInfo		*Blast4GetSearchInfoReply		`xml:"get-search-info" json:"get_search_info,omitempty"`
	GetDatabasesEx		*Blast4GetDatabasesExReply		`xml:"get-databases-ex" json:"get_databases_ex,omitempty"`
}
//Blast4ReplyBody,ChoiceOption
type Blast4FinishParamsReply Blast4Parameters
type Blast4GetWindowmaskedTaxidsReply []int64
type Blast4GetDatabasesReply []Blast4DatabaseInfo
type Blast4GetDatabasesExReply []Blast4DatabaseInfo
type Blast4GetMatricesReply []Blast4MatrixId
type Blast4GetParametersReply []Blast4ParameterInfo
type Blast4GetParamsetsReply []Blast4TaskInfo
type Blast4GetProgramsReply []Blast4ProgramInfo
type Blast4GetSearchResultsReply struct {
	Alignments	*NCBISeqalign.SeqAlignSet		`xml:"alignments" json:"alignments,omitempty" asn1:"optional"`
	PhiAlignments	*Blast4PhiAlignments			`xml:"phi-alignments" json:"phi_alignments,omitempty" asn1:"optional"`
	Masks		[]Blast4Mask				`xml:"masks" json:"masks,omitempty" asn1:"optional"`
	KaBlocks	[]Blast4KaBlock				`xml:"ka-blocks" json:"ka_blocks,omitempty" asn1:"optional"`
	SearchStats	[]string				`xml:"search-stats" json:"search_stats,omitempty" asn1:"optional"`
	Pssm		*NCBIScoreMat.PssmWithParameters	`xml:"pssm" json:"pssm,omitempty" asn1:"optional"`
	SimpleResults	*Blast4SimpleResults			`xml:"simple-results" json:"simple_results,omitempty" asn1:"optional"`
}
type Blast4GetSequencesReply []NCBISequence.Bioseq
type Blast4SeqPartData struct {
	Id	*NCBISeqloc.SeqId	`xml:"id" json:"id,omitempty"`
	Data	*NCBISequence.SeqData	`xml:"data" json:"data,omitempty"`
}
type Blast4GetSeqPartsReply []Blast4SeqPartData
type Blast4QueueSearchReply struct {
	RequestId string `xml:"request-id" json:"request_id,omitempty" asn1:"optional"`
}
type Blast4GetQueriesReply struct {
	Queries *Blast4Queries `xml:"queries" json:"queries,omitempty"`
}
type Blast4GetProtocolInfoReply Blast4Parameters
type Blast4GetSearchInfoReply struct {
	RequestId	string			`xml:"request-id" json:"request_id"`
	Info		*Blast4Parameters	`xml:"info" json:"info,omitempty" asn1:"optional"`
}
type Blast4Error struct {
	Code	int64	`xml:"code" json:"code"`
	Message	string	`xml:"message" json:"message,omitempty" asn1:"optional"`
}
type Blast4ErrorFlags string
//Blast4ErrorFlags,EnumList:warning(1024),error(2048)
type Blast4ErrorCode int
//Blast4ErrorCode,IntegerEnum:conversion-warning(1024),internal-error(2048),not-implemented(2049),not-allowed(2050),bad-request(2051),bad-request-id(2052),search-pending(2053)
type Blast4Cutoff struct {
	EValue		float64	`xml:"e-value" json:"e_value"`
	RawScore	int64	`xml:"raw-score" json:"raw_score"`
}
//Blast4Cutoff,ChoiceOption
type Blast4Database struct {
	Name	string			`xml:"name" json:"name"`
	Type	*Blast4ResidueType	`xml:"type" json:"type,omitempty"`
}
type Blast4Seqtech int
//Blast4Seqtech,IntegerEnum:unknown(0),standard(1),est(2),sts(3),survey(4),genemap(5),physmap(6),derived(7),concept-trans(8),seq-pept(9),both(10),seq-pept-overlap(11),seq-pept-homol(12),concept-trans-a(13),htgs-1(14),htgs-2(15),htgs-3(16),fli-cdna(17),htgs-0(18),htc(19),wgs(20),other(255)
type Blast4DatabaseInfo struct {
	Database	*Blast4Database		`xml:"database" json:"database,omitempty"`
	Description	string			`xml:"description" json:"description"`
	LastUpdated	string			`xml:"last-updated" json:"last_updated"`
	TotalLength	*int64			`xml:"total-length" json:"total_length,omitempty"`
	NumSequences	*int64			`xml:"num-sequences" json:"num_sequences,omitempty"`
	Seqtech		*Blast4Seqtech		`xml:"seqtech" json:"seqtech,omitempty"`
	Taxid		int64			`xml:"taxid" json:"taxid"`
	Extended	*Blast4Parameters	`xml:"extended" json:"extended,omitempty" asn1:"optional"`
}
type Blast4FrameType string
//Blast4FrameType,EnumList:notset(0),plus1(1),plus2(2),plus3(3),minus1(4),minus2(5),minus3(6)
type Blast4KaBlock struct {
	Lambda	float64	`xml:"lambda" json:"lambda"`
	K	float64	`xml:"k" json:"k"`
	H	float64	`xml:"h" json:"h"`
	Gapped	bool	`xml:"gapped" json:"gapped"`
}
type Blast4Mask struct {
	Locations	[]NCBISeqloc.SeqLoc	`xml:"locations" json:"locations,omitempty"`
	Frame		*Blast4FrameType	`xml:"frame" json:"frame,omitempty"`
}
type Blast4MatrixId struct {
	ResidueType	*Blast4ResidueType	`xml:"residue-type" json:"residue_type,omitempty"`
	Name		string			`xml:"name" json:"name"`
}
type Blast4Parameter struct {
	Name	string		`xml:"name" json:"name"`
	Value	*Blast4Value	`xml:"value" json:"value,omitempty"`
}
type Blast4ParameterInfo struct {
	Name	string	`xml:"name" json:"name"`
	Type	string	`xml:"type" json:"type"`
}
type Blast4TaskInfo struct {
	Name		string	`xml:"name" json:"name"`
	Documentation	string	`xml:"documentation" json:"documentation"`
}
type Blast4ProgramInfo struct {
	Program		string		`xml:"program" json:"program"`
	Services	[]string	`xml:"services" json:"services,omitempty"`
}
type Blast4ResidueType string
//Blast4ResidueType,EnumList:unknown(0),protein(1),nucleotide(2)
type Blast4StrandType string
//Blast4StrandType,EnumList:forward-strand(1),reverse-strand(2),both-strands(3)
type Blast4Subject struct {
	Database	string			`xml:"database" json:"database"`
	Sequences	[]NCBISequence.Bioseq	`xml:"sequences" json:"sequences,omitempty"`
	SeqLocList	[]NCBISeqloc.SeqLoc	`xml:"seq-loc-list" json:"seq_loc_list,omitempty"`
}
//Blast4Subject,ChoiceOption
type Blast4Parameters []Blast4Parameter
type Blast4PhiAlignments struct {
	NumAlignments	int64			`xml:"num-alignments" json:"num_alignments"`
	SeqLocs		[]NCBISeqloc.SeqLoc	`xml:"seq-locs" json:"seq_locs,omitempty"`
}
type Blast4Value struct {
	BigInteger	*int64					`xml:"big-integer" json:"big_integer,omitempty"`
	Bioseq		*NCBISequence.Bioseq			`xml:"bioseq" json:"bioseq,omitempty"`
	Boolean		bool					`xml:"boolean" json:"boolean"`
	Cutoff		*Blast4Cutoff				`xml:"cutoff" json:"cutoff,omitempty"`
	Integer		int64					`xml:"integer" json:"integer"`
	Matrix		*NCBIScoreMat.PssmWithParameters	`xml:"matrix" json:"matrix,omitempty"`
	Real		float64					`xml:"real" json:"real"`
	SeqAlign	*NCBISeqalign.SeqAlign			`xml:"seq-align" json:"seq_align,omitempty"`
	SeqId		*NCBISeqloc.SeqId			`xml:"seq-id" json:"seq_id,omitempty"`
	SeqLoc		*NCBISeqloc.SeqLoc			`xml:"seq-loc" json:"seq_loc,omitempty"`
	StrandType	*Blast4StrandType			`xml:"strand-type" json:"strand_type,omitempty"`
	String		string					`xml:"string" json:"string"`
	BigIntegerList	[]int64					`xml:"big-integer-list" json:"big_integer_list,omitempty"`
	BioseqList	[]NCBISequence.Bioseq			`xml:"bioseq-list" json:"bioseq_list,omitempty"`
	BooleanList	[]bool					`xml:"boolean-list" json:"boolean_list,omitempty"`
	CutoffList	[]Blast4Cutoff				`xml:"cutoff-list" json:"cutoff_list,omitempty"`
	IntegerList	[]int64					`xml:"integer-list" json:"integer_list,omitempty"`
	MatrixList	[]NCBIScoreMat.PssmWithParameters	`xml:"matrix-list" json:"matrix_list,omitempty"`
	RealList	[]float64				`xml:"real-list" json:"real_list,omitempty"`
	SeqAlignList	[]NCBISeqalign.SeqAlign			`xml:"seq-align-list" json:"seq_align_list,omitempty"`
	SeqIdList	[]NCBISeqloc.SeqId			`xml:"seq-id-list" json:"seq_id_list,omitempty"`
	SeqLocList	[]NCBISeqloc.SeqLoc			`xml:"seq-loc-list" json:"seq_loc_list,omitempty"`
	StrandTypeList	[]Blast4StrandType			`xml:"strand-type-list" json:"strand_type_list,omitempty"`
	StringList	[]string				`xml:"string-list" json:"string_list,omitempty"`
	BioseqSet	*NCBISeqset.BioseqSet			`xml:"bioseq-set" json:"bioseq_set,omitempty"`
	SeqAlignSet	*NCBISeqalign.SeqAlignSet		`xml:"seq-align-set" json:"seq_align_set,omitempty"`
	QueryMask	*Blast4Mask				`xml:"query-mask" json:"query_mask,omitempty"`
}
//Blast4Value,ChoiceOption
type Blast4SimpleResults struct {
	AllAlignments []Blast4AlignmentsForQuery `xml:"all-alignments" json:"all_alignments,omitempty"`
}
type Blast4AlignmentsForQuery struct {
	QueryId		string			`xml:"query-id" json:"query_id"`
	Alignments	[]Blast4SimpleAlignment	`xml:"alignments" json:"alignments,omitempty"`
}
type Blast4SimpleAlignment struct {
	SubjectId		string		`xml:"subject-id" json:"subject_id"`
	EValue			float64		`xml:"e-value" json:"e_value"`
	BitScore		float64		`xml:"bit-score" json:"bit_score"`
	NumIdentities		int64		`xml:"num-identities" json:"num_identities,omitempty" asn1:"optional"`
	NumIndels		int64		`xml:"num-indels" json:"num_indels,omitempty" asn1:"optional"`
	FullQueryRange		*Blast4Range	`xml:"full-query-range" json:"full_query_range,omitempty"`
	FullSubjectRange	*Blast4Range	`xml:"full-subject-range" json:"full_subject_range,omitempty"`
}
type Blast4Range struct {
	Start	int64	`xml:"start" json:"start,omitempty" asn1:"optional"`
	End	int64	`xml:"end" json:"end,omitempty" asn1:"optional"`
	Strand	int64	`xml:"strand" json:"strand,omitempty" asn1:"optional"`
}
package NCBIBlastDL

import "NCBISeqloc"

type BlastDefLineSet []BlastDefLine
type BlastDefLine struct {
	Title		string			`xml:"title" json:"title,omitempty" asn1:"optional"`
	Seqid		[]NCBISeqloc.SeqId	`xml:"seqid" json:"seqid,omitempty"`
	Taxid		int64			`xml:"taxid" json:"taxid,omitempty" asn1:"optional"`
	Memberships	[]int64			`xml:"memberships" json:"memberships,omitempty" asn1:"optional"`
	Links		[]int64			`xml:"links" json:"links,omitempty" asn1:"optional"`
	OtherInfo	[]int64			`xml:"other-info" json:"other_info,omitempty" asn1:"optional"`
}
type BlastFilterProgram int
//BlastFilterProgram,IntegerEnum:not-set(0),dust(10),seg(20),windowmasker(30),repeat(40),other(100),max(255)
type BlastMaskList struct {
	Masks	[]NCBISeqloc.SeqLoc	`xml:"masks" json:"masks,omitempty"`
	More	bool			`xml:"more" json:"more"`
}
type BlastDbMaskInfo struct {
	AlgoId		int64			`xml:"algo-id" json:"algo_id"`
	AlgoProgram	*BlastFilterProgram	`xml:"algo-program" json:"algo_program,omitempty"`
	AlgoOptions	string			`xml:"algo-options" json:"algo_options"`
	Masks		*BlastMaskList		`xml:"masks" json:"masks,omitempty"`
}
type BlastDbMetadata struct {
	Version			string		`xml:"version" json:"version"`
	Dbname			string		`xml:"dbname" json:"dbname"`
	Dbtype			string		`xml:"dbtype" json:"dbtype"`
	DbVersion		int64		`xml:"db-version" json:"db_version" asn1:"default:5"`
	Description		string		`xml:"description" json:"description,omitempty" asn1:"optional"`
	NumberOfLetters		int64		`xml:"number-of-letters" json:"number_of_letters"`
	NumberOfSequences	int64		`xml:"number-of-sequences" json:"number_of_sequences"`
	LastUpdated		string		`xml:"last-updated" json:"last_updated"`
	NumberOfVolumes		int64		`xml:"number-of-volumes" json:"number_of_volumes"`
	NumberOfTaxids		int64		`xml:"number-of-taxids" json:"number_of_taxids,omitempty" asn1:"optional"`
	BytesTotal		int64		`xml:"bytes-total" json:"bytes_total"`
	BytesToCache		int64		`xml:"bytes-to-cache" json:"bytes_to_cache"`
	BytesTotalCompressed	int64		`xml:"bytes-total-compressed" json:"bytes_total_compressed,omitempty" asn1:"optional"`
	Files			[]string	`xml:"files" json:"files,omitempty" asn1:"optional"`
	CompressedFiles		[]string	`xml:"compressed-files" json:"compressed_files,omitempty" asn1:"optional"`
}
package NCBIBlastOutput2

type BlastOutput2 struct {
	Report	*Report	`xml:"report" json:"report,omitempty" asn1:"optional"`
	Error	*Err	`xml:"error" json:"error,omitempty" asn1:"optional"`
}
type BlastXML2 []BlastOutput2
type Report struct {
	Program		string		`xml:"program" json:"program"`
	Version		string		`xml:"version" json:"version"`
	Reference	string		`xml:"reference" json:"reference"`
	SearchTarget	*Target		`xml:"search-target" json:"search_target,omitempty"`
	Params		*Parameters	`xml:"params" json:"params,omitempty"`
	Results		*Results	`xml:"results" json:"results,omitempty"`
}
type Err struct {
	Code	int64	`xml:"code" json:"code"`
	Message	string	`xml:"message" json:"message,omitempty" asn1:"optional"`
}
type Target struct {
	Db		string		`xml:"db" json:"db"`
	Subjects	[]string	`xml:"subjects" json:"subjects,omitempty"`
}
//Target,ChoiceOption
type Results struct {
	Iterations	[]Iteration	`xml:"iterations" json:"iterations,omitempty"`
	Search		*Search		`xml:"search" json:"search,omitempty"`
	Bl2seq		[]Search	`xml:"bl2seq" json:"bl2seq,omitempty"`
}
//Results,ChoiceOption
type Iteration struct {
	IterNum	int64	`xml:"iter-num" json:"iter_num"`
	Search	*Search	`xml:"search" json:"search,omitempty"`
}
type Search struct {
	QueryId		string		`xml:"query-id" json:"query_id,omitempty" asn1:"optional"`
	QueryTitle	string		`xml:"query-title" json:"query_title,omitempty" asn1:"optional"`
	QueryLen	int64		`xml:"query-len" json:"query_len,omitempty" asn1:"optional"`
	QueryMasking	[]Range		`xml:"query-masking" json:"query_masking,omitempty" asn1:"optional"`
	Hits		[]Hit		`xml:"hits" json:"hits,omitempty" asn1:"optional"`
	Stat		*Statistics	`xml:"stat" json:"stat,omitempty" asn1:"optional"`
	Message		string		`xml:"message" json:"message,omitempty" asn1:"optional"`
}
type Parameters struct {
	Matrix		string	`xml:"matrix" json:"matrix,omitempty" asn1:"optional"`
	Expect		float64	`xml:"expect" json:"expect"`
	Include		float64	`xml:"include" json:"include,omitempty" asn1:"optional"`
	ScMatch		int64	`xml:"sc-match" json:"sc_match,omitempty" asn1:"optional"`
	ScMismatch	int64	`xml:"sc-mismatch" json:"sc_mismatch,omitempty" asn1:"optional"`
	GapOpen		int64	`xml:"gap-open" json:"gap_open,omitempty" asn1:"optional"`
	GapExtend	int64	`xml:"gap-extend" json:"gap_extend,omitempty" asn1:"optional"`
	Filter		string	`xml:"filter" json:"filter,omitempty" asn1:"optional"`
	Pattern		string	`xml:"pattern" json:"pattern,omitempty" asn1:"optional"`
	EntrezQuery	string	`xml:"entrez-query" json:"entrez_query,omitempty" asn1:"optional"`
	Cbs		int64	`xml:"cbs" json:"cbs,omitempty" asn1:"optional"`
	QueryGencode	int64	`xml:"query-gencode" json:"query_gencode,omitempty" asn1:"optional"`
	DbGencode	int64	`xml:"db-gencode" json:"db_gencode,omitempty" asn1:"optional"`
	Bl2seqMode	string	`xml:"bl2seq-mode" json:"bl2seq_mode,omitempty" asn1:"optional"`
}
type Range struct {
	From	int64	`xml:"from" json:"from"`
	To	int64	`xml:"to" json:"to"`
}
type Statistics struct {
	DbNum		*int64	`xml:"db-num" json:"db_num,omitempty" asn1:"optional"`
	DbLen		*int64	`xml:"db-len" json:"db_len,omitempty" asn1:"optional"`
	HspLen		int64	`xml:"hsp-len" json:"hsp_len"`
	EffSpace	*int64	`xml:"eff-space" json:"eff_space,omitempty"`
	Kappa		float64	`xml:"kappa" json:"kappa"`
	Lambda		float64	`xml:"lambda" json:"lambda"`
	Entropy		float64	`xml:"entropy" json:"entropy"`
}
type HitDescr struct {
	Id		string	`xml:"id" json:"id"`
	Accession	string	`xml:"accession" json:"accession,omitempty" asn1:"optional"`
	Title		string	`xml:"title" json:"title,omitempty" asn1:"optional"`
	Taxid		int64	`xml:"taxid" json:"taxid,omitempty" asn1:"optional"`
	Sciname		string	`xml:"sciname" json:"sciname,omitempty" asn1:"optional"`
}
type Hit struct {
	Num		int64		`xml:"num" json:"num"`
	Description	[]HitDescr	`xml:"description" json:"description,omitempty"`
	Len		int64		`xml:"len" json:"len"`
	Hsps		[]Hsp		`xml:"hsps" json:"hsps,omitempty" asn1:"optional"`
}
type Hsp struct {
	Num		int64	`xml:"num" json:"num"`
	BitScore	float64	`xml:"bit-score" json:"bit_score"`
	Score		float64	`xml:"score" json:"score"`
	Evalue		float64	`xml:"evalue" json:"evalue"`
	Identity	int64	`xml:"identity" json:"identity,omitempty" asn1:"optional"`
	Positive	int64	`xml:"positive" json:"positive,omitempty" asn1:"optional"`
	Density		int64	`xml:"density" json:"density,omitempty" asn1:"optional"`
	PatternFrom	int64	`xml:"pattern-from" json:"pattern_from,omitempty" asn1:"optional"`
	PatternTo	int64	`xml:"pattern-to" json:"pattern_to,omitempty" asn1:"optional"`
	QueryFrom	int64	`xml:"query-from" json:"query_from"`
	QueryTo		int64	`xml:"query-to" json:"query_to"`
	QueryStrand	string	`xml:"query-strand" json:"query_strand,omitempty" asn1:"optional"`
	QueryFrame	int64	`xml:"query-frame" json:"query_frame,omitempty" asn1:"optional"`
	HitFrom		int64	`xml:"hit-from" json:"hit_from"`
	HitTo		int64	`xml:"hit-to" json:"hit_to"`
	HitStrand	string	`xml:"hit-strand" json:"hit_strand,omitempty" asn1:"optional"`
	HitFrame	int64	`xml:"hit-frame" json:"hit_frame,omitempty" asn1:"optional"`
	AlignLen	int64	`xml:"align-len" json:"align_len,omitempty" asn1:"optional"`
	Gaps		int64	`xml:"gaps" json:"gaps,omitempty" asn1:"optional"`
	Qseq		string	`xml:"qseq" json:"qseq"`
	Hseq		string	`xml:"hseq" json:"hseq"`
	Midline		string	`xml:"midline" json:"midline,omitempty" asn1:"optional"`
}
package NCBIBlastOutput

type BlastOutput struct {
	Program		string		`xml:"program" json:"program"`
	Version		string		`xml:"version" json:"version"`
	Reference	string		`xml:"reference" json:"reference"`
	Db		string		`xml:"db" json:"db"`
	QueryID		string		`xml:"query-ID" json:"query_ID"`
	QueryDef	string		`xml:"query-def" json:"query_def"`
	QueryLen	int64		`xml:"query-len" json:"query_len"`
	QuerySeq	string		`xml:"query-seq" json:"query_seq,omitempty" asn1:"optional"`
	Param		*Parameters	`xml:"param" json:"param,omitempty"`
	Iterations	[]Iteration	`xml:"iterations" json:"iterations,omitempty"`
	Mbstat		*Statistics	`xml:"mbstat" json:"mbstat,omitempty" asn1:"optional"`
}
type Iteration struct {
	IterNum		int64		`xml:"iter-num" json:"iter_num"`
	QueryID		string		`xml:"query-ID" json:"query_ID,omitempty" asn1:"optional"`
	QueryDef	string		`xml:"query-def" json:"query_def,omitempty" asn1:"optional"`
	QueryLen	int64		`xml:"query-len" json:"query_len,omitempty" asn1:"optional"`
	Hits		[]Hit		`xml:"hits" json:"hits,omitempty" asn1:"optional"`
	Stat		*Statistics	`xml:"stat" json:"stat,omitempty" asn1:"optional"`
	Message		string		`xml:"message" json:"message,omitempty" asn1:"optional"`
}
type Parameters struct {
	Matrix		string	`xml:"matrix" json:"matrix,omitempty" asn1:"optional"`
	Expect		float64	`xml:"expect" json:"expect"`
	Include		float64	`xml:"include" json:"include,omitempty" asn1:"optional"`
	ScMatch		int64	`xml:"sc-match" json:"sc_match,omitempty" asn1:"optional"`
	ScMismatch	int64	`xml:"sc-mismatch" json:"sc_mismatch,omitempty" asn1:"optional"`
	GapOpen		int64	`xml:"gap-open" json:"gap_open"`
	GapExtend	int64	`xml:"gap-extend" json:"gap_extend"`
	Filter		string	`xml:"filter" json:"filter,omitempty" asn1:"optional"`
	Pattern		string	`xml:"pattern" json:"pattern,omitempty" asn1:"optional"`
	EntrezQuery	string	`xml:"entrez-query" json:"entrez_query,omitempty" asn1:"optional"`
}
type Statistics struct {
	DbNum		int64	`xml:"db-num" json:"db_num"`
	DbLen		*int64	`xml:"db-len" json:"db_len,omitempty"`
	HspLen		int64	`xml:"hsp-len" json:"hsp_len"`
	EffSpace	float64	`xml:"eff-space" json:"eff_space"`
	Kappa		float64	`xml:"kappa" json:"kappa"`
	Lambda		float64	`xml:"lambda" json:"lambda"`
	Entropy		float64	`xml:"entropy" json:"entropy"`
}
type Hit struct {
	Num		int64	`xml:"num" json:"num"`
	Id		string	`xml:"id" json:"id"`
	Def		string	`xml:"def" json:"def"`
	Accession	string	`xml:"accession" json:"accession"`
	Len		int64	`xml:"len" json:"len"`
	Hsps		[]Hsp	`xml:"hsps" json:"hsps,omitempty" asn1:"optional"`
}
type Hsp struct {
	Num		int64	`xml:"num" json:"num"`
	BitScore	float64	`xml:"bit-score" json:"bit_score"`
	Score		float64	`xml:"score" json:"score"`
	Evalue		float64	`xml:"evalue" json:"evalue"`
	QueryFrom	int64	`xml:"query-from" json:"query_from"`
	QueryTo		int64	`xml:"query-to" json:"query_to"`
	HitFrom		int64	`xml:"hit-from" json:"hit_from"`
	HitTo		int64	`xml:"hit-to" json:"hit_to"`
	PatternFrom	int64	`xml:"pattern-from" json:"pattern_from,omitempty" asn1:"optional"`
	PatternTo	int64	`xml:"pattern-to" json:"pattern_to,omitempty" asn1:"optional"`
	QueryFrame	int64	`xml:"query-frame" json:"query_frame,omitempty" asn1:"optional"`
	HitFrame	int64	`xml:"hit-frame" json:"hit_frame,omitempty" asn1:"optional"`
	Identity	int64	`xml:"identity" json:"identity,omitempty" asn1:"optional"`
	Positive	int64	`xml:"positive" json:"positive,omitempty" asn1:"optional"`
	Gaps		int64	`xml:"gaps" json:"gaps,omitempty" asn1:"optional"`
	AlignLen	int64	`xml:"align-len" json:"align_len,omitempty" asn1:"optional"`
	Density		int64	`xml:"density" json:"density,omitempty" asn1:"optional"`
	Qseq		string	`xml:"qseq" json:"qseq"`
	Hseq		string	`xml:"hseq" json:"hseq"`
	Midline		string	`xml:"midline" json:"midline,omitempty" asn1:"optional"`
}
package NCBICdd

import "NCBIGeneral"
import "NCBIPub"
import "MMDB"
import "NCBISequence"
import "NCBISeqset"
import "NCBIOrganism"
import "NCBISeqloc"
import "NCBISeqfeat"
import "NCBISeqalign"
import "NCBICn3d"
import "NCBIScoreMat"

type CddOrgRef struct {
	Reference	*NCBIOrganism.OrgRef	`xml:"reference" json:"reference,omitempty"`
	Active		bool			`xml:"active" json:"active"`
	ParentTaxId	int64			`xml:"parent-tax-id" json:"parent_tax_id,omitempty" asn1:"optional"`
	Rank		string			`xml:"rank" json:"rank,omitempty" asn1:"optional"`
}
type CddOrgRefSet []CddOrgRef
type CddPrefNodeDescr struct {
	CreateDate	*NCBIGeneral.Date	`xml:"create-date" json:"create_date,omitempty"`
	Description	string			`xml:"description" json:"description"`
}
//CddPrefNodeDescr,ChoiceOption
type CddPrefNodeDescrSet []CddPrefNodeDescr
type CddPrefNodes struct {
	PreferredNodes	*CddOrgRefSet		`xml:"preferred-nodes" json:"preferred_nodes,omitempty"`
	ModelOrganisms	*CddOrgRefSet		`xml:"model-organisms" json:"model_organisms,omitempty" asn1:"optional"`
	OptionalNodes	*CddOrgRefSet		`xml:"optional-nodes" json:"optional_nodes,omitempty" asn1:"optional"`
	Description	*CddPrefNodeDescrSet	`xml:"description" json:"description,omitempty" asn1:"optional"`
}
type GlobalId struct {
	Accession	string	`xml:"accession" json:"accession"`
	Release		string	`xml:"release" json:"release,omitempty" asn1:"optional"`
	Version		int64	`xml:"version" json:"version,omitempty" asn1:"optional"`
	Database	string	`xml:"database" json:"database,omitempty" asn1:"optional"`
}
type CddId struct {
	Uid	int64		`xml:"uid" json:"uid"`
	Gid	*GlobalId	`xml:"gid" json:"gid,omitempty"`
}
//CddId,ChoiceOption
type CddIdSet []CddId
type CddRepeat struct {
	Count		int64			`xml:"count" json:"count"`
	Location	*NCBISeqloc.SeqLoc	`xml:"location" json:"location,omitempty" asn1:"optional"`
	Avglen		int64			`xml:"avglen" json:"avglen,omitempty" asn1:"optional"`
}
type CddBookRef struct {
	Bookname	string	`xml:"bookname" json:"bookname"`
	Textelement	string	`xml:"textelement" json:"textelement"`//Textelement,EnumList:unassigned(0),section(1),figgrp(2),table(3),chapter(4),biblist(5),box(6),glossary(7),appendix(8),other(255)
	Elementid	int64	`xml:"elementid" json:"elementid,omitempty" asn1:"optional"`
	Subelementid	int64	`xml:"subelementid" json:"subelementid,omitempty" asn1:"optional"`
	Celementid	string	`xml:"celementid" json:"celementid,omitempty" asn1:"optional"`
	Csubelementid	string	`xml:"csubelementid" json:"csubelementid,omitempty" asn1:"optional"`
}
type CddDescr struct {
	Othername	string			`xml:"othername" json:"othername"`
	Category	string			`xml:"category" json:"category"`
	Comment		string			`xml:"comment" json:"comment"`
	Reference	*NCBIPub.Pub		`xml:"reference" json:"reference,omitempty"`
	CreateDate	*NCBIGeneral.Date	`xml:"create-date" json:"create_date,omitempty"`
	TaxSource	*NCBIOrganism.OrgRef	`xml:"tax-source" json:"tax_source,omitempty"`
	Source		string			`xml:"source" json:"source"`
	Status		int			`xml:"status" json:"status"`//Status,IntegerEnum:unassigned(0),finished-ok(1),pending-release(2),other-asis(3),matrix-only(4),update-running(5),auto-updated(6),claimed(7),curated-complete(8),other(255)
	UpdateDate	*NCBIGeneral.Date	`xml:"update-date" json:"update_date,omitempty"`
	Scrapbook	[]string		`xml:"scrapbook" json:"scrapbook,omitempty"`
	SourceId	*CddIdSet		`xml:"source-id" json:"source_id,omitempty"`
	Repeats		*CddRepeat		`xml:"repeats" json:"repeats,omitempty"`
	OldRoot		*CddIdSet		`xml:"old-root" json:"old_root,omitempty"`
	CurationStatus	int			`xml:"curation-status" json:"curation_status"`//CurationStatus,IntegerEnum:unassigned(0),prein(1),ofc(2),iac(3),ofv1(4),iav1(5),ofv2(6),iav2(7),postin(8),other(255)
	ReadonlyStatus	int			`xml:"readonly-status" json:"readonly_status"`//ReadonlyStatus,IntegerEnum:unassigned(0),readonly(1),readwrite(2),other(255)
	BookRef		*CddBookRef		`xml:"book-ref" json:"book_ref,omitempty"`
	Attribution	*NCBIPub.Pub		`xml:"attribution" json:"attribution,omitempty"`
	Title		string			`xml:"title" json:"title"`
}
//CddDescr,ChoiceOption
type CddDescrSet []CddDescr
type CddTree struct {
	Name		string		`xml:"name" json:"name"`
	Id		*CddIdSet	`xml:"id" json:"id,omitempty"`
	Description	*CddDescrSet	`xml:"description" json:"description,omitempty" asn1:"optional"`
	Parent		*CddId		`xml:"parent" json:"parent,omitempty" asn1:"optional"`
	Children	*CddIdSet	`xml:"children" json:"children,omitempty" asn1:"optional"`
	Siblings	*CddIdSet	`xml:"siblings" json:"siblings,omitempty" asn1:"optional"`
	Neighbors	*CddIdSet	`xml:"neighbors" json:"neighbors,omitempty" asn1:"optional"`
}
type CddTreeSet []CddTree
type Matrix struct {
	Ncolumns	int64		`xml:"ncolumns" json:"ncolumns"`
	Nrows		int64		`xml:"nrows" json:"nrows"`
	RowLabels	[]string	`xml:"row-labels" json:"row_labels,omitempty" asn1:"optional"`
	ScaleFactor	int64		`xml:"scale-factor" json:"scale_factor"`
	Columns		[]int64		`xml:"columns" json:"columns,omitempty"`
}
type Triangle struct {
	Nelements	int64			`xml:"nelements" json:"nelements"`
	Scores		*NCBISeqalign.ScoreSet	`xml:"scores" json:"scores,omitempty" asn1:"optional"`
	DivRanks	[]int64			`xml:"div-ranks" json:"div_ranks,omitempty" asn1:"optional"`
}
type UpdateComment struct {
	Comment		string			`xml:"comment" json:"comment"`
	Addthis		*NCBISeqloc.SeqLoc	`xml:"addthis" json:"addthis,omitempty"`
	Replaces	*NCBISeqloc.SeqLoc	`xml:"replaces" json:"replaces,omitempty"`
	RejectLoc	*NCBISeqloc.SeqLoc	`xml:"reject-loc" json:"reject_loc,omitempty"`
	Reference	*NCBIPub.Pub		`xml:"reference" json:"reference,omitempty"`
}
//UpdateComment,ChoiceOption
type UpdateAlign struct {
	Description	[]UpdateComment		`xml:"description" json:"description,omitempty" asn1:"optional"`
	Seqannot	*NCBISequence.SeqAnnot	`xml:"seqannot" json:"seqannot,omitempty" asn1:"optional"`
	Type		int			`xml:"type" json:"type"`//Type,IntegerEnum:unassigned(0),update(1),update-3d(2),demoted(51),demoted-3d(52),other(255)
}
type RejectId struct {
	Description	[]UpdateComment		`xml:"description" json:"description,omitempty" asn1:"optional"`
	Ids		[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty"`
}
type FeatureEvidence struct {
	Comment		string			`xml:"comment" json:"comment"`
	Reference	*NCBIPub.Pub		`xml:"reference" json:"reference,omitempty"`
	Bsannot		*MMDB.BiostrucAnnotSet	`xml:"bsannot" json:"bsannot,omitempty"`
	Seqfeat		*NCBISeqfeat.SeqFeat	`xml:"seqfeat" json:"seqfeat,omitempty"`
	BookRef		*CddBookRef		`xml:"book-ref" json:"book_ref,omitempty"`
}
//FeatureEvidence,ChoiceOption
type AlignAnnot struct {
	Location	*NCBISeqloc.SeqLoc	`xml:"location" json:"location,omitempty"`
	Description	string			`xml:"description" json:"description,omitempty" asn1:"optional"`
	Evidence	[]FeatureEvidence	`xml:"evidence" json:"evidence,omitempty" asn1:"optional"`
	Type		int64			`xml:"type" json:"type,omitempty" asn1:"optional"`
	Aliases		[]string		`xml:"aliases" json:"aliases,omitempty" asn1:"optional"`
	Motif		string			`xml:"motif" json:"motif,omitempty" asn1:"optional"`
	Motifuse	int64			`xml:"motifuse" json:"motifuse,omitempty" asn1:"optional"`
}
type AlignAnnotSet []AlignAnnot
type DomainParent struct {
	ParentType	int			`xml:"parent-type" json:"parent_type"`//ParentType,IntegerEnum:classical(0),fusion(1),deletion(2),permutation(3),other(255)
	Parentid	*CddId			`xml:"parentid" json:"parentid,omitempty"`
	Seqannot	*NCBISequence.SeqAnnot	`xml:"seqannot" json:"seqannot,omitempty" asn1:"optional"`
}
type SequenceTree struct {
	CdAccession	string		`xml:"cdAccession" json:"cdAccession,omitempty" asn1:"optional"`
	Algorithm	*AlgorithmType	`xml:"algorithm" json:"algorithm,omitempty"`
	IsAnnotated	bool		`xml:"isAnnotated" json:"isAnnotated"`
	Root		*SeqTreeNode	`xml:"root" json:"root,omitempty"`
}
type SeqTreeNode struct {
	IsAnnotated	bool	`xml:"isAnnotated" json:"isAnnotated"`
	Name		string	`xml:"name" json:"name,omitempty" asn1:"optional"`
	Distance	float64	`xml:"distance" json:"distance,omitempty" asn1:"optional"`
	Children	struct {
		Children	[]SeqTreeNode	`xml:"children" json:"children,omitempty"`
		Footprint	struct {
			SeqRange	*NCBISeqloc.SeqInterval	`xml:"seqRange" json:"seqRange,omitempty"`
			RowId		int64			`xml:"rowId" json:"rowId,omitempty" asn1:"optional"`
		}	`xml:"footprint" json:"footprint"`
	}				`xml:"children" json:"children"`//Children,ChoiceOption
	Annotation	*NodeAnnotation	`xml:"annotation" json:"annotation,omitempty" asn1:"optional"`
}
type AlgorithmType struct {
	ScoringScheme		int	`xml:"scoring-Scheme" json:"scoring_Scheme"`//ScoringScheme,IntegerEnum:unassigned(0),percent-id(1),kimura-corrected(2),aligned-score(3),aligned-score-ext(4),aligned-score-filled(5),blast-footprint(6),blast-full(7),hybrid-aligned-score(8),other(255)
	ClusteringMethod	int	`xml:"clustering-Method" json:"clustering_Method"`//ClusteringMethod,IntegerEnum:unassigned(0),single-linkage(1),neighbor-joining(2),fast-minimum-evolution(3),other(255)
	ScoreMatrix		int	`xml:"score-Matrix" json:"score_Matrix,omitempty" asn1:"optional"`//ScoreMatrix,IntegerEnum:unassigned(0),blosum45(1),blosum62(2),blosum80(3),pam30(4),pam70(5),pam250(6),other(255)
	GapOpen			int64	`xml:"gapOpen" json:"gapOpen,omitempty" asn1:"optional"`
	GapExtend		int64	`xml:"gapExtend" json:"gapExtend,omitempty" asn1:"optional"`
	GapScaleFactor		int64	`xml:"gapScaleFactor" json:"gapScaleFactor,omitempty" asn1:"optional"`
	NTerminalExt		int64	`xml:"nTerminalExt" json:"nTerminalExt,omitempty" asn1:"optional"`
	CTerminalExt		int64	`xml:"cTerminalExt" json:"cTerminalExt,omitempty" asn1:"optional"`
	TreeScope		int	`xml:"tree-scope" json:"tree_scope,omitempty" asn1:"optional"`//TreeScope,IntegerEnum:allDescendants(0),immediateChildrenOnly(1),selfOnly(2),other(255)
	ColoringScope		int	`xml:"coloring-scope" json:"coloring_scope,omitempty" asn1:"optional"`//ColoringScope,IntegerEnum:allDescendants(0),immediateChildrenOnly(1),other(255)
}
type NodeAnnotation struct {
	PresentInChildCD	string	`xml:"presentInChildCD" json:"presentInChildCD,omitempty" asn1:"optional"`
	Note			string	`xml:"note" json:"note,omitempty" asn1:"optional"`
}
type Cdd struct {
	Name		string					`xml:"name" json:"name"`
	Id		*CddIdSet				`xml:"id" json:"id,omitempty"`
	Description	*CddDescrSet				`xml:"description" json:"description,omitempty" asn1:"optional"`
	Seqannot	[]NCBISequence.SeqAnnot			`xml:"seqannot" json:"seqannot,omitempty" asn1:"optional"`
	Features	*MMDB.BiostrucAnnotSet			`xml:"features" json:"features,omitempty" asn1:"optional"`
	Sequences	*NCBISeqset.SeqEntry			`xml:"sequences" json:"sequences,omitempty" asn1:"optional"`
	ProfileRange	*NCBISeqloc.SeqInterval			`xml:"profile-range" json:"profile_range,omitempty" asn1:"optional"`
	TruncMaster	*NCBISequence.Bioseq			`xml:"trunc-master" json:"trunc_master,omitempty" asn1:"optional"`
	Posfreq		*Matrix					`xml:"posfreq" json:"posfreq,omitempty" asn1:"optional"`
	Scoremat	*Matrix					`xml:"scoremat" json:"scoremat,omitempty" asn1:"optional"`
	Distance	*Triangle				`xml:"distance" json:"distance,omitempty" asn1:"optional"`
	Parent		*CddId					`xml:"parent" json:"parent,omitempty" asn1:"optional"`
	Children	*CddIdSet				`xml:"children" json:"children,omitempty" asn1:"optional"`
	Siblings	*CddIdSet				`xml:"siblings" json:"siblings,omitempty" asn1:"optional"`
	Neighbors	*CddIdSet				`xml:"neighbors" json:"neighbors,omitempty" asn1:"optional"`
	Pending		[]UpdateAlign				`xml:"pending" json:"pending,omitempty" asn1:"optional"`
	Rejects		[]RejectId				`xml:"rejects" json:"rejects,omitempty" asn1:"optional"`
	Master3d	[]NCBISeqloc.SeqId			`xml:"master3d" json:"master3d,omitempty" asn1:"optional"`
	Alignannot	*AlignAnnotSet				`xml:"alignannot" json:"alignannot,omitempty" asn1:"optional"`
	StyleDictionary	*NCBICn3d.Cn3dStyleDictionary		`xml:"style-dictionary" json:"style_dictionary,omitempty" asn1:"optional"`
	UserAnnotations	*NCBICn3d.Cn3dUserAnnotations		`xml:"user-annotations" json:"user_annotations,omitempty" asn1:"optional"`
	Ancestors	[]DomainParent				`xml:"ancestors" json:"ancestors,omitempty" asn1:"optional"`
	Scoreparams	*NCBIScoreMat.PssmWithParameters	`xml:"scoreparams" json:"scoreparams,omitempty" asn1:"optional"`
	Seqtree		*SequenceTree				`xml:"seqtree" json:"seqtree,omitempty" asn1:"optional"`
}
type CddSet []Cdd
type CddViewerRect struct {
	Top	int64	`xml:"top" json:"top"`
	Left	int64	`xml:"left" json:"left"`
	Width	int64	`xml:"width" json:"width"`
	Height	int64	`xml:"height" json:"height"`
}
type CddViewer struct {
	Ctrl		int		`xml:"ctrl" json:"ctrl"`//Ctrl,IntegerEnum:unassigned(0),cd-info(1),align-annot(2),seq-list(3),seq-tree(4),merge-preview(5),cross-hits(6),notes(7),tax-tree(8),dart(9),dart-selected-rows(10),other(255)
	Rect		*CddViewerRect	`xml:"rect" json:"rect,omitempty" asn1:"optional"`
	Accessions	[]string	`xml:"accessions" json:"accessions,omitempty"`
}
type CddScript struct {
	Type		int	`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:unassigned(0),user-recorded(1),server-generated(2),other(255)
	Name		string	`xml:"name" json:"name,omitempty" asn1:"optional"`
	Commands	string	`xml:"commands" json:"commands"`
}
type CddProject struct {
	Cds		[]Cdd			`xml:"cds" json:"cds,omitempty"`
	Cdcolor		[]int64			`xml:"cdcolor" json:"cdcolor,omitempty"`
	Viewers		[]CddViewer		`xml:"viewers" json:"viewers,omitempty"`
	Log		string			`xml:"log" json:"log"`
	Scripts		[]CddScript		`xml:"scripts" json:"scripts,omitempty" asn1:"optional"`
	Id		*CddIdSet		`xml:"id" json:"id,omitempty" asn1:"optional"`
	Rids		[]string		`xml:"rids" json:"rids,omitempty" asn1:"optional"`
	CreateDate	*NCBIGeneral.Date	`xml:"create-date" json:"create_date,omitempty" asn1:"optional"`
	UpdateDate	*NCBIGeneral.Date	`xml:"update-date" json:"update_date,omitempty" asn1:"optional"`
	ProjectId	int64			`xml:"project-id" json:"project_id,omitempty" asn1:"optional"`
}
package NCBICn3d

import "MMDB"
import "MMDBChemicalGraph"

type Cn3dBackboneType string
//Cn3dBackboneType,EnumList:off(1),trace(2),partial(3),complete(4)
type Cn3dDrawingStyle string
//Cn3dDrawingStyle,EnumList:wire(1),tubes(2),ball-and-stick(3),space-fill(4),wire-worm(5),tube-worm(6),with-arrows(7),without-arrows(8)
type Cn3dColorScheme string
//Cn3dColorScheme,EnumList:element(1),object(2),molecule(3),domain(4),residue(20),secondary-structure(5),user-select(6),aligned(7),identity(8),variety(9),weighted-variety(10),information-content(11),fit(12),block-fit(17),block-z-fit(18),block-row-fit(19),temperature(13),hydrophobicity(14),charge(15),rainbow(16)
type Cn3dColor struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor" asn1:"default:255"`
	Red		int64	`xml:"red" json:"red"`
	Green		int64	`xml:"green" json:"green"`
	Blue		int64	`xml:"blue" json:"blue"`
	Alpha		int64	`xml:"alpha" json:"alpha" asn1:"default:255"`
}
type Cn3dBackboneStyle struct {
	Type		*Cn3dBackboneType	`xml:"type" json:"type,omitempty"`
	Style		*Cn3dDrawingStyle	`xml:"style" json:"style,omitempty"`
	ColorScheme	*Cn3dColorScheme	`xml:"color-scheme" json:"color_scheme,omitempty"`
	UserColor	*Cn3dColor		`xml:"user-color" json:"user_color,omitempty"`
}
type Cn3dGeneralStyle struct {
	IsOn		bool			`xml:"is-on" json:"is_on"`
	Style		*Cn3dDrawingStyle	`xml:"style" json:"style,omitempty"`
	ColorScheme	*Cn3dColorScheme	`xml:"color-scheme" json:"color_scheme,omitempty"`
	UserColor	*Cn3dColor		`xml:"user-color" json:"user_color,omitempty"`
}
type Cn3dBackboneLabelStyle struct {
	Spacing	int64	`xml:"spacing" json:"spacing"`
	Type	string	`xml:"type" json:"type"`//Type,EnumList:one-letter(1),three-letter(2)
	Number	string	`xml:"number" json:"number"`//Number,EnumList:none(0),sequential(1),pdb(2)
	Termini	bool	`xml:"termini" json:"termini"`
	White	bool	`xml:"white" json:"white"`
}
type Cn3dStyleSettings struct {
	Name			string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	ProteinBackbone		*Cn3dBackboneStyle	`xml:"protein-backbone" json:"protein_backbone,omitempty"`
	NucleotideBackbone	*Cn3dBackboneStyle	`xml:"nucleotide-backbone" json:"nucleotide_backbone,omitempty"`
	ProteinSidechains	*Cn3dGeneralStyle	`xml:"protein-sidechains" json:"protein_sidechains,omitempty"`
	NucleotideSidechains	*Cn3dGeneralStyle	`xml:"nucleotide-sidechains" json:"nucleotide_sidechains,omitempty"`
	Heterogens		*Cn3dGeneralStyle	`xml:"heterogens" json:"heterogens,omitempty"`
	Solvents		*Cn3dGeneralStyle	`xml:"solvents" json:"solvents,omitempty"`
	Connections		*Cn3dGeneralStyle	`xml:"connections" json:"connections,omitempty"`
	HelixObjects		*Cn3dGeneralStyle	`xml:"helix-objects" json:"helix_objects,omitempty"`
	StrandObjects		*Cn3dGeneralStyle	`xml:"strand-objects" json:"strand_objects,omitempty"`
	VirtualDisulfidesOn	bool			`xml:"virtual-disulfides-on" json:"virtual_disulfides_on"`
	VirtualDisulfideColor	*Cn3dColor		`xml:"virtual-disulfide-color" json:"virtual_disulfide_color,omitempty"`
	HydrogensOn		bool			`xml:"hydrogens-on" json:"hydrogens_on"`
	BackgroundColor		*Cn3dColor		`xml:"background-color" json:"background_color,omitempty"`
	ScaleFactor		int64			`xml:"scale-factor" json:"scale_factor"`
	SpaceFillProportion	int64			`xml:"space-fill-proportion" json:"space_fill_proportion"`
	BallRadius		int64			`xml:"ball-radius" json:"ball_radius"`
	StickRadius		int64			`xml:"stick-radius" json:"stick_radius"`
	TubeRadius		int64			`xml:"tube-radius" json:"tube_radius"`
	TubeWormRadius		int64			`xml:"tube-worm-radius" json:"tube_worm_radius"`
	HelixRadius		int64			`xml:"helix-radius" json:"helix_radius"`
	StrandWidth		int64			`xml:"strand-width" json:"strand_width"`
	StrandThickness		int64			`xml:"strand-thickness" json:"strand_thickness"`
	ProteinLabels		*Cn3dBackboneLabelStyle	`xml:"protein-labels" json:"protein_labels,omitempty" asn1:"optional"`
	NucleotideLabels	*Cn3dBackboneLabelStyle	`xml:"nucleotide-labels" json:"nucleotide_labels,omitempty" asn1:"optional"`
	IonLabels		bool			`xml:"ion-labels" json:"ion_labels,omitempty" asn1:"optional"`
}
type Cn3dStyleSettingsSet []Cn3dStyleSettings
type Cn3dStyleTableId int64
type Cn3dStyleTableItem struct {
	Id	*Cn3dStyleTableId	`xml:"id" json:"id,omitempty"`
	Style	*Cn3dStyleSettings	`xml:"style" json:"style,omitempty"`
}
type Cn3dStyleDictionary struct {
	GlobalStyle	*Cn3dStyleSettings	`xml:"global-style" json:"global_style,omitempty"`
	StyleTable	[]Cn3dStyleTableItem	`xml:"style-table" json:"style_table,omitempty" asn1:"optional"`
}
type Cn3dResidueRange struct {
	From	*MMDBChemicalGraph.ResidueId	`xml:"from" json:"from,omitempty"`
	To	*MMDBChemicalGraph.ResidueId	`xml:"to" json:"to,omitempty"`
}
type Cn3dMoleculeLocation struct {
	MoleculeId	*MMDBChemicalGraph.MoleculeId	`xml:"molecule-id" json:"molecule_id,omitempty"`
	Residues	[]Cn3dResidueRange		`xml:"residues" json:"residues,omitempty" asn1:"optional"`
}
type Cn3dObjectLocation struct {
	StructureId	*MMDB.BiostrucId	`xml:"structure-id" json:"structure_id,omitempty"`
	Residues	[]Cn3dMoleculeLocation	`xml:"residues" json:"residues,omitempty"`
}
type Cn3dUserAnnotation struct {
	Name		string			`xml:"name" json:"name"`
	Description	string			`xml:"description" json:"description,omitempty" asn1:"optional"`
	StyleId		*Cn3dStyleTableId	`xml:"style-id" json:"style_id,omitempty"`
	Residues	[]Cn3dObjectLocation	`xml:"residues" json:"residues,omitempty"`
	IsOn		bool			`xml:"is-on" json:"is_on"`
}
type Cn3dGLMatrix struct {
	M0	float64	`xml:"m0" json:"m0"`
	M1	float64	`xml:"m1" json:"m1"`
	M2	float64	`xml:"m2" json:"m2"`
	M3	float64	`xml:"m3" json:"m3"`
	M4	float64	`xml:"m4" json:"m4"`
	M5	float64	`xml:"m5" json:"m5"`
	M6	float64	`xml:"m6" json:"m6"`
	M7	float64	`xml:"m7" json:"m7"`
	M8	float64	`xml:"m8" json:"m8"`
	M9	float64	`xml:"m9" json:"m9"`
	M10	float64	`xml:"m10" json:"m10"`
	M11	float64	`xml:"m11" json:"m11"`
	M12	float64	`xml:"m12" json:"m12"`
	M13	float64	`xml:"m13" json:"m13"`
	M14	float64	`xml:"m14" json:"m14"`
	M15	float64	`xml:"m15" json:"m15"`
}
type Cn3dVector struct {
	X	float64	`xml:"x" json:"x"`
	Y	float64	`xml:"y" json:"y"`
	Z	float64	`xml:"z" json:"z"`
}
type Cn3dViewSettings struct {
	CameraDistance	float64		`xml:"camera-distance" json:"camera_distance"`
	CameraAngleRad	float64		`xml:"camera-angle-rad" json:"camera_angle_rad"`
	CameraLookAtX	float64		`xml:"camera-look-at-X" json:"camera_look_at_X"`
	CameraLookAtY	float64		`xml:"camera-look-at-Y" json:"camera_look_at_Y"`
	CameraClipNear	float64		`xml:"camera-clip-near" json:"camera_clip_near"`
	CameraClipFar	float64		`xml:"camera-clip-far" json:"camera_clip_far"`
	Matrix		*Cn3dGLMatrix	`xml:"matrix" json:"matrix,omitempty"`
	RotationCenter	*Cn3dVector	`xml:"rotation-center" json:"rotation_center,omitempty"`
}
type Cn3dUserAnnotations struct {
	Annotations	[]Cn3dUserAnnotation	`xml:"annotations" json:"annotations,omitempty" asn1:"optional"`
	View		*Cn3dViewSettings	`xml:"view" json:"view,omitempty" asn1:"optional"`
}
package Docsum34

type Assay struct {
	Attlist	struct {
		Handle		string	`xml:"handle" json:"handle,omitempty" asn1:"optional"`
		Batch		string	`xml:"batch" json:"batch,omitempty" asn1:"optional"`
		BatchId		int64	`xml:"batchId" json:"batchId,omitempty" asn1:"optional"`
		BatchType	string	`xml:"batchType" json:"batchType,omitempty" asn1:"optional"`//BatchType,EnumList:snpassay(1),validation(2),doublehit(3)
		MolType		string	`xml:"molType" json:"molType,omitempty" asn1:"optional"`//MolType,EnumList:genomic(1),cDNA(2),mito(3),chloro(4)
		SampleSize	int64	`xml:"sampleSize" json:"sampleSize,omitempty" asn1:"optional"`
		Population	string	`xml:"population" json:"population,omitempty" asn1:"optional"`
		LinkoutUrl	string	`xml:"linkoutUrl" json:"linkoutUrl,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	Method	struct {
		EMethod struct {
			Attlist	struct {
				Name	string	`xml:"name" json:"name,omitempty" asn1:"optional"`
				Id	string	`xml:"id" json:"id,omitempty" asn1:"optional"`
			}	`xml:"attlist" json:"attlist"`
			Exception	string	`xml:"exception" json:"exception"`
		} `xml:"eMethod" json:"eMethod,omitempty" asn1:"optional"`
	}	`xml:"method" json:"method"`
	Taxonomy	struct {
		Attlist	struct {
			Id		int64	`xml:"id" json:"id"`
			Organism	string	`xml:"organism" json:"organism,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Taxonomy	interface{}	`xml:"taxonomy" json:"taxonomy"`
	}	`xml:"taxonomy" json:"taxonomy"`
	Strains		[]string	`xml:"strains" json:"strains,omitempty" asn1:"optional"`
	Comment		string		`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Citation	[]string	`xml:"citation" json:"citation,omitempty" asn1:"optional"`
}
type Assembly struct {
	Attlist	struct {
		DbSnpBuild	int64	`xml:"dbSnpBuild" json:"dbSnpBuild"`
		GenomeBuild	string	`xml:"genomeBuild" json:"genomeBuild"`
		GroupLabel	string	`xml:"groupLabel" json:"groupLabel,omitempty" asn1:"optional"`
		AssemblySource	string	`xml:"assemblySource" json:"assemblySource,omitempty" asn1:"optional"`
		Current		bool	`xml:"current" json:"current,omitempty" asn1:"optional"`
		Reference	bool	`xml:"reference" json:"reference,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	Component	[]Component	`xml:"component" json:"component,omitempty" asn1:"optional"`
	SnpStat		struct {
		Attlist	struct {
			MapWeight		string	`xml:"mapWeight" json:"mapWeight"`//MapWeight,EnumList:unmapped(1),unique-in-contig(2),two-hits-in-contig(3),less-10-hits(4),multiple-hits(5)
			ChromCount		int64	`xml:"chromCount" json:"chromCount,omitempty" asn1:"optional"`
			PlacedContigCount	int64	`xml:"placedContigCount" json:"placedContigCount,omitempty" asn1:"optional"`
			UnplacedContigCount	int64	`xml:"unplacedContigCount" json:"unplacedContigCount,omitempty" asn1:"optional"`
			SeqlocCount		int64	`xml:"seqlocCount" json:"seqlocCount,omitempty" asn1:"optional"`
			HapCount		int64	`xml:"hapCount" json:"hapCount,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		SnpStat	interface{}	`xml:"snpStat" json:"snpStat"`
	}	`xml:"snpStat" json:"snpStat"`
}
type BaseURL struct {
	Attlist	struct {
		UrlId		int64	`xml:"urlId" json:"urlId,omitempty" asn1:"optional"`
		ResourceName	string	`xml:"resourceName" json:"resourceName,omitempty" asn1:"optional"`
		ResourceId	string	`xml:"resourceId" json:"resourceId,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	BaseURL	string	`xml:"baseURL" json:"baseURL"`
}
type Component struct {
	Attlist	struct {
		ComponentType	string	`xml:"componentType" json:"componentType,omitempty" asn1:"optional"`//ComponentType,EnumList:contig(1),mrna(2)
		CtgId		int64	`xml:"ctgId" json:"ctgId,omitempty" asn1:"optional"`
		Accession	string	`xml:"accession" json:"accession,omitempty" asn1:"optional"`
		Name		string	`xml:"name" json:"name,omitempty" asn1:"optional"`
		Chromosome	string	`xml:"chromosome" json:"chromosome,omitempty" asn1:"optional"`
		Start		int64	`xml:"start" json:"start,omitempty" asn1:"optional"`
		End		int64	`xml:"end" json:"end,omitempty" asn1:"optional"`
		Orientation	string	`xml:"orientation" json:"orientation,omitempty" asn1:"optional"`//Orientation,EnumList:fwd(1),rev(2),unknown(3)
		Gi		string	`xml:"gi" json:"gi,omitempty" asn1:"optional"`
		GroupTerm	string	`xml:"groupTerm" json:"groupTerm,omitempty" asn1:"optional"`
		ContigLabel	string	`xml:"contigLabel" json:"contigLabel,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	MapLoc	[]MapLoc	`xml:"mapLoc" json:"mapLoc,omitempty"`
}
type ExchangeSet struct {
	Attlist	struct {
		SetType		string	`xml:"setType" json:"setType,omitempty" asn1:"optional"`
		SetDepth	string	`xml:"setDepth" json:"setDepth,omitempty" asn1:"optional"`
		SpecVersion	string	`xml:"specVersion" json:"specVersion,omitempty" asn1:"optional"`
		DbSnpBuild	int64	`xml:"dbSnpBuild" json:"dbSnpBuild,omitempty" asn1:"optional"`
		Generated	string	`xml:"generated" json:"generated,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	SourceDatabase	struct {
		Attlist	struct {
			TaxId		int64	`xml:"taxId" json:"taxId"`
			Organism	string	`xml:"organism" json:"organism"`
			DbSnpOrgAbbr	string	`xml:"dbSnpOrgAbbr" json:"dbSnpOrgAbbr,omitempty" asn1:"optional"`
			GpipeOrgAbbr	string	`xml:"gpipeOrgAbbr" json:"gpipeOrgAbbr,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		SourceDatabase	interface{}	`xml:"sourceDatabase" json:"sourceDatabase"`
	}	`xml:"sourceDatabase" json:"sourceDatabase,omitempty" asn1:"optional"`
	Rs	[]Rs	`xml:"rs" json:"rs,omitempty" asn1:"optional"`
	Assay	*Assay	`xml:"assay" json:"assay,omitempty" asn1:"optional"`
	Query	struct {
		Attlist	struct {
			Date	string	`xml:"date" json:"date,omitempty" asn1:"optional"`
			String	string	`xml:"string" json:"string,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Query	interface{}	`xml:"query" json:"query"`
	}	`xml:"query" json:"query,omitempty" asn1:"optional"`
	Summary	struct {
		Attlist	struct {
			NumRsIds	int64	`xml:"numRsIds" json:"numRsIds,omitempty" asn1:"optional"`
			TotalSeqLength	int64	`xml:"totalSeqLength" json:"totalSeqLength,omitempty" asn1:"optional"`
			NumContigHits	int64	`xml:"numContigHits" json:"numContigHits,omitempty" asn1:"optional"`
			NumGeneHits	int64	`xml:"numGeneHits" json:"numGeneHits,omitempty" asn1:"optional"`
			NumGiHits	int64	`xml:"numGiHits" json:"numGiHits,omitempty" asn1:"optional"`
			Num3dStructs	int64	`xml:"num3dStructs" json:"num3dStructs,omitempty" asn1:"optional"`
			NumAlleleFreqs	int64	`xml:"numAlleleFreqs" json:"numAlleleFreqs,omitempty" asn1:"optional"`
			NumStsHits	int64	`xml:"numStsHits" json:"numStsHits,omitempty" asn1:"optional"`
			NumUnigeneCids	int64	`xml:"numUnigeneCids" json:"numUnigeneCids,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Summary	interface{}	`xml:"summary" json:"summary"`
	}	`xml:"summary" json:"summary,omitempty" asn1:"optional"`
	BaseURL	[]BaseURL	`xml:"baseURL" json:"baseURL,omitempty" asn1:"optional"`
}
type FxnSet struct {
	Attlist	struct {
		GeneId		int64	`xml:"geneId" json:"geneId,omitempty" asn1:"optional"`
		Symbol		string	`xml:"symbol" json:"symbol,omitempty" asn1:"optional"`
		MrnaAcc		string	`xml:"mrnaAcc" json:"mrnaAcc,omitempty" asn1:"optional"`
		MrnaVer		int64	`xml:"mrnaVer" json:"mrnaVer,omitempty" asn1:"optional"`
		ProtAcc		string	`xml:"protAcc" json:"protAcc,omitempty" asn1:"optional"`
		ProtVer		int64	`xml:"protVer" json:"protVer,omitempty" asn1:"optional"`
		FxnClass	string	`xml:"fxnClass" json:"fxnClass,omitempty" asn1:"optional"`//FxnClass,EnumList:locus-region(1),coding-unknown(2),synonymous-codon(3),non-synonymous-codon(4),mrna-utr(5),intron-variant(6),splice-region-variant(7),reference(8),coding-exception(9),coding-sequence-variant(10),nc-transcript-variant(11),downstream-variant-500B(12),upstream-variant-2KB(13),nonsense(14),missense(15),frameshift-variant(16),utr-variant-3-prime(17),utr-variant-5-prime(18),splice-acceptor-variant(19),splice-donor-variant(20),cds-indel(21),stop-gained(22),stop-lost(23),complex-change-in-transcript(24),incomplete-terminal-codon-variant(25),nmd-transcript-variant(26),mature-miRNA-variant(27),upstream-variant-5KB(28),downstream-variant-5KB(29),intergenic(30)
		ReadingFrame	int64	`xml:"readingFrame" json:"readingFrame,omitempty" asn1:"optional"`
		Allele		string	`xml:"allele" json:"allele,omitempty" asn1:"optional"`
		Residue		string	`xml:"residue" json:"residue,omitempty" asn1:"optional"`
		AaPosition	int64	`xml:"aaPosition" json:"aaPosition,omitempty" asn1:"optional"`
		MrnaPosition	int64	`xml:"mrnaPosition" json:"mrnaPosition,omitempty" asn1:"optional"`
		SoTerm		string	`xml:"soTerm" json:"soTerm,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	FxnSet	interface{}	`xml:"fxnSet" json:"fxnSet"`
}
type MapLoc struct {
	Attlist	struct {
		AsnFrom			int64	`xml:"asnFrom" json:"asnFrom"`
		AsnTo			int64	`xml:"asnTo" json:"asnTo"`
		LocType			string	`xml:"locType" json:"locType"`//LocType,EnumList:insertion(1),exact(2),deletion(3),range-ins(4),range-exact(5),range-del(6)
		AlnQuality		float64	`xml:"alnQuality" json:"alnQuality,omitempty" asn1:"optional"`
		Orient			string	`xml:"orient" json:"orient,omitempty" asn1:"optional"`//Orient,EnumList:forward(1),reverse(2)
		PhysMapInt		int64	`xml:"physMapInt" json:"physMapInt,omitempty" asn1:"optional"`
		LeftFlankNeighborPos	int64	`xml:"leftFlankNeighborPos" json:"leftFlankNeighborPos,omitempty" asn1:"optional"`
		RightFlankNeighborPos	int64	`xml:"rightFlankNeighborPos" json:"rightFlankNeighborPos,omitempty" asn1:"optional"`
		LeftContigNeighborPos	int64	`xml:"leftContigNeighborPos" json:"leftContigNeighborPos,omitempty" asn1:"optional"`
		RightContigNeighborPos	int64	`xml:"rightContigNeighborPos" json:"rightContigNeighborPos,omitempty" asn1:"optional"`
		NumberOfMismatches	int64	`xml:"numberOfMismatches" json:"numberOfMismatches,omitempty" asn1:"optional"`
		NumberOfDeletions	int64	`xml:"numberOfDeletions" json:"numberOfDeletions,omitempty" asn1:"optional"`
		NumberOfInsertions	int64	`xml:"numberOfInsertions" json:"numberOfInsertions,omitempty" asn1:"optional"`
		RefAllele		string	`xml:"refAllele" json:"refAllele,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	FxnSet	[]FxnSet	`xml:"fxnSet" json:"fxnSet,omitempty" asn1:"optional"`
}
type PrimarySequence struct {
	Attlist	struct {
		DbSnpBuild	int64	`xml:"dbSnpBuild" json:"dbSnpBuild"`
		Gi		int64	`xml:"gi" json:"gi"`
		Source		string	`xml:"source" json:"source,omitempty" asn1:"optional"`//Source,EnumList:submitter(1),blastmb(2),xm(3),remap(4),hgvs(5)
		Accession	string	`xml:"accession" json:"accession,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	MapLoc	[]MapLoc	`xml:"mapLoc" json:"mapLoc,omitempty"`
}
type Rs struct {
	Attlist	struct {
		RsId		int64	`xml:"rsId" json:"rsId"`
		SnpClass	string	`xml:"snpClass" json:"snpClass"`//SnpClass,EnumList:snp(1),in-del(2),heterozygous(3),microsatellite(4),named-locus(5),no-variation(6),mixed(7),multinucleotide-polymorphism(8)
		SnpType		string	`xml:"snpType" json:"snpType"`//SnpType,EnumList:notwithdrawn(1),artifact(2),gene-duplication(3),duplicate-submission(4),notspecified(5),ambiguous-location(6),low-map-quality(7)
		MolType		string	`xml:"molType" json:"molType"`//MolType,EnumList:genomic(1),cDNA(2),mito(3),chloro(4),unknown(5)
		ValidProbMin	int64	`xml:"validProbMin" json:"validProbMin,omitempty" asn1:"optional"`
		ValidProbMax	int64	`xml:"validProbMax" json:"validProbMax,omitempty" asn1:"optional"`
		Genotype	bool	`xml:"genotype" json:"genotype,omitempty" asn1:"optional"`
		BitField	string	`xml:"bitField" json:"bitField,omitempty" asn1:"optional"`
		TaxId		int64	`xml:"taxId" json:"taxId,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	Het	struct {
		Attlist	struct {
			Type		string	`xml:"type" json:"type"`//Type,EnumList:est(1),obs(2)
			Value		float64	`xml:"value" json:"value"`
			StdError	float64	`xml:"stdError" json:"stdError,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Het	interface{}	`xml:"het" json:"het"`
	}	`xml:"het" json:"het,omitempty" asn1:"optional"`
	Validation	struct {
		Attlist	struct {
			ByCluster	bool	`xml:"byCluster" json:"byCluster,omitempty" asn1:"optional"`
			ByFrequency	bool	`xml:"byFrequency" json:"byFrequency,omitempty" asn1:"optional"`
			ByOtherPop	bool	`xml:"byOtherPop" json:"byOtherPop,omitempty" asn1:"optional"`
			By2Hit2Allele	bool	`xml:"by2Hit2Allele" json:"by2Hit2Allele,omitempty" asn1:"optional"`
			ByHapMap	bool	`xml:"byHapMap" json:"byHapMap,omitempty" asn1:"optional"`
			By1000G		bool	`xml:"by1000G" json:"by1000G,omitempty" asn1:"optional"`
			Suspect		bool	`xml:"suspect" json:"suspect,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		OtherPopBatchId		[]int64		`xml:"otherPopBatchId" json:"otherPopBatchId,omitempty" asn1:"optional"`
		TwoHit2AlleleBatchId	[]int64		`xml:"twoHit2AlleleBatchId" json:"twoHit2AlleleBatchId,omitempty" asn1:"optional"`
		FrequencyClass		[]int64		`xml:"frequencyClass" json:"frequencyClass,omitempty" asn1:"optional"`
		HapMapPhase		[]int64		`xml:"hapMapPhase" json:"hapMapPhase,omitempty" asn1:"optional"`
		TGPPhase		[]int64		`xml:"tGPPhase" json:"tGPPhase,omitempty" asn1:"optional"`
		SuspectEvidence		[]string	`xml:"suspectEvidence" json:"suspectEvidence,omitempty" asn1:"optional"`
	}	`xml:"validation" json:"validation"`
	Create	struct {
		Attlist	struct {
			Build	int64	`xml:"build" json:"build,omitempty" asn1:"optional"`
			Date	string	`xml:"date" json:"date,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Create	interface{}	`xml:"create" json:"create"`
	}	`xml:"create" json:"create"`
	Update	struct {
		Attlist	struct {
			Build	int64	`xml:"build" json:"build,omitempty" asn1:"optional"`
			Date	string	`xml:"date" json:"date,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Update	interface{}	`xml:"update" json:"update"`
	}	`xml:"update" json:"update,omitempty" asn1:"optional"`
	Sequence	struct {
		Attlist	struct {
			ExemplarSs	int64	`xml:"exemplarSs" json:"exemplarSs"`
			AncestralAllele	string	`xml:"ancestralAllele" json:"ancestralAllele,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Seq5		string	`xml:"seq5" json:"seq5,omitempty" asn1:"optional"`
		Observed	string	`xml:"observed" json:"observed"`
		Seq3		string	`xml:"seq3" json:"seq3,omitempty" asn1:"optional"`
	}	`xml:"sequence" json:"sequence"`
	Ss		[]Ss			`xml:"ss" json:"ss,omitempty"`
	Assembly	[]Assembly		`xml:"assembly" json:"assembly,omitempty" asn1:"optional"`
	PrimarySequence	[]PrimarySequence	`xml:"primarySequence" json:"primarySequence,omitempty" asn1:"optional"`
	RsStruct	[]RsStruct		`xml:"rsStruct" json:"rsStruct,omitempty" asn1:"optional"`
	RsLinkout	[]RsLinkout		`xml:"rsLinkout" json:"rsLinkout,omitempty" asn1:"optional"`
	MergeHistory	[]struct {
		Attlist	struct {
			RsId		int64	`xml:"rsId" json:"rsId"`
			BuildId		int64	`xml:"buildId" json:"buildId,omitempty" asn1:"optional"`
			OrientFlip	bool	`xml:"orientFlip" json:"orientFlip,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		MergeHistory	interface{}	`xml:"mergeHistory" json:"mergeHistory"`
	}	`xml:"mergeHistory" json:"mergeHistory,omitempty" asn1:"optional"`
	Hgvs		[]string	`xml:"hgvs" json:"hgvs,omitempty" asn1:"optional"`
	AlleleOrigin	[]struct {
		Attlist	struct {
			Allele string `xml:"allele" json:"allele,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		AlleleOrigin	int64	`xml:"alleleOrigin" json:"alleleOrigin"`
	}	`xml:"alleleOrigin" json:"alleleOrigin,omitempty" asn1:"optional"`
	Phenotype	[]struct {
		ClinicalSignificance []string `xml:"clinicalSignificance" json:"clinicalSignificance,omitempty" asn1:"optional"`
	}	`xml:"phenotype" json:"phenotype,omitempty" asn1:"optional"`
	BioSource	[]struct {
		Genome	[]string	`xml:"genome" json:"genome,omitempty" asn1:"optional"`
		Origin	[]string	`xml:"origin" json:"origin,omitempty" asn1:"optional"`
	}	`xml:"bioSource" json:"bioSource,omitempty" asn1:"optional"`
	Frequency	[]struct {
		Attlist	struct {
			Freq		float64	`xml:"freq" json:"freq,omitempty" asn1:"optional"`
			Allele		string	`xml:"allele" json:"allele,omitempty" asn1:"optional"`
			PopId		int64	`xml:"popId" json:"popId,omitempty" asn1:"optional"`
			SampleSize	int64	`xml:"sampleSize" json:"sampleSize,omitempty" asn1:"optional"`
		}	`xml:"attlist" json:"attlist"`
		Frequency	interface{}	`xml:"frequency" json:"frequency"`
	}	`xml:"frequency" json:"frequency,omitempty" asn1:"optional"`
}
type RsLinkout struct {
	Attlist	struct {
		ResourceId	string	`xml:"resourceId" json:"resourceId"`
		LinkValue	string	`xml:"linkValue" json:"linkValue"`
	}	`xml:"attlist" json:"attlist"`
	RsLinkout	interface{}	`xml:"rsLinkout" json:"rsLinkout"`
}
type RsStruct struct {
	Attlist	struct {
		ProtAcc		string	`xml:"protAcc" json:"protAcc,omitempty" asn1:"optional"`
		ProtGi		int64	`xml:"protGi" json:"protGi,omitempty" asn1:"optional"`
		ProtLoc		int64	`xml:"protLoc" json:"protLoc,omitempty" asn1:"optional"`
		ProtResidue	string	`xml:"protResidue" json:"protResidue,omitempty" asn1:"optional"`
		RsResidue	string	`xml:"rsResidue" json:"rsResidue,omitempty" asn1:"optional"`
		StructGi	int64	`xml:"structGi" json:"structGi,omitempty" asn1:"optional"`
		StructLoc	int64	`xml:"structLoc" json:"structLoc,omitempty" asn1:"optional"`
		StructResidue	string	`xml:"structResidue" json:"structResidue,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	RsStruct	interface{}	`xml:"rsStruct" json:"rsStruct"`
}
type Ss struct {
	Attlist	struct {
		SsId			int64	`xml:"ssId" json:"ssId"`
		Handle			string	`xml:"handle" json:"handle"`
		BatchId			int64	`xml:"batchId" json:"batchId"`
		LocSnpId		string	`xml:"locSnpId" json:"locSnpId,omitempty" asn1:"optional"`
		SubSnpClass		string	`xml:"subSnpClass" json:"subSnpClass,omitempty" asn1:"optional"`//SubSnpClass,EnumList:snp(1),in-del(2),heterozygous(3),microsatellite(4),named-locus(5),no-variation(6),mixed(7),multinucleotide-polymorphism(8)
		Orient			string	`xml:"orient" json:"orient,omitempty" asn1:"optional"`//Orient,EnumList:forward(1),reverse(2)
		Strand			string	`xml:"strand" json:"strand,omitempty" asn1:"optional"`//Strand,EnumList:top(1),bottom(2)
		MolType			string	`xml:"molType" json:"molType,omitempty" asn1:"optional"`//MolType,EnumList:genomic(1),cDNA(2),mito(3),chloro(4),unknown(5)
		BuildId			int64	`xml:"buildId" json:"buildId,omitempty" asn1:"optional"`
		MethodClass		string	`xml:"methodClass" json:"methodClass,omitempty" asn1:"optional"`//MethodClass,EnumList:dHPLC(1),hybridize(2),computed(3),sSCP(4),other(5),unknown(6),rFLP(7),sequence(8)
		Validated		string	`xml:"validated" json:"validated,omitempty" asn1:"optional"`//Validated,EnumList:by-submitter(1),by-frequency(2),by-cluster(3)
		LinkoutUrl		string	`xml:"linkoutUrl" json:"linkoutUrl,omitempty" asn1:"optional"`
		SsAlias			string	`xml:"ssAlias" json:"ssAlias,omitempty" asn1:"optional"`
		AlleleOrigin		int64	`xml:"alleleOrigin" json:"alleleOrigin,omitempty" asn1:"optional"`
		ClinicalSignificance	string	`xml:"clinicalSignificance" json:"clinicalSignificance,omitempty" asn1:"optional"`
	}	`xml:"attlist" json:"attlist"`
	Sequence	struct {
		Seq5		string	`xml:"seq5" json:"seq5,omitempty" asn1:"optional"`
		Observed	string	`xml:"observed" json:"observed"`
		Seq3		string	`xml:"seq3" json:"seq3,omitempty" asn1:"optional"`
	}	`xml:"sequence" json:"sequence"`
}
package NCBIEntrez2

type Entrez2Dt int64
type Entrez2DbId string
type Entrez2FieldId string
type Entrez2LinkId string
type Entrez2IdList struct {
	Db	*Entrez2DbId	`xml:"db" json:"db,omitempty"`
	Num	int64		`xml:"num" json:"num"`
	Uids	[]byte		`xml:"uids" json:"uids,omitempty" asn1:"optional"`
}
type Entrez2BooleanExp struct {
	Db	*Entrez2DbId		`xml:"db" json:"db,omitempty"`
	Exp	[]Entrez2BooleanElement	`xml:"exp" json:"exp,omitempty"`
	Limits	*Entrez2Limits		`xml:"limits" json:"limits,omitempty" asn1:"optional"`
}
type Entrez2BooleanElement struct {
	Str	string			`xml:"str" json:"str"`
	Op	*Entrez2Operator	`xml:"op" json:"op,omitempty"`
	Term	*Entrez2BooleanTerm	`xml:"term" json:"term,omitempty"`
	Ids	*Entrez2IdList		`xml:"ids" json:"ids,omitempty"`
	Key	string			`xml:"key" json:"key"`
}
//Entrez2BooleanElement,ChoiceOption
type Entrez2BooleanTerm struct {
	Field		*Entrez2FieldId	`xml:"field" json:"field,omitempty"`
	Term		string		`xml:"term" json:"term"`
	TermCount	int64		`xml:"term-count" json:"term_count,omitempty" asn1:"optional"`
	DoNotExplode	bool		`xml:"do-not-explode" json:"do_not_explode"`
	DoNotTranslate	bool		`xml:"do-not-translate" json:"do_not_translate"`
}
type Entrez2Operator int
//Entrez2Operator,IntegerEnum:and(1),or(2),butnot(3),range(4),left-paren(5),right-paren(6)
type Entrez2Request struct {
	Request		*E2Request	`xml:"request" json:"request,omitempty"`
	Version		int64		`xml:"version" json:"version"`
	Tool		string		`xml:"tool" json:"tool,omitempty" asn1:"optional"`
	Cookie		string		`xml:"cookie" json:"cookie,omitempty" asn1:"optional"`
	UseHistory	bool		`xml:"use-history" json:"use_history"`
}
type E2Request struct {
	GetInfo			interface{}		`xml:"get-info" json:"get_info"`
	EvalBoolean		*Entrez2EvalBoolean	`xml:"eval-boolean" json:"eval_boolean,omitempty"`
	GetDocsum		*Entrez2IdList		`xml:"get-docsum" json:"get_docsum,omitempty"`
	GetTermPos		*Entrez2TermQuery	`xml:"get-term-pos" json:"get_term_pos,omitempty"`
	GetTermList		*Entrez2TermPos		`xml:"get-term-list" json:"get_term_list,omitempty"`
	GetTermHierarchy	*Entrez2HierQuery	`xml:"get-term-hierarchy" json:"get_term_hierarchy,omitempty"`
	GetLinks		*Entrez2GetLinks	`xml:"get-links" json:"get_links,omitempty"`
	GetLinked		*Entrez2GetLinks	`xml:"get-linked" json:"get_linked,omitempty"`
	GetLinkCounts		*Entrez2Id		`xml:"get-link-counts" json:"get_link_counts,omitempty"`
}
//E2Request,ChoiceOption
type Entrez2EvalBoolean struct {
	ReturnUIDs	bool			`xml:"return-UIDs" json:"return_UIDs"`
	ReturnParse	bool			`xml:"return-parse" json:"return_parse"`
	Query		*Entrez2BooleanExp	`xml:"query" json:"query,omitempty"`
}
type Entrez2DtFilter struct {
	BeginDate	*Entrez2Dt	`xml:"begin-date" json:"begin_date,omitempty"`
	EndDate		*Entrez2Dt	`xml:"end-date" json:"end_date,omitempty"`
	TypeDate	*Entrez2FieldId	`xml:"type-date" json:"type_date,omitempty"`
}
type Entrez2Limits struct {
	FilterDate	*Entrez2DtFilter	`xml:"filter-date" json:"filter_date,omitempty" asn1:"optional"`
	MaxUIDs		int64			`xml:"max-UIDs" json:"max_UIDs,omitempty" asn1:"optional"`
	OffsetUIDs	int64			`xml:"offset-UIDs" json:"offset_UIDs,omitempty" asn1:"optional"`
}
type Entrez2Id struct {
	Db	*Entrez2DbId	`xml:"db" json:"db,omitempty"`
	Uid	int64		`xml:"uid" json:"uid"`
}
type Entrez2TermQuery struct {
	Db	*Entrez2DbId	`xml:"db" json:"db,omitempty"`
	Field	*Entrez2FieldId	`xml:"field" json:"field,omitempty"`
	Term	string		`xml:"term" json:"term"`
}
type Entrez2HierQuery struct {
	Db	*Entrez2DbId	`xml:"db" json:"db,omitempty"`
	Field	*Entrez2FieldId	`xml:"field" json:"field,omitempty"`
	Term	string		`xml:"term" json:"term,omitempty" asn1:"optional"`
	Txid	int64		`xml:"txid" json:"txid,omitempty" asn1:"optional"`
}
type Entrez2TermPos struct {
	Db		*Entrez2DbId	`xml:"db" json:"db,omitempty"`
	Field		*Entrez2FieldId	`xml:"field" json:"field,omitempty"`
	FirstTermPos	int64		`xml:"first-term-pos" json:"first_term_pos"`
	NumberOfTerms	int64		`xml:"number-of-terms" json:"number_of_terms,omitempty" asn1:"optional"`
}
type Entrez2GetLinks struct {
	Uids		*Entrez2IdList	`xml:"uids" json:"uids,omitempty"`
	Linktype	*Entrez2LinkId	`xml:"linktype" json:"linktype,omitempty"`
	MaxUIDS		int64		`xml:"max-UIDS" json:"max_UIDS,omitempty" asn1:"optional"`
	CountOnly	bool		`xml:"count-only" json:"count_only,omitempty" asn1:"optional"`
	ParentsPersist	bool		`xml:"parents-persist" json:"parents_persist,omitempty" asn1:"optional"`
}
type Entrez2Reply struct {
	Reply	*E2Reply	`xml:"reply" json:"reply,omitempty"`
	Dt	*Entrez2Dt	`xml:"dt" json:"dt,omitempty"`
	Server	string		`xml:"server" json:"server"`
	Msg	string		`xml:"msg" json:"msg,omitempty" asn1:"optional"`
	Key	string		`xml:"key" json:"key,omitempty" asn1:"optional"`
	Cookie	string		`xml:"cookie" json:"cookie,omitempty" asn1:"optional"`
}
type E2Reply struct {
	Error			string			`xml:"error" json:"error"`
	GetInfo			*Entrez2Info		`xml:"get-info" json:"get_info,omitempty"`
	EvalBoolean		*Entrez2BooleanReply	`xml:"eval-boolean" json:"eval_boolean,omitempty"`
	GetDocsum		*Entrez2DocsumList	`xml:"get-docsum" json:"get_docsum,omitempty"`
	GetTermPos		int64			`xml:"get-term-pos" json:"get_term_pos"`
	GetTermList		*Entrez2TermList	`xml:"get-term-list" json:"get_term_list,omitempty"`
	GetTermHierarchy	*Entrez2HierNode	`xml:"get-term-hierarchy" json:"get_term_hierarchy,omitempty"`
	GetLinks		*Entrez2LinkSet		`xml:"get-links" json:"get_links,omitempty"`
	GetLinked		*Entrez2IdList		`xml:"get-linked" json:"get_linked,omitempty"`
	GetLinkCounts		*Entrez2LinkCountList	`xml:"get-link-counts" json:"get_link_counts,omitempty"`
}
//E2Reply,ChoiceOption
type Entrez2Info struct {
	DbCount		int64		`xml:"db-count" json:"db_count"`
	BuildDate	*Entrez2Dt	`xml:"build-date" json:"build_date,omitempty"`
	DbInfo		[]Entrez2DbInfo	`xml:"db-info" json:"db_info,omitempty"`
}
type Entrez2DbInfo struct {
	DbName			*Entrez2DbId			`xml:"db-name" json:"db_name,omitempty"`
	DbMenu			string				`xml:"db-menu" json:"db_menu"`
	DbDescr			string				`xml:"db-descr" json:"db_descr"`
	DocCount		int64				`xml:"doc-count" json:"doc_count"`
	FieldCount		int64				`xml:"field-count" json:"field_count"`
	Fields			[]Entrez2FieldInfo		`xml:"fields" json:"fields,omitempty"`
	LinkCount		int64				`xml:"link-count" json:"link_count"`
	Links			[]Entrez2LinkInfo		`xml:"links" json:"links,omitempty"`
	DocsumFieldCount	int64				`xml:"docsum-field-count" json:"docsum_field_count"`
	DocsumFields		[]Entrez2DocsumFieldInfo	`xml:"docsum-fields" json:"docsum_fields,omitempty"`
}
type Entrez2FieldInfo struct {
	FieldName	*Entrez2FieldId	`xml:"field-name" json:"field_name,omitempty"`
	FieldMenu	string		`xml:"field-menu" json:"field_menu"`
	FieldDescr	string		`xml:"field-descr" json:"field_descr"`
	TermCount	int64		`xml:"term-count" json:"term_count"`
	IsDate		bool		`xml:"is-date" json:"is_date,omitempty" asn1:"optional"`
	IsNumerical	bool		`xml:"is-numerical" json:"is_numerical,omitempty" asn1:"optional"`
	SingleToken	bool		`xml:"single-token" json:"single_token,omitempty" asn1:"optional"`
	HierarchyAvail	bool		`xml:"hierarchy-avail" json:"hierarchy_avail,omitempty" asn1:"optional"`
	IsRangable	bool		`xml:"is-rangable" json:"is_rangable,omitempty" asn1:"optional"`
	IsTruncatable	bool		`xml:"is-truncatable" json:"is_truncatable,omitempty" asn1:"optional"`
}
type Entrez2LinkInfo struct {
	LinkName	*Entrez2LinkId	`xml:"link-name" json:"link_name,omitempty"`
	LinkMenu	string		`xml:"link-menu" json:"link_menu"`
	LinkDescr	string		`xml:"link-descr" json:"link_descr"`
	DbTo		*Entrez2DbId	`xml:"db-to" json:"db_to,omitempty"`
	DataSize	int64		`xml:"data-size" json:"data_size,omitempty" asn1:"optional"`
}
type Entrez2DocsumFieldType int
//Entrez2DocsumFieldType,IntegerEnum:string(1),int(2),float(3),date-pubmed(4)
type Entrez2DocsumFieldInfo struct {
	FieldName		string			`xml:"field-name" json:"field_name"`
	FieldDescription	string			`xml:"field-description" json:"field_description"`
	FieldType		*Entrez2DocsumFieldType	`xml:"field-type" json:"field_type,omitempty"`
}
type Entrez2BooleanReply struct {
	Count	int64			`xml:"count" json:"count"`
	Uids	*Entrez2IdList		`xml:"uids" json:"uids,omitempty" asn1:"optional"`
	Query	*Entrez2BooleanExp	`xml:"query" json:"query,omitempty" asn1:"optional"`
}
type Entrez2DocsumList struct {
	Count	int64		`xml:"count" json:"count"`
	List	[]Entrez2Docsum	`xml:"list" json:"list,omitempty"`
}
type Entrez2Docsum struct {
	Uid		int64			`xml:"uid" json:"uid"`
	DocsumData	[]Entrez2DocsumData	`xml:"docsum-data" json:"docsum_data,omitempty"`
}
type Entrez2DocsumData struct {
	FieldName	string	`xml:"field-name" json:"field_name"`
	FieldValue	string	`xml:"field-value" json:"field_value"`
}
type Entrez2TermList struct {
	Pos	int64		`xml:"pos" json:"pos"`
	Num	int64		`xml:"num" json:"num"`
	List	[]Entrez2Term	`xml:"list" json:"list,omitempty"`
}
type Entrez2Term struct {
	Term		string	`xml:"term" json:"term"`
	Txid		int64	`xml:"txid" json:"txid,omitempty" asn1:"optional"`
	Count		int64	`xml:"count" json:"count"`
	IsLeafNode	bool	`xml:"is-leaf-node" json:"is_leaf_node,omitempty" asn1:"optional"`
}
type Entrez2HierNode struct {
	CannonicalForm	string		`xml:"cannonical-form" json:"cannonical_form"`
	LineageCount	int64		`xml:"lineage-count" json:"lineage_count"`
	Lineage		[]Entrez2Term	`xml:"lineage" json:"lineage,omitempty" asn1:"optional"`
	ChildCount	int64		`xml:"child-count" json:"child_count"`
	Children	[]Entrez2Term	`xml:"children" json:"children,omitempty"`
	IsAmbiguous	bool		`xml:"is-ambiguous" json:"is_ambiguous,omitempty" asn1:"optional"`
}
type Entrez2LinkSet struct {
	Ids		*Entrez2IdList	`xml:"ids" json:"ids,omitempty"`
	DataSize	int64		`xml:"data-size" json:"data_size,omitempty" asn1:"optional"`
	Data		[]byte		`xml:"data" json:"data,omitempty" asn1:"optional"`
}
type Entrez2LinkCountList struct {
	LinkTypeCount	int64			`xml:"link-type-count" json:"link_type_count"`
	Links		[]Entrez2LinkCount	`xml:"links" json:"links,omitempty"`
}
type Entrez2LinkCount struct {
	LinkType	*Entrez2LinkId	`xml:"link-type" json:"link_type,omitempty"`
	LinkCount	int64		`xml:"link-count" json:"link_count"`
}
package NCBIEntrezgene

import "NCBIGene"
import "NCBIProtein"
import "NCBIBioSource"
import "NCBIRNA"
import "NCBIGeneral"
import "NCBISeqloc"
import "NCBIPub"

type Entrezgene struct {
	TrackInfo	*GeneTrack			`xml:"track-info" json:"track_info,omitempty" asn1:"optional"`
	Type		int				`xml:"type" json:"type"`//Type,IntegerEnum:unknown(0),tRNA(1),rRNA(2),snRNA(3),scRNA(4),snoRNA(5),protein-coding(6),pseudo(7),transposon(8),miscRNA(9),ncRNA(10),biological-region(11),other(255)
	Source		*NCBIBioSource.BioSource	`xml:"source" json:"source,omitempty"`
	Gene		*NCBIGene.GeneRef		`xml:"gene" json:"gene,omitempty"`
	Prot		*NCBIProtein.ProtRef		`xml:"prot" json:"prot,omitempty" asn1:"optional"`
	Rna		*NCBIRNA.RNARef			`xml:"rna" json:"rna,omitempty" asn1:"optional"`
	Summary		string				`xml:"summary" json:"summary,omitempty" asn1:"optional"`
	Location	[]Maps				`xml:"location" json:"location,omitempty" asn1:"optional"`
	GeneSource	*GeneSource			`xml:"gene-source" json:"gene_source,omitempty" asn1:"optional"`
	Locus		[]GeneCommentary		`xml:"locus" json:"locus,omitempty" asn1:"optional"`
	Properties	[]GeneCommentary		`xml:"properties" json:"properties,omitempty" asn1:"optional"`
	Refgene		[]GeneCommentary		`xml:"refgene" json:"refgene,omitempty" asn1:"optional"`
	Homology	[]GeneCommentary		`xml:"homology" json:"homology,omitempty" asn1:"optional"`
	Comments	[]GeneCommentary		`xml:"comments" json:"comments,omitempty" asn1:"optional"`
	UniqueKeys	[]NCBIGeneral.Dbtag		`xml:"unique-keys" json:"unique_keys,omitempty" asn1:"optional"`
	XtraIndexTerms	[]string			`xml:"xtra-index-terms" json:"xtra_index_terms,omitempty" asn1:"optional"`
	XtraProperties	[]XtraTerms			`xml:"xtra-properties" json:"xtra_properties,omitempty" asn1:"optional"`
	XtraIq		[]XtraTerms			`xml:"xtra-iq" json:"xtra_iq,omitempty" asn1:"optional"`
	NonUniqueKeys	[]NCBIGeneral.Dbtag		`xml:"non-unique-keys" json:"non_unique_keys,omitempty" asn1:"optional"`
}
type EntrezgeneSet []Entrezgene
type GeneTrack struct {
	Geneid		int64			`xml:"geneid" json:"geneid"`
	Status		int			`xml:"status" json:"status"`//Status,IntegerEnum:live(0),secondary(1),discontinued(2)
	CurrentId	[]NCBIGeneral.Dbtag	`xml:"current-id" json:"current_id,omitempty" asn1:"optional"`
	CreateDate	*NCBIGeneral.Date	`xml:"create-date" json:"create_date,omitempty"`
	UpdateDate	*NCBIGeneral.Date	`xml:"update-date" json:"update_date,omitempty"`
	DiscontinueDate	*NCBIGeneral.Date	`xml:"discontinue-date" json:"discontinue_date,omitempty" asn1:"optional"`
}
type GeneSource struct {
	Src		string	`xml:"src" json:"src"`
	SrcInt		int64	`xml:"src-int" json:"src_int,omitempty" asn1:"optional"`
	SrcStr1		string	`xml:"src-str1" json:"src_str1,omitempty" asn1:"optional"`
	SrcStr2		string	`xml:"src-str2" json:"src_str2,omitempty" asn1:"optional"`
	GeneDisplay	bool	`xml:"gene-display" json:"gene_display"`
	LocusDisplay	bool	`xml:"locus-display" json:"locus_display"`
	ExtraTerms	bool	`xml:"extra-terms" json:"extra_terms"`
}
type GeneCommentary struct {
	Type		int			`xml:"type" json:"type"`//Type,IntegerEnum:genomic(1),pre-RNA(2),mRNA(3),rRNA(4),tRNA(5),snRNA(6),scRNA(7),peptide(8),other-genetic(9),genomic-mRNA(10),cRNA(11),mature-peptide(12),pre-protein(13),miscRNA(14),snoRNA(15),property(16),reference(17),generif(18),phenotype(19),complex(20),compound(21),ncRNA(22),gene-group(23),assembly(24),assembly-unit(25),c-region(26),d-segment(27),j-segment(28),v-segment(29),comment(254),other(255)
	Heading		string			`xml:"heading" json:"heading,omitempty" asn1:"optional"`
	Label		string			`xml:"label" json:"label,omitempty" asn1:"optional"`
	Text		string			`xml:"text" json:"text,omitempty" asn1:"optional"`
	Accession	string			`xml:"accession" json:"accession,omitempty" asn1:"optional"`
	Version		int64			`xml:"version" json:"version,omitempty" asn1:"optional"`
	XtraProperties	[]XtraTerms		`xml:"xtra-properties" json:"xtra_properties,omitempty" asn1:"optional"`
	Refs		[]NCBIPub.Pub		`xml:"refs" json:"refs,omitempty" asn1:"optional"`
	Source		[]OtherSource		`xml:"source" json:"source,omitempty" asn1:"optional"`
	GenomicCoords	[]NCBISeqloc.SeqLoc	`xml:"genomic-coords" json:"genomic_coords,omitempty" asn1:"optional"`
	Seqs		[]NCBISeqloc.SeqLoc	`xml:"seqs" json:"seqs,omitempty" asn1:"optional"`
	Products	[]GeneCommentary	`xml:"products" json:"products,omitempty" asn1:"optional"`
	Properties	[]GeneCommentary	`xml:"properties" json:"properties,omitempty" asn1:"optional"`
	Comment		[]GeneCommentary	`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	CreateDate	*NCBIGeneral.Date	`xml:"create-date" json:"create_date,omitempty" asn1:"optional"`
	UpdateDate	*NCBIGeneral.Date	`xml:"update-date" json:"update_date,omitempty" asn1:"optional"`
	Rna		*NCBIRNA.RNARef		`xml:"rna" json:"rna,omitempty" asn1:"optional"`
}
type OtherSource struct {
	Src		*NCBIGeneral.Dbtag	`xml:"src" json:"src,omitempty" asn1:"optional"`
	PreText		string			`xml:"pre-text" json:"pre_text,omitempty" asn1:"optional"`
	Anchor		string			`xml:"anchor" json:"anchor,omitempty" asn1:"optional"`
	Url		string			`xml:"url" json:"url,omitempty" asn1:"optional"`
	PostText	string			`xml:"post-text" json:"post_text,omitempty" asn1:"optional"`
}
type Maps struct {
	DisplayStr	string	`xml:"display-str" json:"display_str"`
	Method		struct {
		Proxy	string	`xml:"proxy" json:"proxy"`
		MapType	string	`xml:"map-type" json:"map_type"`//MapType,EnumList:cyto(0),bp(1),cM(2),cR(3),min(4)
	}	`xml:"method" json:"method"`//Method,ChoiceOption
}
type XtraTerms struct {
	Tag	string	`xml:"tag" json:"tag"`
	Value	string	`xml:"value" json:"value"`
}
package NCBIFeatDef

type FeatDef struct {
	Typelabel	string		`xml:"typelabel" json:"typelabel"`
	Menulabel	string		`xml:"menulabel" json:"menulabel"`
	FeatdefKey	int64		`xml:"featdef-key" json:"featdef_key"`
	SeqfeatKey	int64		`xml:"seqfeat-key" json:"seqfeat_key"`
	Entrygroup	int64		`xml:"entrygroup" json:"entrygroup"`
	Displaygroup	int64		`xml:"displaygroup" json:"displaygroup"`
	Molgroup	*FeatMolType	`xml:"molgroup" json:"molgroup,omitempty"`
}
type FeatMolType string
//FeatMolType,EnumList:aa(1),na(2),both(3)
type FeatDefSet []FeatDef
type FeatDispGroup struct {
	Groupkey	int64	`xml:"groupkey" json:"groupkey"`
	Groupname	string	`xml:"groupname" json:"groupname"`
}
type FeatDispGroupSet []FeatDispGroup
type FeatDefGroupSet struct {
	Groups	*FeatDispGroupSet	`xml:"groups" json:"groups,omitempty"`
	Defs	*FeatDefSet		`xml:"defs" json:"defs,omitempty"`
}
package NCBIGBSeq

type GBSet []GBSeq
type GBSeq struct {
	Locus			string			`xml:"locus" json:"locus,omitempty" asn1:"optional"`
	Length			int64			`xml:"length" json:"length"`
	Strandedness		string			`xml:"strandedness" json:"strandedness,omitempty" asn1:"optional"`
	Moltype			string			`xml:"moltype" json:"moltype"`
	Topology		string			`xml:"topology" json:"topology,omitempty" asn1:"optional"`
	Division		string			`xml:"division" json:"division,omitempty" asn1:"optional"`
	UpdateDate		string			`xml:"update-date" json:"update_date,omitempty" asn1:"optional"`
	CreateDate		string			`xml:"create-date" json:"create_date,omitempty" asn1:"optional"`
	UpdateRelease		string			`xml:"update-release" json:"update_release,omitempty" asn1:"optional"`
	CreateRelease		string			`xml:"create-release" json:"create_release,omitempty" asn1:"optional"`
	Definition		string			`xml:"definition" json:"definition,omitempty" asn1:"optional"`
	PrimaryAccession	string			`xml:"primary-accession" json:"primary_accession,omitempty" asn1:"optional"`
	EntryVersion		string			`xml:"entry-version" json:"entry_version,omitempty" asn1:"optional"`
	AccessionVersion	string			`xml:"accession-version" json:"accession_version,omitempty" asn1:"optional"`
	OtherSeqids		[]GBSeqid		`xml:"other-seqids" json:"other_seqids,omitempty" asn1:"optional"`
	SecondaryAccessions	[]GBSecondaryAccn	`xml:"secondary-accessions" json:"secondary_accessions,omitempty" asn1:"optional"`
	Project			string			`xml:"project" json:"project,omitempty" asn1:"optional"`
	Keywords		[]GBKeyword		`xml:"keywords" json:"keywords,omitempty" asn1:"optional"`
	Segment			string			`xml:"segment" json:"segment,omitempty" asn1:"optional"`
	Source			string			`xml:"source" json:"source,omitempty" asn1:"optional"`
	Organism		string			`xml:"organism" json:"organism,omitempty" asn1:"optional"`
	Taxonomy		string			`xml:"taxonomy" json:"taxonomy,omitempty" asn1:"optional"`
	References		[]GBReference		`xml:"references" json:"references,omitempty" asn1:"optional"`
	Comment			string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	CommentSet		[]GBComment		`xml:"comment-set" json:"comment_set,omitempty" asn1:"optional"`
	StrucComments		[]GBStrucComment	`xml:"struc-comments" json:"struc_comments,omitempty" asn1:"optional"`
	Primary			string			`xml:"primary" json:"primary,omitempty" asn1:"optional"`
	SourceDb		string			`xml:"source-db" json:"source_db,omitempty" asn1:"optional"`
	DatabaseReference	string			`xml:"database-reference" json:"database_reference,omitempty" asn1:"optional"`
	FeatureTable		[]GBFeature		`xml:"feature-table" json:"feature_table,omitempty" asn1:"optional"`
	FeatureSet		[]GBFeatureSet		`xml:"feature-set" json:"feature_set,omitempty" asn1:"optional"`
	Sequence		string			`xml:"sequence" json:"sequence,omitempty" asn1:"optional"`
	Contig			string			`xml:"contig" json:"contig,omitempty" asn1:"optional"`
	AltSeq			[]GBAltSeqData		`xml:"alt-seq" json:"alt_seq,omitempty" asn1:"optional"`
	Xrefs			[]GBXref		`xml:"xrefs" json:"xrefs,omitempty" asn1:"optional"`
}
type GBSeqid string
type GBSecondaryAccn string
type GBKeyword string
type GBReference struct {
	Reference	string		`xml:"reference" json:"reference"`
	Position	string		`xml:"position" json:"position,omitempty" asn1:"optional"`
	Authors		[]GBAuthor	`xml:"authors" json:"authors,omitempty" asn1:"optional"`
	Consortium	string		`xml:"consortium" json:"consortium,omitempty" asn1:"optional"`
	Title		string		`xml:"title" json:"title,omitempty" asn1:"optional"`
	Journal		string		`xml:"journal" json:"journal"`
	Xref		[]GBXref	`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Pubmed		int64		`xml:"pubmed" json:"pubmed,omitempty" asn1:"optional"`
	Remark		string		`xml:"remark" json:"remark,omitempty" asn1:"optional"`
}
type GBAuthor string
type GBXref struct {
	Dbname	string	`xml:"dbname" json:"dbname"`
	Id	string	`xml:"id" json:"id"`
}
type GBComment struct {
	Type		string			`xml:"type" json:"type,omitempty" asn1:"optional"`
	Paragraphs	[]GBCommentParagraph	`xml:"paragraphs" json:"paragraphs,omitempty"`
}
type GBCommentParagraph string
type GBStrucComment struct {
	Name	string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Items	[]GBStrucCommentItem	`xml:"items" json:"items,omitempty"`
}
type GBStrucCommentItem struct {
	Tag	string	`xml:"tag" json:"tag,omitempty" asn1:"optional"`
	Value	string	`xml:"value" json:"value,omitempty" asn1:"optional"`
	Url	string	`xml:"url" json:"url,omitempty" asn1:"optional"`
}
type GBFeatureSet struct {
	AnnotSource	string		`xml:"annot-source" json:"annot_source,omitempty" asn1:"optional"`
	Features	[]GBFeature	`xml:"features" json:"features,omitempty"`
}
type GBFeature struct {
	Key		string		`xml:"key" json:"key"`
	Location	string		`xml:"location" json:"location"`
	Intervals	[]GBInterval	`xml:"intervals" json:"intervals,omitempty" asn1:"optional"`
	Operator	string		`xml:"operator" json:"operator,omitempty" asn1:"optional"`
	Partial5	bool		`xml:"partial5" json:"partial5,omitempty" asn1:"optional"`
	Partial3	bool		`xml:"partial3" json:"partial3,omitempty" asn1:"optional"`
	Quals		[]GBQualifier	`xml:"quals" json:"quals,omitempty" asn1:"optional"`
	Xrefs		[]GBXref	`xml:"xrefs" json:"xrefs,omitempty" asn1:"optional"`
}
type GBInterval struct {
	From		int64	`xml:"from" json:"from,omitempty" asn1:"optional"`
	To		int64	`xml:"to" json:"to,omitempty" asn1:"optional"`
	Point		int64	`xml:"point" json:"point,omitempty" asn1:"optional"`
	Iscomp		bool	`xml:"iscomp" json:"iscomp,omitempty" asn1:"optional"`
	Interbp		bool	`xml:"interbp" json:"interbp,omitempty" asn1:"optional"`
	Accession	string	`xml:"accession" json:"accession"`
}
type GBQualifier struct {
	Name	string	`xml:"name" json:"name"`
	Value	string	`xml:"value" json:"value,omitempty" asn1:"optional"`
}
type GBAltSeqData struct {
	Name	string		`xml:"name" json:"name"`
	Items	[]GBAltSeqItem	`xml:"items" json:"items,omitempty" asn1:"optional"`
}
type GBAltSeqItem struct {
	Interval	*GBInterval	`xml:"interval" json:"interval,omitempty" asn1:"optional"`
	Isgap		bool		`xml:"isgap" json:"isgap,omitempty" asn1:"optional"`
	GapLength	int64		`xml:"gap-length" json:"gap_length,omitempty" asn1:"optional"`
	GapType		string		`xml:"gap-type" json:"gap_type,omitempty" asn1:"optional"`
	GapLinkage	string		`xml:"gap-linkage" json:"gap_linkage,omitempty" asn1:"optional"`
	GapComment	string		`xml:"gap-comment" json:"gap_comment,omitempty" asn1:"optional"`
	FirstAccn	string		`xml:"first-accn" json:"first_accn,omitempty" asn1:"optional"`
	LastAccn	string		`xml:"last-accn" json:"last_accn,omitempty" asn1:"optional"`
	Value		string		`xml:"value" json:"value,omitempty" asn1:"optional"`
}
package NCBIGeneral

type Date struct {
	Str	string		`xml:"str" json:"str"`
	Std	*DateStd	`xml:"std" json:"std,omitempty"`
}
//Date,ChoiceOption
type DateStd struct {
	Year	int64	`xml:"year" json:"year"`
	Month	int64	`xml:"month" json:"month,omitempty" asn1:"optional"`
	Day	int64	`xml:"day" json:"day,omitempty" asn1:"optional"`
	Season	string	`xml:"season" json:"season,omitempty" asn1:"optional"`
	Hour	int64	`xml:"hour" json:"hour,omitempty" asn1:"optional"`
	Minute	int64	`xml:"minute" json:"minute,omitempty" asn1:"optional"`
	Second	int64	`xml:"second" json:"second,omitempty" asn1:"optional"`
}
type Dbtag struct {
	Db	string		`xml:"db" json:"db"`
	Tag	*ObjectId	`xml:"tag" json:"tag,omitempty"`
}
type ObjectId struct {
	Id	int64	`xml:"id" json:"id"`
	Str	string	`xml:"str" json:"str"`
}
//ObjectId,ChoiceOption
type PersonId struct {
	Dbtag		*Dbtag		`xml:"dbtag" json:"dbtag,omitempty"`
	Name		*NameStd	`xml:"name" json:"name,omitempty"`
	Ml		string		`xml:"ml" json:"ml"`
	Str		string		`xml:"str" json:"str"`
	Consortium	string		`xml:"consortium" json:"consortium"`
}
//PersonId,ChoiceOption
type NameStd struct {
	Last		string	`xml:"last" json:"last"`
	First		string	`xml:"first" json:"first,omitempty" asn1:"optional"`
	Middle		string	`xml:"middle" json:"middle,omitempty" asn1:"optional"`
	Full		string	`xml:"full" json:"full,omitempty" asn1:"optional"`
	Initials	string	`xml:"initials" json:"initials,omitempty" asn1:"optional"`
	Suffix		string	`xml:"suffix" json:"suffix,omitempty" asn1:"optional"`
	Title		string	`xml:"title" json:"title,omitempty" asn1:"optional"`
}
type IntFuzz struct {
	PM	int64	`xml:"p-m" json:"p_m"`
	Range	struct {
		Max	int64	`xml:"max" json:"max"`
		Min	int64	`xml:"min" json:"min"`
	}	`xml:"range" json:"range"`
	Pct	int64	`xml:"pct" json:"pct"`
	Lim	string	`xml:"lim" json:"lim"`//Lim,EnumList:unk(0),gt(1),lt(2),tr(3),tl(4),circle(5),other(255)
	Alt	[]int64	`xml:"alt" json:"alt,omitempty"`
}
//IntFuzz,ChoiceOption
type UserObject struct {
	Class	string		`xml:"class" json:"class,omitempty" asn1:"optional"`
	Type	*ObjectId	`xml:"type" json:"type,omitempty"`
	Data	[]UserField	`xml:"data" json:"data,omitempty"`
}
type UserField struct {
	Label	*ObjectId	`xml:"label" json:"label,omitempty"`
	Num	int64		`xml:"num" json:"num,omitempty" asn1:"optional"`
	Data	struct {
		Str	string		`xml:"str" json:"str"`
		Int	int64		`xml:"int" json:"int"`
		Real	float64		`xml:"real" json:"real"`
		Bool	bool		`xml:"bool" json:"bool"`
		Os	[]byte		`xml:"os" json:"os,omitempty"`
		Object	*UserObject	`xml:"object" json:"object,omitempty"`
		Strs	[]string	`xml:"strs" json:"strs,omitempty"`
		Ints	[]int64		`xml:"ints" json:"ints,omitempty"`
		Reals	[]float64	`xml:"reals" json:"reals,omitempty"`
		Oss	[][]byte	`xml:"oss" json:"oss,omitempty"`
		Fields	[]UserField	`xml:"fields" json:"fields,omitempty"`
		Objects	[]UserObject	`xml:"objects" json:"objects,omitempty"`
	}	`xml:"data" json:"data"`//Data,ChoiceOption
}
package HomoloGene

import "NCBIGeneral"
import "NCBISeqloc"
import "NCBISeqalign"

type HGEntrySet struct {
	Entries []HGEntry `xml:"entries" json:"entries,omitempty"`
}
type HGEntry struct {
	HgId		int64			`xml:"hg-id" json:"hg_id"`
	Version		int64			`xml:"version" json:"version,omitempty" asn1:"optional"`
	Title		string			`xml:"title" json:"title,omitempty" asn1:"optional"`
	Caption		string			`xml:"caption" json:"caption,omitempty" asn1:"optional"`
	Taxid		int64			`xml:"taxid" json:"taxid,omitempty" asn1:"optional"`
	Genes		[]HGGene		`xml:"genes" json:"genes,omitempty" asn1:"optional"`
	CrDate		*NCBIGeneral.Date	`xml:"cr-date" json:"cr_date,omitempty" asn1:"optional"`
	UpDate		*NCBIGeneral.Date	`xml:"up-date" json:"up_date,omitempty" asn1:"optional"`
	Distances	[]HGStats		`xml:"distances" json:"distances,omitempty" asn1:"optional"`
	Commentaries	[]HGCommentarySet	`xml:"commentaries" json:"commentaries,omitempty" asn1:"optional"`
	Warnings	[]string		`xml:"warnings" json:"warnings,omitempty" asn1:"optional"`
	Node		*HGNode			`xml:"node" json:"node,omitempty" asn1:"optional"`
}
type HGGene struct {
	Geneid		int64			`xml:"geneid" json:"geneid"`
	Otherid		int64			`xml:"otherid" json:"otherid,omitempty" asn1:"optional"`
	Symbol		string			`xml:"symbol" json:"symbol,omitempty" asn1:"optional"`
	Aliases		[]string		`xml:"aliases" json:"aliases,omitempty" asn1:"optional"`
	Title		string			`xml:"title" json:"title"`
	Taxid		int64			`xml:"taxid" json:"taxid"`
	ProtGi		int64			`xml:"prot-gi" json:"prot_gi,omitempty" asn1:"optional"`
	ProtAcc		string			`xml:"prot-acc" json:"prot_acc,omitempty" asn1:"optional"`
	ProtLen		int64			`xml:"prot-len" json:"prot_len,omitempty" asn1:"optional"`
	NucGi		int64			`xml:"nuc-gi" json:"nuc_gi,omitempty" asn1:"optional"`
	NucAcc		string			`xml:"nuc-acc" json:"nuc_acc,omitempty" asn1:"optional"`
	GeneLinks	[]HGLink		`xml:"gene-links" json:"gene_links,omitempty" asn1:"optional"`
	ProtLinks	[]HGLink		`xml:"prot-links" json:"prot_links,omitempty" asn1:"optional"`
	Domains		[]HGDomain		`xml:"domains" json:"domains,omitempty" asn1:"optional"`
	Chr		string			`xml:"chr" json:"chr,omitempty" asn1:"optional"`
	Location	*NCBISeqloc.SeqLoc	`xml:"location" json:"location,omitempty" asn1:"optional"`
	LocusTag	string			`xml:"locus-tag" json:"locus_tag,omitempty" asn1:"optional"`
}
type HGStats struct {
	Gi1		int64	`xml:"gi1" json:"gi1"`
	Gi2		int64	`xml:"gi2" json:"gi2"`
	NucChange	float64	`xml:"nuc-change" json:"nuc_change"`
	NucChangeJc	float64	`xml:"nuc-change-jc" json:"nuc_change_jc"`
	ProtChange	float64	`xml:"prot-change" json:"prot_change"`
	Ka		float64	`xml:"ka" json:"ka"`
	Ks		float64	`xml:"ks" json:"ks"`
	Knr		float64	`xml:"knr" json:"knr"`
	Knc		float64	`xml:"knc" json:"knc"`
	RecipBest	bool	`xml:"recip-best" json:"recip_best,omitempty" asn1:"optional"`
}
type HGCommentary struct {
	Link			*HGLink		`xml:"link" json:"link,omitempty"`
	Description		string		`xml:"description" json:"description,omitempty" asn1:"optional"`
	Caption			string		`xml:"caption" json:"caption,omitempty" asn1:"optional"`
	Provider		string		`xml:"provider" json:"provider,omitempty" asn1:"optional"`
	OtherLinks		[]HGLink	`xml:"other-links" json:"other_links,omitempty" asn1:"optional"`
	OtherCommentaries	[]HGCommentary	`xml:"other-commentaries" json:"other_commentaries,omitempty" asn1:"optional"`
	Taxid			int64		`xml:"taxid" json:"taxid,omitempty" asn1:"optional"`
	Geneid			int64		`xml:"geneid" json:"geneid,omitempty" asn1:"optional"`
}
type HGCommentarySet struct {
	HgId		int64		`xml:"hg-id" json:"hg_id,omitempty" asn1:"optional"`
	Title		string		`xml:"title" json:"title"`
	Commentaries	[]HGCommentary	`xml:"commentaries" json:"commentaries,omitempty"`
}
type HGCommentaryContainer []HGCommentarySet
type HGLink struct {
	Hypertext	string	`xml:"hypertext" json:"hypertext"`
	Url		string	`xml:"url" json:"url,omitempty" asn1:"optional"`
}
type HGDomain struct {
	Begin	int64	`xml:"begin" json:"begin"`
	End	int64	`xml:"end" json:"end"`
	PssmId	int64	`xml:"pssm-id" json:"pssm_id,omitempty" asn1:"optional"`
	CddId	string	`xml:"cdd-id" json:"cdd_id,omitempty" asn1:"optional"`
	CddName	string	`xml:"cdd-name" json:"cdd_name,omitempty" asn1:"optional"`
}
type HGNode struct {
	Type		string		`xml:"type" json:"type"`//Type,EnumList:family(0),ortholog(1),paralog(2),leaf(3)
	Id		*HGNodeId	`xml:"id" json:"id,omitempty"`
	Caption		string		`xml:"caption" json:"caption,omitempty" asn1:"optional"`
	CurrentNode	bool		`xml:"current-node" json:"current_node"`
	Children	[]HGNode	`xml:"children" json:"children,omitempty" asn1:"optional"`
	BranchLen	int64		`xml:"branch-len" json:"branch_len,omitempty" asn1:"optional"`
}
type HGNodeId struct {
	Id	int64	`xml:"id" json:"id,omitempty" asn1:"optional"`
	IdType	string	`xml:"id-type" json:"id_type"`//IdType,EnumList:none(0),geneid(1),hid(2)
}
type HGAlignment struct {
	HgId		int64			`xml:"hg-id" json:"hg_id"`
	Alignment	*NCBISeqalign.SeqAlign	`xml:"alignment" json:"alignment,omitempty"`
}
type HGAlignmentSet []HGAlignment
package NCBIID1Access

import "NCBISeqloc"
import "NCBISeqset"
import "NCBISequence"

type ID1serverRequest struct {
	Init		interface{}		`xml:"init" json:"init"`
	Getgi		*NCBISeqloc.SeqId	`xml:"getgi" json:"getgi,omitempty"`
	Getsefromgi	*ID1serverMaxcomplex	`xml:"getsefromgi" json:"getsefromgi,omitempty"`
	Fini		interface{}		`xml:"fini" json:"fini"`
	Getseqidsfromgi	int64			`xml:"getseqidsfromgi" json:"getseqidsfromgi"`
	Getgihist	int64			`xml:"getgihist" json:"getgihist"`
	Getgirev	int64			`xml:"getgirev" json:"getgirev"`
	Getgistate	int64			`xml:"getgistate" json:"getgistate"`
	Getsewithinfo	*ID1serverMaxcomplex	`xml:"getsewithinfo" json:"getsewithinfo,omitempty"`
	Getblobinfo	*ID1serverMaxcomplex	`xml:"getblobinfo" json:"getblobinfo,omitempty"`
}
//ID1serverRequest,ChoiceOption
type ID1serverMaxcomplex struct {
	Maxplex	*EntryComplexities	`xml:"maxplex" json:"maxplex,omitempty"`
	Gi	int64			`xml:"gi" json:"gi"`
	Ent	int64			`xml:"ent" json:"ent,omitempty" asn1:"optional"`
	Sat	string			`xml:"sat" json:"sat,omitempty" asn1:"optional"`
}
type EntryComplexities int
//EntryComplexities,IntegerEnum:entry(0),bioseq(1),bioseq-set(2),nuc-prot(3),pub-set(4)
type ID1SeqHist struct {
	Hist *NCBISequence.SeqHist `xml:"hist" json:"hist,omitempty"`
}
type ID1serverBack struct {
	Init		interface{}		`xml:"init" json:"init"`
	Error		int64			`xml:"error" json:"error"`
	Gotgi		int64			`xml:"gotgi" json:"gotgi"`
	Gotseqentry	*NCBISeqset.SeqEntry	`xml:"gotseqentry" json:"gotseqentry,omitempty"`
	Gotdeadseqentry	*NCBISeqset.SeqEntry	`xml:"gotdeadseqentry" json:"gotdeadseqentry,omitempty"`
	Fini		interface{}		`xml:"fini" json:"fini"`
	Gistate		int64			`xml:"gistate" json:"gistate"`
	Ids		[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty"`
	Gihist		[]ID1SeqHist		`xml:"gihist" json:"gihist,omitempty"`
	Girevhist	[]ID1SeqHist		`xml:"girevhist" json:"girevhist,omitempty"`
	Gotsewithinfo	*ID1SeqEntryInfo	`xml:"gotsewithinfo" json:"gotsewithinfo,omitempty"`
	Gotblobinfo	*ID1blobInfo		`xml:"gotblobinfo" json:"gotblobinfo,omitempty"`
}
//ID1serverBack,ChoiceOption
type ID1serverDebug []ID1serverBack
type ID1blobInfo struct {
	Gi		int64	`xml:"gi" json:"gi"`
	Sat		int64	`xml:"sat" json:"sat"`
	SatKey		int64	`xml:"sat-key" json:"sat_key"`
	Satname		string	`xml:"satname" json:"satname"`
	Suppress	int64	`xml:"suppress" json:"suppress"`
	Withdrawn	int64	`xml:"withdrawn" json:"withdrawn"`
	Confidential	int64	`xml:"confidential" json:"confidential"`
	BlobState	int64	`xml:"blob-state" json:"blob_state"`
	Comment		string	`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Extfeatmask	int64	`xml:"extfeatmask" json:"extfeatmask,omitempty" asn1:"optional"`
}
type ID1SeqEntryInfo struct {
	BlobInfo	*ID1blobInfo		`xml:"blob-info" json:"blob_info,omitempty"`
	Blob		*NCBISeqset.SeqEntry	`xml:"blob" json:"blob,omitempty" asn1:"optional"`
}
package NCBIID2Access

import "NCBISeqloc"
import "NCBISeqSplit"

type ID2RequestPacket []ID2Request
type ID2Request struct {
	SerialNumber	int64		`xml:"serial-number" json:"serial_number,omitempty" asn1:"optional"`
	Params		*ID2Params	`xml:"params" json:"params,omitempty" asn1:"optional"`
	Request		struct {
		Init		interface{}		`xml:"init" json:"init"`
		GetPackages	*ID2RequestGetPackages	`xml:"get-packages" json:"get_packages,omitempty"`
		GetSeqId	*ID2RequestGetSeqId	`xml:"get-seq-id" json:"get_seq_id,omitempty"`
		GetBlobId	*ID2RequestGetBlobId	`xml:"get-blob-id" json:"get_blob_id,omitempty"`
		GetBlobInfo	*ID2RequestGetBlobInfo	`xml:"get-blob-info" json:"get_blob_info,omitempty"`
		RegetBlob	*ID2RequestReGetBlob	`xml:"reget-blob" json:"reget_blob,omitempty"`
		GetChunks	*ID2SRequestGetChunks	`xml:"get-chunks" json:"get_chunks,omitempty"`
	}	`xml:"request" json:"request"`//Request,ChoiceOption
}
type ID2RequestGetPackages struct {
	Names		[]string	`xml:"names" json:"names,omitempty" asn1:"optional"`
	NoContents	interface{}	`xml:"no-contents" json:"no_contents,omitempty" asn1:"optional"`
}
type ID2RequestGetSeqId struct {
	SeqId		*ID2SeqId	`xml:"seq-id" json:"seq_id,omitempty"`
	SeqIdType	int		`xml:"seq-id-type" json:"seq_id_type"`//SeqIdType,IntegerEnum:any(0),gi(1),text(2),general(4),all(127),label(128),taxid(256),hash(512),seq-length(1024),seq-mol(2048)
}
type ID2SeqId struct {
	String	string			`xml:"string" json:"string"`
	SeqId	*NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty"`
}
//ID2SeqId,ChoiceOption
type ID2RequestGetBlobId struct {
	SeqId		*ID2RequestGetSeqId	`xml:"seq-id" json:"seq_id,omitempty"`
	Sources		[]string		`xml:"sources" json:"sources,omitempty" asn1:"optional"`
	External	interface{}		`xml:"external" json:"external,omitempty" asn1:"optional"`
}
type ID2RequestGetBlobInfo struct {
	BlobId	struct {
		BlobId	*ID2BlobId	`xml:"blob-id" json:"blob_id,omitempty"`
		Resolve	struct {
			Request		*ID2RequestGetBlobId	`xml:"request" json:"request,omitempty"`
			ExcludeBlobs	[]ID2BlobId		`xml:"exclude-blobs" json:"exclude_blobs,omitempty" asn1:"optional"`
		}	`xml:"resolve" json:"resolve"`
	}					`xml:"blob-id" json:"blob_id"`//BlobId,ChoiceOption
	GetSeqIds	interface{}		`xml:"get-seq-ids" json:"get_seq_ids,omitempty" asn1:"optional"`
	GetData		*ID2GetBlobDetails	`xml:"get-data" json:"get_data,omitempty" asn1:"optional"`
}
type ID2RequestReGetBlob struct {
	BlobId		*ID2BlobId	`xml:"blob-id" json:"blob_id,omitempty"`
	SplitVersion	int64		`xml:"split-version" json:"split_version"`
	Offset		int64		`xml:"offset" json:"offset"`
}
type ID2SRequestGetChunks struct {
	BlobId		*ID2BlobId			`xml:"blob-id" json:"blob_id,omitempty"`
	Chunks		[]NCBISeqSplit.ID2SChunkId	`xml:"chunks" json:"chunks,omitempty"`
	SplitVersion	int64				`xml:"split-version" json:"split_version,omitempty" asn1:"optional"`
}
type ID2GetBlobDetails struct {
	Location	*NCBISeqloc.SeqLoc	`xml:"location" json:"location,omitempty" asn1:"optional"`
	SeqClassLevel	int64			`xml:"seq-class-level" json:"seq_class_level" asn1:"default:1"`
	DescrLevel	int64			`xml:"descr-level" json:"descr_level" asn1:"default:1"`
	DescrTypeMask	int64			`xml:"descr-type-mask" json:"descr_type_mask" asn1:"default:0"`
	AnnotTypeMask	int64			`xml:"annot-type-mask" json:"annot_type_mask" asn1:"default:0"`
	FeatTypeMask	int64			`xml:"feat-type-mask" json:"feat_type_mask" asn1:"default:0"`
	SequenceLevel	string			`xml:"sequence-level" json:"sequence_level"`//SequenceLevel,EnumList:none(0),seq-map(1),seq-data(2)
}
type ID2Reply struct {
	SerialNumber	int64		`xml:"serial-number" json:"serial_number,omitempty" asn1:"optional"`
	Params		*ID2Params	`xml:"params" json:"params,omitempty" asn1:"optional"`
	Error		[]ID2Error	`xml:"error" json:"error,omitempty" asn1:"optional"`
	EndOfReply	interface{}	`xml:"end-of-reply" json:"end_of_reply,omitempty" asn1:"optional"`
	Reply		struct {
		Init		interface{}		`xml:"init" json:"init"`
		Empty		interface{}		`xml:"empty" json:"empty"`
		GetPackage	*ID2ReplyGetPackage	`xml:"get-package" json:"get_package,omitempty"`
		GetSeqId	*ID2ReplyGetSeqId	`xml:"get-seq-id" json:"get_seq_id,omitempty"`
		GetBlobId	*ID2ReplyGetBlobId	`xml:"get-blob-id" json:"get_blob_id,omitempty"`
		GetBlobSeqIds	*ID2ReplyGetBlobSeqIds	`xml:"get-blob-seq-ids" json:"get_blob_seq_ids,omitempty"`
		GetBlob		*ID2ReplyGetBlob	`xml:"get-blob" json:"get_blob,omitempty"`
		RegetBlob	*ID2ReplyReGetBlob	`xml:"reget-blob" json:"reget_blob,omitempty"`
		GetSplitInfo	*ID2SReplyGetSplitInfo	`xml:"get-split-info" json:"get_split_info,omitempty"`
		GetChunk	*ID2SReplyGetChunk	`xml:"get-chunk" json:"get_chunk,omitempty"`
	}		`xml:"reply" json:"reply"`//Reply,ChoiceOption
	Discard	string	`xml:"discard" json:"discard,omitempty" asn1:"optional"`//Discard,EnumList:reply(0),last-octet-string(1),nothing(2)
}
type ID2Error struct {
	Severity	string	`xml:"severity" json:"severity"`//Severity,EnumList:warning(1),failed-command(2),failed-connection(3),failed-server(4),no-data(5),restricted-data(6),unsupported-command(7),invalid-arguments(8)
	RetryDelay	int64	`xml:"retry-delay" json:"retry_delay,omitempty" asn1:"optional"`
	Message		string	`xml:"message" json:"message,omitempty" asn1:"optional"`
}
type ID2ReplyGetPackage struct {
	Name	string		`xml:"name" json:"name"`
	Params	*ID2Params	`xml:"params" json:"params,omitempty" asn1:"optional"`
}
type ID2ReplyGetSeqId struct {
	Request		*ID2RequestGetSeqId	`xml:"request" json:"request,omitempty"`
	SeqId		[]NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty" asn1:"optional"`
	EndOfReply	interface{}		`xml:"end-of-reply" json:"end_of_reply,omitempty" asn1:"optional"`
}
type ID2BlobState string
//ID2BlobState,EnumList:live(0),suppressed-temp(1),suppressed(2),dead(3),protected(4),withdrawn(5)
type ID2ReplyGetBlobId struct {
	SeqId		*NCBISeqloc.SeqId		`xml:"seq-id" json:"seq_id,omitempty"`
	BlobId		*ID2BlobId			`xml:"blob-id" json:"blob_id,omitempty" asn1:"optional"`
	SplitVersion	int64				`xml:"split-version" json:"split_version" asn1:"default:0"`
	AnnotInfo	[]NCBISeqSplit.ID2SSeqAnnotInfo	`xml:"annot-info" json:"annot_info,omitempty" asn1:"optional"`
	EndOfReply	interface{}			`xml:"end-of-reply" json:"end_of_reply,omitempty" asn1:"optional"`
	BlobState	int64				`xml:"blob-state" json:"blob_state,omitempty" asn1:"optional"`
}
type ID2ReplyGetBlobSeqIds struct {
	BlobId	*ID2BlobId	`xml:"blob-id" json:"blob_id,omitempty"`
	Ids	*ID2ReplyData	`xml:"ids" json:"ids,omitempty" asn1:"optional"`
}
type ID2ReplyGetBlob struct {
	BlobId		*ID2BlobId	`xml:"blob-id" json:"blob_id,omitempty"`
	SplitVersion	int64		`xml:"split-version" json:"split_version" asn1:"default:0"`
	Data		*ID2ReplyData	`xml:"data" json:"data,omitempty" asn1:"optional"`
	BlobState	int64		`xml:"blob-state" json:"blob_state,omitempty" asn1:"optional"`
}
type ID2SReplyGetSplitInfo struct {
	BlobId		*ID2BlobId	`xml:"blob-id" json:"blob_id,omitempty"`
	SplitVersion	int64		`xml:"split-version" json:"split_version"`
	Data		*ID2ReplyData	`xml:"data" json:"data,omitempty" asn1:"optional"`
	BlobState	int64		`xml:"blob-state" json:"blob_state,omitempty" asn1:"optional"`
}
type ID2ReplyReGetBlob struct {
	BlobId		*ID2BlobId	`xml:"blob-id" json:"blob_id,omitempty"`
	SplitVersion	int64		`xml:"split-version" json:"split_version"`
	Offset		int64		`xml:"offset" json:"offset"`
	Data		*ID2ReplyData	`xml:"data" json:"data,omitempty" asn1:"optional"`
}
type ID2SReplyGetChunk struct {
	BlobId	*ID2BlobId			`xml:"blob-id" json:"blob_id,omitempty"`
	ChunkId	*NCBISeqSplit.ID2SChunkId	`xml:"chunk-id" json:"chunk_id,omitempty"`
	Data	*ID2ReplyData			`xml:"data" json:"data,omitempty" asn1:"optional"`
}
type ID2ReplyData struct {
	DataType	int		`xml:"data-type" json:"data_type"`//DataType,IntegerEnum:seq-entry(0),seq-annot(1),id2s-split-info(2),id2s-chunk(3)
	DataFormat	int		`xml:"data-format" json:"data_format"`//DataFormat,IntegerEnum:asn-binary(0),asn-text(1),xml(2)
	DataCompression	int		`xml:"data-compression" json:"data_compression"`//DataCompression,IntegerEnum:none(0),gzip(1),nlmzip(2),bzip2(3)
	Data		[][]byte	`xml:"data" json:"data,omitempty"`
}
type ID2BlobSeqIds []ID2BlobSeqId
type ID2BlobSeqId struct {
	SeqId		*NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty"`
	Replaced	interface{}		`xml:"replaced" json:"replaced,omitempty" asn1:"optional"`
}
type ID2BlobId struct {
	Sat	int64	`xml:"sat" json:"sat"`
	SubSat	int	`xml:"sub-sat" json:"sub_sat"`//SubSat,IntegerEnum:main(0),snp(1),snp-graph(4),cdd(8),mgc(16),hprd(32),sts(64),trna(128),exon(512)
	SatKey	int64	`xml:"sat-key" json:"sat_key"`
	Version	int64	`xml:"version" json:"version,omitempty" asn1:"optional"`
}
type ID2Params []ID2Param
type ID2Param struct {
	Name	string		`xml:"name" json:"name"`
	Value	[]string	`xml:"value" json:"value,omitempty" asn1:"optional"`
	Type	string		`xml:"type" json:"type"`//Type,EnumList:set-value(1),get-value(2),force-value(3),use-package(4)
}
package INSDINSDSeq

type INSDSet []INSDSeq
type INSDSeq struct {
	Locus			string			`xml:"locus" json:"locus,omitempty" asn1:"optional"`
	Length			int64			`xml:"length" json:"length"`
	Strandedness		string			`xml:"strandedness" json:"strandedness,omitempty" asn1:"optional"`
	Moltype			string			`xml:"moltype" json:"moltype"`
	Topology		string			`xml:"topology" json:"topology,omitempty" asn1:"optional"`
	Division		string			`xml:"division" json:"division,omitempty" asn1:"optional"`
	UpdateDate		string			`xml:"update-date" json:"update_date,omitempty" asn1:"optional"`
	CreateDate		string			`xml:"create-date" json:"create_date,omitempty" asn1:"optional"`
	UpdateRelease		string			`xml:"update-release" json:"update_release,omitempty" asn1:"optional"`
	CreateRelease		string			`xml:"create-release" json:"create_release,omitempty" asn1:"optional"`
	Definition		string			`xml:"definition" json:"definition,omitempty" asn1:"optional"`
	PrimaryAccession	string			`xml:"primary-accession" json:"primary_accession,omitempty" asn1:"optional"`
	EntryVersion		string			`xml:"entry-version" json:"entry_version,omitempty" asn1:"optional"`
	AccessionVersion	string			`xml:"accession-version" json:"accession_version,omitempty" asn1:"optional"`
	OtherSeqids		[]INSDSeqid		`xml:"other-seqids" json:"other_seqids,omitempty" asn1:"optional"`
	SecondaryAccessions	[]INSDSecondaryAccn	`xml:"secondary-accessions" json:"secondary_accessions,omitempty" asn1:"optional"`
	Project			string			`xml:"project" json:"project,omitempty" asn1:"optional"`
	Keywords		[]INSDKeyword		`xml:"keywords" json:"keywords,omitempty" asn1:"optional"`
	Segment			string			`xml:"segment" json:"segment,omitempty" asn1:"optional"`
	Source			string			`xml:"source" json:"source,omitempty" asn1:"optional"`
	Organism		string			`xml:"organism" json:"organism,omitempty" asn1:"optional"`
	Taxonomy		string			`xml:"taxonomy" json:"taxonomy,omitempty" asn1:"optional"`
	References		[]INSDReference		`xml:"references" json:"references,omitempty" asn1:"optional"`
	Comment			string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	CommentSet		[]INSDComment		`xml:"comment-set" json:"comment_set,omitempty" asn1:"optional"`
	StrucComments		[]INSDStrucComment	`xml:"struc-comments" json:"struc_comments,omitempty" asn1:"optional"`
	Primary			string			`xml:"primary" json:"primary,omitempty" asn1:"optional"`
	SourceDb		string			`xml:"source-db" json:"source_db,omitempty" asn1:"optional"`
	DatabaseReference	string			`xml:"database-reference" json:"database_reference,omitempty" asn1:"optional"`
	FeatureTable		[]INSDFeature		`xml:"feature-table" json:"feature_table,omitempty" asn1:"optional"`
	FeatureSet		[]INSDFeatureSet	`xml:"feature-set" json:"feature_set,omitempty" asn1:"optional"`
	Sequence		string			`xml:"sequence" json:"sequence,omitempty" asn1:"optional"`
	Contig			string			`xml:"contig" json:"contig,omitempty" asn1:"optional"`
	AltSeq			[]INSDAltSeqData	`xml:"alt-seq" json:"alt_seq,omitempty" asn1:"optional"`
	Xrefs			[]INSDXref		`xml:"xrefs" json:"xrefs,omitempty" asn1:"optional"`
}
type INSDSeqid string
type INSDSecondaryAccn string
type INSDKeyword string
type INSDReference struct {
	Reference	string		`xml:"reference" json:"reference"`
	Position	string		`xml:"position" json:"position,omitempty" asn1:"optional"`
	Authors		[]INSDAuthor	`xml:"authors" json:"authors,omitempty" asn1:"optional"`
	Consortium	string		`xml:"consortium" json:"consortium,omitempty" asn1:"optional"`
	Title		string		`xml:"title" json:"title,omitempty" asn1:"optional"`
	Journal		string		`xml:"journal" json:"journal"`
	Xref		[]INSDXref	`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Pubmed		int64		`xml:"pubmed" json:"pubmed,omitempty" asn1:"optional"`
	Remark		string		`xml:"remark" json:"remark,omitempty" asn1:"optional"`
}
type INSDAuthor string
type INSDXref struct {
	Dbname	string	`xml:"dbname" json:"dbname"`
	Id	string	`xml:"id" json:"id"`
}
type INSDComment struct {
	Type		string			`xml:"type" json:"type,omitempty" asn1:"optional"`
	Paragraphs	[]INSDCommentParagraph	`xml:"paragraphs" json:"paragraphs,omitempty"`
}
type INSDCommentParagraph string
type INSDStrucComment struct {
	Name	string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Items	[]INSDStrucCommentItem	`xml:"items" json:"items,omitempty"`
}
type INSDStrucCommentItem struct {
	Tag	string	`xml:"tag" json:"tag,omitempty" asn1:"optional"`
	Value	string	`xml:"value" json:"value,omitempty" asn1:"optional"`
	Url	string	`xml:"url" json:"url,omitempty" asn1:"optional"`
}
type INSDFeatureSet struct {
	AnnotSource	string		`xml:"annot-source" json:"annot_source,omitempty" asn1:"optional"`
	Features	[]INSDFeature	`xml:"features" json:"features,omitempty"`
}
type INSDFeature struct {
	Key		string		`xml:"key" json:"key"`
	Location	string		`xml:"location" json:"location"`
	Intervals	[]INSDInterval	`xml:"intervals" json:"intervals,omitempty" asn1:"optional"`
	Operator	string		`xml:"operator" json:"operator,omitempty" asn1:"optional"`
	Partial5	bool		`xml:"partial5" json:"partial5,omitempty" asn1:"optional"`
	Partial3	bool		`xml:"partial3" json:"partial3,omitempty" asn1:"optional"`
	Quals		[]INSDQualifier	`xml:"quals" json:"quals,omitempty" asn1:"optional"`
	Xrefs		[]INSDXref	`xml:"xrefs" json:"xrefs,omitempty" asn1:"optional"`
}
type INSDInterval struct {
	From		int64	`xml:"from" json:"from,omitempty" asn1:"optional"`
	To		int64	`xml:"to" json:"to,omitempty" asn1:"optional"`
	Point		int64	`xml:"point" json:"point,omitempty" asn1:"optional"`
	Iscomp		bool	`xml:"iscomp" json:"iscomp,omitempty" asn1:"optional"`
	Interbp		bool	`xml:"interbp" json:"interbp,omitempty" asn1:"optional"`
	Accession	string	`xml:"accession" json:"accession"`
}
type INSDQualifier struct {
	Name	string	`xml:"name" json:"name"`
	Value	string	`xml:"value" json:"value,omitempty" asn1:"optional"`
}
type INSDAltSeqData struct {
	Name	string			`xml:"name" json:"name"`
	Items	[]INSDAltSeqItem	`xml:"items" json:"items,omitempty" asn1:"optional"`
}
type INSDAltSeqItem struct {
	Interval	*INSDInterval	`xml:"interval" json:"interval,omitempty" asn1:"optional"`
	Isgap		bool		`xml:"isgap" json:"isgap,omitempty" asn1:"optional"`
	GapLength	int64		`xml:"gap-length" json:"gap_length,omitempty" asn1:"optional"`
	GapType		string		`xml:"gap-type" json:"gap_type,omitempty" asn1:"optional"`
	GapLinkage	string		`xml:"gap-linkage" json:"gap_linkage,omitempty" asn1:"optional"`
	GapComment	string		`xml:"gap-comment" json:"gap_comment,omitempty" asn1:"optional"`
	FirstAccn	string		`xml:"first-accn" json:"first_accn,omitempty" asn1:"optional"`
	LastAccn	string		`xml:"last-accn" json:"last_accn,omitempty" asn1:"optional"`
	Value		string		`xml:"value" json:"value,omitempty" asn1:"optional"`
}
package NCBIMedlars

import "NCBIBiblio"

type MedlarsEntry struct {
	Pmid	*NCBIBiblio.PubMedId	`xml:"pmid" json:"pmid,omitempty"`
	Muid	int64			`xml:"muid" json:"muid,omitempty" asn1:"optional"`
	Recs	[]MedlarsRecord		`xml:"recs" json:"recs,omitempty"`
}
type MedlarsRecord struct {
	Code	int64	`xml:"code" json:"code"`
	Abbr	string	`xml:"abbr" json:"abbr,omitempty" asn1:"optional"`
	Data	string	`xml:"data" json:"data"`
}
package NCBIMedline

import "NCBIBiblio"
import "NCBIGeneral"

type MedlineEntry struct {
	Uid		int64			`xml:"uid" json:"uid,omitempty" asn1:"optional"`
	Em		*NCBIGeneral.Date	`xml:"em" json:"em,omitempty"`
	Cit		*NCBIBiblio.CitArt	`xml:"cit" json:"cit,omitempty"`
	Abstract	string			`xml:"abstract" json:"abstract,omitempty" asn1:"optional"`
	Mesh		[]MedlineMesh		`xml:"mesh" json:"mesh,omitempty" asn1:"optional"`
	Substance	[]MedlineRn		`xml:"substance" json:"substance,omitempty" asn1:"optional"`
	Xref		[]MedlineSi		`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Idnum		[]string		`xml:"idnum" json:"idnum,omitempty" asn1:"optional"`
	Gene		[]string		`xml:"gene" json:"gene,omitempty" asn1:"optional"`
	Pmid		*NCBIBiblio.PubMedId	`xml:"pmid" json:"pmid,omitempty" asn1:"optional"`
	PubType		[]string		`xml:"pub-type" json:"pub_type,omitempty" asn1:"optional"`
	Mlfield		[]MedlineField		`xml:"mlfield" json:"mlfield,omitempty" asn1:"optional"`
	Status		int			`xml:"status" json:"status"`//Status,IntegerEnum:publisher(1),premedline(2),medline(3)
}
type MedlineMesh struct {
	Mp	bool		`xml:"mp" json:"mp"`
	Term	string		`xml:"term" json:"term"`
	Qual	[]MedlineQual	`xml:"qual" json:"qual,omitempty" asn1:"optional"`
}
type MedlineQual struct {
	Mp	bool	`xml:"mp" json:"mp"`
	Subh	string	`xml:"subh" json:"subh"`
}
type MedlineRn struct {
	Type	string	`xml:"type" json:"type"`//Type,EnumList:nameonly(0),cas(1),ec(2)
	Cit	string	`xml:"cit" json:"cit,omitempty" asn1:"optional"`
	Name	string	`xml:"name" json:"name"`
}
type MedlineSi struct {
	Type	string	`xml:"type" json:"type"`//Type,EnumList:ddbj(1),carbbank(2),embl(3),hdb(4),genbank(5),hgml(6),mim(7),msd(8),pdb(9),pir(10),prfseqdb(11),psd(12),swissprot(13),gdb(14)
	Cit	string	`xml:"cit" json:"cit,omitempty" asn1:"optional"`
}
type MedlineField struct {
	Type	int		`xml:"type" json:"type"`//Type,IntegerEnum:other(0),comment(1),erratum(2)
	Str	string		`xml:"str" json:"str"`
	Ids	[]DocRef	`xml:"ids" json:"ids,omitempty" asn1:"optional"`
}
type DocRef struct {
	Type	int	`xml:"type" json:"type"`//Type,IntegerEnum:medline(1),pubmed(2),ncbigi(3)
	Uid	int64	`xml:"uid" json:"uid"`
}
package NCBIMim

type MimEntries []MimEntry
type MimSet struct {
	ReleaseDate	*MimDate	`xml:"releaseDate" json:"releaseDate,omitempty"`
	MimEntries	[]MimEntry	`xml:"mimEntries" json:"mimEntries,omitempty"`
}
type MimEntry struct {
	MimNumber		string			`xml:"mimNumber" json:"mimNumber"`
	MimType			int			`xml:"mimType" json:"mimType"`//MimType,IntegerEnum:none(0),star(1),caret(2),pound(3),plus(4),perc(5)
	Title			string			`xml:"title" json:"title"`
	Copyright		string			`xml:"copyright" json:"copyright,omitempty" asn1:"optional"`
	Symbol			string			`xml:"symbol" json:"symbol,omitempty" asn1:"optional"`
	Locus			string			`xml:"locus" json:"locus,omitempty" asn1:"optional"`
	Synonyms		[]string		`xml:"synonyms" json:"synonyms,omitempty" asn1:"optional"`
	Aliases			[]string		`xml:"aliases" json:"aliases,omitempty" asn1:"optional"`
	Included		[]string		`xml:"included" json:"included,omitempty" asn1:"optional"`
	SeeAlso			[]MimCit		`xml:"seeAlso" json:"seeAlso,omitempty" asn1:"optional"`
	Text			[]MimText		`xml:"text" json:"text,omitempty" asn1:"optional"`
	Textfields		[]MimText		`xml:"textfields" json:"textfields,omitempty" asn1:"optional"`
	HasSummary		bool			`xml:"hasSummary" json:"hasSummary,omitempty" asn1:"optional"`
	Summary			[]MimText		`xml:"summary" json:"summary,omitempty" asn1:"optional"`
	SummaryAttribution	[]MimEditItem		`xml:"summaryAttribution" json:"summaryAttribution,omitempty" asn1:"optional"`
	SummaryEditHistory	[]MimEditItem		`xml:"summaryEditHistory" json:"summaryEditHistory,omitempty" asn1:"optional"`
	SummaryCreationDate	*MimEditItem		`xml:"summaryCreationDate" json:"summaryCreationDate,omitempty" asn1:"optional"`
	AllelicVariants		[]MimAllelicVariant	`xml:"allelicVariants" json:"allelicVariants,omitempty" asn1:"optional"`
	HasSynopsis		bool			`xml:"hasSynopsis" json:"hasSynopsis,omitempty" asn1:"optional"`
	ClinicalSynopsis	[]MimIndexTerm		`xml:"clinicalSynopsis" json:"clinicalSynopsis,omitempty" asn1:"optional"`
	SynopsisAttribution	[]MimEditItem		`xml:"synopsisAttribution" json:"synopsisAttribution,omitempty" asn1:"optional"`
	SynopsisEditHistory	[]MimEditItem		`xml:"synopsisEditHistory" json:"synopsisEditHistory,omitempty" asn1:"optional"`
	SynopsisCreationDate	*MimEditItem		`xml:"synopsisCreationDate" json:"synopsisCreationDate,omitempty" asn1:"optional"`
	EditHistory		[]MimEditItem		`xml:"editHistory" json:"editHistory,omitempty" asn1:"optional"`
	CreationDate		*MimEditItem		`xml:"creationDate" json:"creationDate,omitempty" asn1:"optional"`
	References		[]MimReference		`xml:"references" json:"references,omitempty" asn1:"optional"`
	Attribution		[]MimEditItem		`xml:"attribution" json:"attribution,omitempty" asn1:"optional"`
	NumGeneMaps		int64			`xml:"numGeneMaps" json:"numGeneMaps"`
	MedlineLinks		*MimLink		`xml:"medlineLinks" json:"medlineLinks,omitempty" asn1:"optional"`
	ProteinLinks		*MimLink		`xml:"proteinLinks" json:"proteinLinks,omitempty" asn1:"optional"`
	NucleotideLinks		*MimLink		`xml:"nucleotideLinks" json:"nucleotideLinks,omitempty" asn1:"optional"`
	StructureLinks		*MimLink		`xml:"structureLinks" json:"structureLinks,omitempty" asn1:"optional"`
	GenomeLinks		*MimLink		`xml:"genomeLinks" json:"genomeLinks,omitempty" asn1:"optional"`
}
type MimText struct {
	Label		string		`xml:"label" json:"label"`
	Text		string		`xml:"text" json:"text"`
	Neighbors	*MimLink	`xml:"neighbors" json:"neighbors,omitempty" asn1:"optional"`
}
type MimAllelicVariant struct {
	Number		string		`xml:"number" json:"number"`
	Name		string		`xml:"name" json:"name"`
	Aliases		[]string	`xml:"aliases" json:"aliases,omitempty" asn1:"optional"`
	Mutation	[]MimText	`xml:"mutation" json:"mutation,omitempty" asn1:"optional"`
	Description	[]MimText	`xml:"description" json:"description,omitempty" asn1:"optional"`
	SnpLinks	*MimLink	`xml:"snpLinks" json:"snpLinks,omitempty" asn1:"optional"`
}
type MimLink struct {
	Num		int64	`xml:"num" json:"num"`
	Uids		string	`xml:"uids" json:"uids"`
	NumRelevant	int64	`xml:"numRelevant" json:"numRelevant,omitempty" asn1:"optional"`
}
type MimAuthor struct {
	Name	string	`xml:"name" json:"name"`
	Index	int64	`xml:"index" json:"index"`
}
type MimCit struct {
	Number	int64	`xml:"number" json:"number"`
	Author	string	`xml:"author" json:"author"`
	Others	string	`xml:"others" json:"others"`
	Year	int64	`xml:"year" json:"year"`
}
type MimReference struct {
	Number		int64		`xml:"number" json:"number"`
	OrigNumber	int64		`xml:"origNumber" json:"origNumber,omitempty" asn1:"optional"`
	Type		string		`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,EnumList:not-set(0),citation(1),book(2),personal-communication(3),book-citation(4)
	Authors		[]MimAuthor	`xml:"authors" json:"authors,omitempty"`
	PrimaryAuthor	string		`xml:"primaryAuthor" json:"primaryAuthor"`
	OtherAuthors	string		`xml:"otherAuthors" json:"otherAuthors"`
	CitationTitle	string		`xml:"citationTitle" json:"citationTitle"`
	CitationType	int64		`xml:"citationType" json:"citationType,omitempty" asn1:"optional"`
	BookTitle	string		`xml:"bookTitle" json:"bookTitle,omitempty" asn1:"optional"`
	Editors		[]MimAuthor	`xml:"editors" json:"editors,omitempty" asn1:"optional"`
	Volume		string		`xml:"volume" json:"volume,omitempty" asn1:"optional"`
	Edition		string		`xml:"edition" json:"edition,omitempty" asn1:"optional"`
	Journal		string		`xml:"journal" json:"journal,omitempty" asn1:"optional"`
	Series		string		`xml:"series" json:"series,omitempty" asn1:"optional"`
	Publisher	string		`xml:"publisher" json:"publisher,omitempty" asn1:"optional"`
	Place		string		`xml:"place" json:"place,omitempty" asn1:"optional"`
	CommNote	string		`xml:"commNote" json:"commNote,omitempty" asn1:"optional"`
	PubDate		*MimDate	`xml:"pubDate" json:"pubDate,omitempty"`
	Pages		[]MimPage	`xml:"pages" json:"pages,omitempty" asn1:"optional"`
	MiscInfo	string		`xml:"miscInfo" json:"miscInfo,omitempty" asn1:"optional"`
	PubmedUID	int64		`xml:"pubmedUID" json:"pubmedUID,omitempty" asn1:"optional"`
	Ambiguous	bool		`xml:"ambiguous" json:"ambiguous"`
	NoLink		bool		`xml:"noLink" json:"noLink,omitempty" asn1:"optional"`
}
type MimIndexTerm struct {
	Key	string		`xml:"key" json:"key"`
	Terms	[]string	`xml:"terms" json:"terms,omitempty"`
}
type MimEditItem struct {
	Author	string		`xml:"author" json:"author"`
	ModDate	*MimDate	`xml:"modDate" json:"modDate,omitempty"`
}
type MimDate struct {
	Year	int64	`xml:"year" json:"year"`
	Month	int64	`xml:"month" json:"month,omitempty" asn1:"optional"`
	Day	int64	`xml:"day" json:"day,omitempty" asn1:"optional"`
}
type MimPage struct {
	From	string	`xml:"from" json:"from"`
	To	string	`xml:"to" json:"to,omitempty" asn1:"optional"`
}
package NCBIMedArchive

import "NCBIMedline"
import "NCBIMedlars"
import "NCBIPubMed"
import "NCBIPub"
import "NCBIBiblio"

type MlaRequest struct {
	Init		interface{}		`xml:"init" json:"init" asn1:"explicit,tag:0"`
	Getmle		int64			`xml:"getmle" json:"getmle" asn1:"explicit,tag:1"`
	Getpub		int64			`xml:"getpub" json:"getpub" asn1:"explicit,tag:2"`
	Gettitle	*TitleMsg		`xml:"gettitle" json:"gettitle,omitempty" asn1:"explicit,tag:3"`
	Citmatch	*NCBIPub.Pub		`xml:"citmatch" json:"citmatch,omitempty" asn1:"explicit,tag:4"`
	Fini		interface{}		`xml:"fini" json:"fini" asn1:"explicit,tag:5"`
	Getmriuids	int64			`xml:"getmriuids" json:"getmriuids" asn1:"explicit,tag:6"`
	Getaccuids	*NCBIMedline.MedlineSi	`xml:"getaccuids" json:"getaccuids,omitempty" asn1:"explicit,tag:7"`
	Uidtopmid	int64			`xml:"uidtopmid" json:"uidtopmid" asn1:"explicit,tag:8"`
	Pmidtouid	*NCBIBiblio.PubMedId	`xml:"pmidtouid" json:"pmidtouid,omitempty" asn1:"explicit,tag:9"`
	Getmlepmid	*NCBIBiblio.PubMedId	`xml:"getmlepmid" json:"getmlepmid,omitempty" asn1:"explicit,tag:10"`
	Getpubpmid	*NCBIBiblio.PubMedId	`xml:"getpubpmid" json:"getpubpmid,omitempty" asn1:"explicit,tag:11"`
	Citmatchpmid	*NCBIPub.Pub		`xml:"citmatchpmid" json:"citmatchpmid,omitempty" asn1:"explicit,tag:12"`
	Getmripmids	int64			`xml:"getmripmids" json:"getmripmids" asn1:"explicit,tag:13"`
	Getaccpmids	*NCBIMedline.MedlineSi	`xml:"getaccpmids" json:"getaccpmids,omitempty" asn1:"explicit,tag:14"`
	Citlstpmids	*NCBIPub.Pub		`xml:"citlstpmids" json:"citlstpmids,omitempty" asn1:"explicit,tag:15"`
	Getmleuid	int64			`xml:"getmleuid" json:"getmleuid" asn1:"explicit,tag:16"`
	Getmlrpmid	*NCBIBiblio.PubMedId	`xml:"getmlrpmid" json:"getmlrpmid,omitempty" asn1:"explicit,tag:17"`
	Getmlruid	int64			`xml:"getmlruid" json:"getmlruid" asn1:"explicit,tag:18"`
}
//MlaRequest,ChoiceOption
type TitleType string
//TitleType,EnumList:not-set(0),name(1),tsub(2),trans(3),jta(4),iso-jta(5),ml-jta(6),coden(7),issn(8),abr(9),isbn(10),all(255)
type TitleMsg struct {
	Type	*TitleType		`xml:"type" json:"type,omitempty"`
	Title	*NCBIBiblio.Title	`xml:"title" json:"title,omitempty"`
}
type TitleMsgList struct {
	Num	int64		`xml:"num" json:"num"`
	Titles	[]TitleMsg	`xml:"titles" json:"titles,omitempty"`
}
type ErrorVal string
//ErrorVal,EnumList:not-found(0),operational-error(1),cannot-connect-jrsrv(2),cannot-connect-pmdb(3),journal-not-found(4),citation-not-found(5),citation-ambiguous(6),citation-too-many(7),cannot-connect-searchbackend-jrsrv(8),cannot-connect-searchbackend-pmdb(9),cannot-connect-docsumbackend(10)
type MlaBack struct {
	Init		interface{}			`xml:"init" json:"init" asn1:"explicit,tag:0"`
	Error		*ErrorVal			`xml:"error" json:"error,omitempty" asn1:"explicit,tag:1"`
	Getmle		*NCBIMedline.MedlineEntry	`xml:"getmle" json:"getmle,omitempty" asn1:"explicit,tag:2"`
	Getpub		*NCBIPub.Pub			`xml:"getpub" json:"getpub,omitempty" asn1:"explicit,tag:3"`
	Gettitle	*TitleMsgList			`xml:"gettitle" json:"gettitle,omitempty" asn1:"explicit,tag:4"`
	Citmatch	int64				`xml:"citmatch" json:"citmatch" asn1:"explicit,tag:5"`
	Fini		interface{}			`xml:"fini" json:"fini" asn1:"explicit,tag:6"`
	Getuids		[]int64				`xml:"getuids" json:"getuids,omitempty" asn1:"explicit,tag:7"`
	Getpmids	[]int64				`xml:"getpmids" json:"getpmids,omitempty" asn1:"explicit,tag:8"`
	Outuid		int64				`xml:"outuid" json:"outuid" asn1:"explicit,tag:9"`
	Outpmid		*NCBIBiblio.PubMedId		`xml:"outpmid" json:"outpmid,omitempty" asn1:"explicit,tag:10"`
	Getpme		*NCBIPubMed.PubmedEntry		`xml:"getpme" json:"getpme,omitempty" asn1:"explicit,tag:11"`
	Getmlr		*NCBIMedlars.MedlarsEntry	`xml:"getmlr" json:"getmlr,omitempty" asn1:"explicit,tag:12"`
}
//MlaBack,ChoiceOption
package MMDB

import "MMDBChemicalGraph"
import "MMDBStructuralModel"
import "MMDBFeatures"
import "NCBIPub"
import "NCBIGeneral"

type Biostruc struct {
	Id		[]BiostrucId				`xml:"id" json:"id,omitempty"`
	Descr		[]BiostrucDescr				`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	ChemicalGraph	*MMDBChemicalGraph.BiostrucGraph	`xml:"chemical-graph" json:"chemical_graph,omitempty"`
	Features	[]MMDBFeatures.BiostrucFeatureSet	`xml:"features" json:"features,omitempty" asn1:"optional"`
	Model		[]MMDBStructuralModel.BiostrucModel	`xml:"model" json:"model,omitempty" asn1:"optional"`
}
type BiostrucId struct {
	MmdbId		*MmdbId			`xml:"mmdb-id" json:"mmdb_id,omitempty"`
	OtherDatabase	*NCBIGeneral.Dbtag	`xml:"other-database" json:"other_database,omitempty"`
	LocalId		*NCBIGeneral.ObjectId	`xml:"local-id" json:"local_id,omitempty"`
}
//BiostrucId,ChoiceOption
type MmdbId int64
type BiostrucDescr struct {
	Name		string			`xml:"name" json:"name"`
	PdbComment	string			`xml:"pdb-comment" json:"pdb_comment"`
	OtherComment	string			`xml:"other-comment" json:"other_comment"`
	History		*BiostrucHistory	`xml:"history" json:"history,omitempty"`
	Attribution	*NCBIPub.Pub		`xml:"attribution" json:"attribution,omitempty"`
}
//BiostrucDescr,ChoiceOption
type BiostrucHistory struct {
	Replaces	*BiostrucReplace	`xml:"replaces" json:"replaces,omitempty" asn1:"optional"`
	ReplacedBy	*BiostrucReplace	`xml:"replaced-by" json:"replaced_by,omitempty" asn1:"optional"`
	DataSource	*BiostrucSource		`xml:"data-source" json:"data_source,omitempty" asn1:"optional"`
}
type BiostrucReplace struct {
	Id	*BiostrucId		`xml:"id" json:"id,omitempty"`
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
}
type BiostrucSource struct {
	NameOfDatabase		string	`xml:"name-of-database" json:"name_of_database"`
	VersionOfDatabase	struct {
		ReleaseDate	*NCBIGeneral.Date	`xml:"release-date" json:"release_date,omitempty"`
		ReleaseCode	string			`xml:"release-code" json:"release_code"`
	}						`xml:"version-of-database" json:"version_of_database,omitempty" asn1:"optional"`//VersionOfDatabase,ChoiceOption
	DatabaseEntryId		*BiostrucId		`xml:"database-entry-id" json:"database_entry_id,omitempty"`
	DatabaseEntryDate	*NCBIGeneral.Date	`xml:"database-entry-date" json:"database_entry_date,omitempty"`
	DatabaseEntryHistory	[]string		`xml:"database-entry-history" json:"database_entry_history,omitempty" asn1:"optional"`
}
type BiostrucSet struct {
	Id		[]BiostrucId	`xml:"id" json:"id,omitempty" asn1:"optional"`
	Descr		[]BiostrucDescr	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Biostrucs	[]Biostruc	`xml:"biostrucs" json:"biostrucs,omitempty"`
}
type BiostrucAnnotSet struct {
	Id		[]BiostrucId				`xml:"id" json:"id,omitempty" asn1:"optional"`
	Descr		[]BiostrucDescr				`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Features	[]MMDBFeatures.BiostrucFeatureSet	`xml:"features" json:"features,omitempty"`
}
type BiostrucResidueGraphSet struct {
	Id		[]BiostrucId				`xml:"id" json:"id,omitempty" asn1:"optional"`
	Descr		[]MMDBChemicalGraph.BiomolDescr		`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	ResidueGraphs	[]MMDBChemicalGraph.ResidueGraph	`xml:"residue-graphs" json:"residue_graphs,omitempty"`
}
package MMDBChemicalGraph

import "NCBIPub"
import "NCBIBioSource"
import "NCBISeqloc"
import "MMDB"

type BiostrucGraph struct {
	Descr			[]BiomolDescr		`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	MoleculeGraphs		[]MoleculeGraph		`xml:"molecule-graphs" json:"molecule_graphs,omitempty"`
	InterMoleculeBonds	[]InterResidueBond	`xml:"inter-molecule-bonds" json:"inter_molecule_bonds,omitempty" asn1:"optional"`
	ResidueGraphs		[]ResidueGraph		`xml:"residue-graphs" json:"residue_graphs,omitempty" asn1:"optional"`
}
type BiomolDescr struct {
	Name		string				`xml:"name" json:"name"`
	PdbClass	string				`xml:"pdb-class" json:"pdb_class"`
	PdbSource	string				`xml:"pdb-source" json:"pdb_source"`
	PdbComment	string				`xml:"pdb-comment" json:"pdb_comment"`
	OtherComment	string				`xml:"other-comment" json:"other_comment"`
	Organism	*NCBIBioSource.BioSource	`xml:"organism" json:"organism,omitempty"`
	Attribution	*NCBIPub.Pub			`xml:"attribution" json:"attribution,omitempty"`
	AssemblyType	int				`xml:"assembly-type" json:"assembly_type"`//AssemblyType,IntegerEnum:physiological-form(1),crystallographic-cell(2),other(255)
	MoleculeType	int				`xml:"molecule-type" json:"molecule_type"`//MoleculeType,IntegerEnum:dna(1),rna(2),protein(3),other-biopolymer(4),solvent(5),other-nonpolymer(6),other(255)
}
//BiomolDescr,ChoiceOption
type MoleculeGraph struct {
	Id			*MoleculeId		`xml:"id" json:"id,omitempty"`
	Descr			[]BiomolDescr		`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	SeqId			*NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty" asn1:"optional"`
	ResidueSequence		[]Residue		`xml:"residue-sequence" json:"residue_sequence,omitempty"`
	InterResidueBonds	[]InterResidueBond	`xml:"inter-residue-bonds" json:"inter_residue_bonds,omitempty" asn1:"optional"`
	Sid			*PCSubstanceId		`xml:"sid" json:"sid,omitempty" asn1:"optional"`
}
type MoleculeId int64
type PCSubstanceId int64
type Residue struct {
	Id		*ResidueId		`xml:"id" json:"id,omitempty"`
	Name		string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	ResidueGraph	*ResidueGraphPntr	`xml:"residue-graph" json:"residue_graph,omitempty"`
}
type ResidueId int64
type ResidueGraphPntr struct {
	Local		*ResidueGraphId			`xml:"local" json:"local,omitempty"`
	Biostruc	*BiostrucGraphPntr		`xml:"biostruc" json:"biostruc,omitempty"`
	Standard	*BiostrucResidueGraphSetPntr	`xml:"standard" json:"standard,omitempty"`
}
//ResidueGraphPntr,ChoiceOption
type BiostrucGraphPntr struct {
	BiostrucId	*MMDB.BiostrucId	`xml:"biostruc-id" json:"biostruc_id,omitempty"`
	ResidueGraphId	*ResidueGraphId		`xml:"residue-graph-id" json:"residue_graph_id,omitempty"`
}
type BiostrucResidueGraphSetPntr struct {
	BiostrucResidueGraphSetId	*MMDB.BiostrucId	`xml:"biostruc-residue-graph-set-id" json:"biostruc_residue_graph_set_id,omitempty"`
	ResidueGraphId			*ResidueGraphId		`xml:"residue-graph-id" json:"residue_graph_id,omitempty"`
}
type ResidueGraph struct {
	Id		*ResidueGraphId		`xml:"id" json:"id,omitempty"`
	Descr		[]BiomolDescr		`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	ResidueType	int			`xml:"residue-type" json:"residue_type,omitempty" asn1:"optional"`//ResidueType,IntegerEnum:deoxyribonucleotide(1),ribonucleotide(2),amino-acid(3),other(255)
	IupacCode	[]string		`xml:"iupac-code" json:"iupac_code,omitempty" asn1:"optional"`
	Atoms		[]Atom			`xml:"atoms" json:"atoms,omitempty"`
	Bonds		[]IntraResidueBond	`xml:"bonds" json:"bonds,omitempty"`
	ChiralCenters	[]ChiralCenter		`xml:"chiral-centers" json:"chiral_centers,omitempty" asn1:"optional"`
}
type ResidueGraphId int64
type Atom struct {
	Id		*AtomId		`xml:"id" json:"id,omitempty"`
	Name		string		`xml:"name" json:"name,omitempty" asn1:"optional"`
	IupacCode	[]string	`xml:"iupac-code" json:"iupac_code,omitempty" asn1:"optional"`
	Element		string		`xml:"element" json:"element"`//Element,EnumList:h(1),he(2),li(3),be(4),b(5),c(6),n(7),o(8),f(9),ne(10),na(11),mg(12),al(13),si(14),p(15),s(16),cl(17),ar(18),k(19),ca(20),sc(21),ti(22),v(23),cr(24),mn(25),fe(26),co(27),ni(28),cu(29),zn(30),ga(31),ge(32),as(33),se(34),br(35),kr(36),rb(37),sr(38),y(39),zr(40),nb(41),mo(42),tc(43),ru(44),rh(45),pd(46),ag(47),cd(48),in(49),sn(50),sb(51),te(52),i(53),xe(54),cs(55),ba(56),la(57),ce(58),pr(59),nd(60),pm(61),sm(62),eu(63),gd(64),tb(65),dy(66),ho(67),er(68),tm(69),yb(70),lu(71),hf(72),ta(73),w(74),re(75),os(76),ir(77),pt(78),au(79),hg(80),tl(81),pb(82),bi(83),po(84),at(85),rn(86),fr(87),ra(88),ac(89),th(90),pa(91),u(92),np(93),pu(94),am(95),cm(96),bk(97),cf(98),es(99),fm(100),md(101),no(102),lr(103),other(254),unknown(255)
	IonizableProton	string		`xml:"ionizable-proton" json:"ionizable_proton,omitempty" asn1:"optional"`//IonizableProton,EnumList:true(1),false(2),unknown(255)
}
type AtomId int64
type IntraResidueBond struct {
	AtomId1		*AtomId	`xml:"atom-id-1" json:"atom_id_1,omitempty"`
	AtomId2		*AtomId	`xml:"atom-id-2" json:"atom_id_2,omitempty"`
	BondOrder	int	`xml:"bond-order" json:"bond_order,omitempty" asn1:"optional"`//BondOrder,IntegerEnum:single(1),partial-double(2),aromatic(3),double(4),triple(5),other(6),unknown(255)
}
type ChiralCenter struct {
	C	*AtomId	`xml:"c" json:"c,omitempty"`
	N1	*AtomId	`xml:"n1" json:"n1,omitempty"`
	N2	*AtomId	`xml:"n2" json:"n2,omitempty"`
	N3	*AtomId	`xml:"n3" json:"n3,omitempty"`
	Sign	string	`xml:"sign" json:"sign"`//Sign,EnumList:positive(1),negative(2)
}
type InterResidueBond struct {
	AtomId1		*AtomPntr	`xml:"atom-id-1" json:"atom_id_1,omitempty"`
	AtomId2		*AtomPntr	`xml:"atom-id-2" json:"atom_id_2,omitempty"`
	BondOrder	int		`xml:"bond-order" json:"bond_order,omitempty" asn1:"optional"`//BondOrder,IntegerEnum:single(1),partial-double(2),aromatic(3),double(4),triple(5),other(6),unknown(255)
}
type AtomPntr struct {
	MoleculeId	*MoleculeId	`xml:"molecule-id" json:"molecule_id,omitempty"`
	ResidueId	*ResidueId	`xml:"residue-id" json:"residue_id,omitempty"`
	AtomId		*AtomId		`xml:"atom-id" json:"atom_id,omitempty"`
}
type AtomPntrSet []AtomPntr
package MMDBStructuralModel

import "MMDBFeatures"
import "MMDB"
import "NCBIPub"

type BiostrucModel struct {
	Id			*ModelId		`xml:"id" json:"id,omitempty"`
	Type			*ModelType		`xml:"type" json:"type,omitempty"`
	Descr			[]ModelDescr		`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	ModelSpace		*ModelSpace		`xml:"model-space" json:"model_space,omitempty" asn1:"optional"`
	ModelCoordinates	[]ModelCoordinateSet	`xml:"model-coordinates" json:"model_coordinates,omitempty" asn1:"optional"`
}
type ModelId int64
type ModelType int
//ModelType,IntegerEnum:ncbi-vector(1),ncbi-backbone(2),ncbi-all-atom(3),pdb-model(4),other(255)
type ModelDescr struct {
	Name		string		`xml:"name" json:"name"`
	PdbReso		string		`xml:"pdb-reso" json:"pdb_reso"`
	PdbMethod	string		`xml:"pdb-method" json:"pdb_method"`
	PdbComment	string		`xml:"pdb-comment" json:"pdb_comment"`
	OtherComment	string		`xml:"other-comment" json:"other_comment"`
	Attribution	*NCBIPub.Pub	`xml:"attribution" json:"attribution,omitempty"`
}
//ModelDescr,ChoiceOption
type ModelSpace struct {
	CoordinateUnits		string		`xml:"coordinate-units" json:"coordinate_units"`//CoordinateUnits,EnumList:angstroms(1),nanometers(2),other(3),unknown(255)
	ThermalFactorUnits	string		`xml:"thermal-factor-units" json:"thermal_factor_units,omitempty" asn1:"optional"`//ThermalFactorUnits,EnumList:b(1),u(2),other(3),unknown(255)
	OccupancyFactorUnits	string		`xml:"occupancy-factor-units" json:"occupancy_factor_units,omitempty" asn1:"optional"`//OccupancyFactorUnits,EnumList:fractional(1),electrons(2),other(3),unknown(255)
	DensityUnits		string		`xml:"density-units" json:"density_units,omitempty" asn1:"optional"`//DensityUnits,EnumList:electrons-per-unit-volume(1),arbitrary-scale(2),other(3),unknown(255)
	ReferenceFrame		*ReferenceFrame	`xml:"reference-frame" json:"reference_frame,omitempty" asn1:"optional"`
}
type ReferenceFrame struct {
	BiostrucId		*MMDB.BiostrucId	`xml:"biostruc-id" json:"biostruc_id,omitempty"`
	RotationTranslation	*MMDBFeatures.Transform	`xml:"rotation-translation" json:"rotation_translation,omitempty" asn1:"optional"`
}
type ModelCoordinateSet struct {
	Id		*ModelCoordinateSetId	`xml:"id" json:"id,omitempty" asn1:"optional"`
	Descr		[]ModelDescr		`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Coordinates	struct {
		Literal		*Coordinates				`xml:"literal" json:"literal,omitempty"`
		Reference	*MMDBFeatures.ChemGraphAlignment	`xml:"reference" json:"reference,omitempty"`
	}	`xml:"coordinates" json:"coordinates"`//Coordinates,ChoiceOption
}
type ModelCoordinateSetId int64
type Coordinates struct {
	Atomic	*AtomicCoordinates	`xml:"atomic" json:"atomic,omitempty"`
	Surface	*SurfaceCoordinates	`xml:"surface" json:"surface,omitempty"`
	Density	*DensityCoordinates	`xml:"density" json:"density,omitempty"`
}
//Coordinates,ChoiceOption
type AtomicCoordinates struct {
	NumberOfPoints		int64				`xml:"number-of-points" json:"number_of_points"`
	Atoms			*MMDBFeatures.AtomPntrs		`xml:"atoms" json:"atoms,omitempty"`
	Sites			*ModelSpacePoints		`xml:"sites" json:"sites,omitempty"`
	TemperatureFactors	*AtomicTemperatureFactors	`xml:"temperature-factors" json:"temperature_factors,omitempty" asn1:"optional"`
	Occupancies		*AtomicOccupancies		`xml:"occupancies" json:"occupancies,omitempty" asn1:"optional"`
	AlternateConfIds	*AlternateConformationIds	`xml:"alternate-conf-ids" json:"alternate_conf_ids,omitempty" asn1:"optional"`
	ConfEnsembles		[]ConformationEnsemble		`xml:"conf-ensembles" json:"conf_ensembles,omitempty" asn1:"optional"`
}
type ModelSpacePoints struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	X		[]int64	`xml:"x" json:"x,omitempty"`
	Y		[]int64	`xml:"y" json:"y,omitempty"`
	Z		[]int64	`xml:"z" json:"z,omitempty"`
}
type AtomicTemperatureFactors struct {
	Isotropic	*IsotropicTemperatureFactors	`xml:"isotropic" json:"isotropic,omitempty"`
	Anisotropic	*AnisotropicTemperatureFactors	`xml:"anisotropic" json:"anisotropic,omitempty"`
}
//AtomicTemperatureFactors,ChoiceOption
type IsotropicTemperatureFactors struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	B		[]int64	`xml:"b" json:"b,omitempty"`
}
type AnisotropicTemperatureFactors struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	B11		[]int64	`xml:"b-11" json:"b_11,omitempty"`
	B12		[]int64	`xml:"b-12" json:"b_12,omitempty"`
	B13		[]int64	`xml:"b-13" json:"b_13,omitempty"`
	B22		[]int64	`xml:"b-22" json:"b_22,omitempty"`
	B23		[]int64	`xml:"b-23" json:"b_23,omitempty"`
	B33		[]int64	`xml:"b-33" json:"b_33,omitempty"`
}
type AtomicOccupancies struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	O		[]int64	`xml:"o" json:"o,omitempty"`
}
type AlternateConformationIds []AlternateConformationId
type AlternateConformationId string
type ConformationEnsemble struct {
	Name		string				`xml:"name" json:"name"`
	AltConfIds	[]AlternateConformationId	`xml:"alt-conf-ids" json:"alt_conf_ids,omitempty"`
}
type SurfaceCoordinates struct {
	Contents	*MMDBFeatures.ChemGraphPntrs	`xml:"contents" json:"contents,omitempty"`
	Surface		struct {
		Sphere		*MMDBFeatures.Sphere	`xml:"sphere" json:"sphere,omitempty"`
		Cone		*MMDBFeatures.Cone	`xml:"cone" json:"cone,omitempty"`
		Cylinder	*MMDBFeatures.Cylinder	`xml:"cylinder" json:"cylinder,omitempty"`
		Brick		*MMDBFeatures.Brick	`xml:"brick" json:"brick,omitempty"`
		Tmesh		*TMesh			`xml:"tmesh" json:"tmesh,omitempty"`
		Triangles	*Triangles		`xml:"triangles" json:"triangles,omitempty"`
	}	`xml:"surface" json:"surface"`//Surface,ChoiceOption
}
type TMesh struct {
	NumberOfPoints	int64	`xml:"number-of-points" json:"number_of_points"`
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	Swap		[]bool	`xml:"swap" json:"swap,omitempty"`
	X		[]int64	`xml:"x" json:"x,omitempty"`
	Y		[]int64	`xml:"y" json:"y,omitempty"`
	Z		[]int64	`xml:"z" json:"z,omitempty"`
}
type Triangles struct {
	NumberOfPoints		int64	`xml:"number-of-points" json:"number_of_points"`
	ScaleFactor		int64	`xml:"scale-factor" json:"scale_factor"`
	X			[]int64	`xml:"x" json:"x,omitempty"`
	Y			[]int64	`xml:"y" json:"y,omitempty"`
	Z			[]int64	`xml:"z" json:"z,omitempty"`
	NumberOfTriangles	int64	`xml:"number-of-triangles" json:"number_of_triangles"`
	V1			[]int64	`xml:"v1" json:"v1,omitempty"`
	V2			[]int64	`xml:"v2" json:"v2,omitempty"`
	V3			[]int64	`xml:"v3" json:"v3,omitempty"`
}
type DensityCoordinates struct {
	Contents	*MMDBFeatures.ChemGraphPntrs	`xml:"contents" json:"contents,omitempty"`
	GridCorners	*MMDBFeatures.Brick		`xml:"grid-corners" json:"grid_corners,omitempty"`
	GridStepsX	int64				`xml:"grid-steps-x" json:"grid_steps_x"`
	GridStepsY	int64				`xml:"grid-steps-y" json:"grid_steps_y"`
	GridStepsZ	int64				`xml:"grid-steps-z" json:"grid_steps_z"`
	FastestVarying	string				`xml:"fastest-varying" json:"fastest_varying"`//FastestVarying,EnumList:x(1),y(2),z(3)
	SlowestVarying	string				`xml:"slowest-varying" json:"slowest_varying"`//SlowestVarying,EnumList:x(1),y(2),z(3)
	ScaleFactor	int64				`xml:"scale-factor" json:"scale_factor"`
	Density		[]int64				`xml:"density" json:"density,omitempty"`
}
package MMDBFeatures

import "MMDB"
import "MMDBChemicalGraph"
import "MMDBStructuralModel"
import "NCBIGeneral"
import "NCBIPub"

type BiostrucFeatureSet struct {
	Id		*BiostrucFeatureSetId		`xml:"id" json:"id,omitempty"`
	Descr		[]BiostrucFeatureSetDescr	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Features	[]BiostrucFeature		`xml:"features" json:"features,omitempty"`
}
type BiostrucFeatureSetId int64
type BiostrucFeatureSetDescr struct {
	Name		string		`xml:"name" json:"name"`
	PdbComment	string		`xml:"pdb-comment" json:"pdb_comment"`
	OtherComment	string		`xml:"other-comment" json:"other_comment"`
	Attribution	*NCBIPub.Pub	`xml:"attribution" json:"attribution,omitempty"`
}
//BiostrucFeatureSetDescr,ChoiceOption
type BiostrucFeature struct {
	Id		*BiostrucFeatureId	`xml:"id" json:"id,omitempty" asn1:"optional"`
	Name		string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Type		int			`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:helix(1),strand(2),sheet(3),turn(4),site(5),footnote(6),comment(7),interaction(8),subgraph(100),region(101),core(102),supercore(103),color(150),render(151),label(152),transform(153),camera(154),script(155),alignment(200),similarity(201),multalign(202),indirect(203),cn3dstate(254),other(255)
	Property	struct {
		Color		*ColorProp		`xml:"color" json:"color,omitempty"`
		Render		*RenderProp		`xml:"render" json:"render,omitempty"`
		Transform	*Transform		`xml:"transform" json:"transform,omitempty"`
		Camera		*Camera			`xml:"camera" json:"camera,omitempty"`
		Script		*BiostrucScript		`xml:"script" json:"script,omitempty"`
		User		*NCBIGeneral.UserObject	`xml:"user" json:"user,omitempty"`
	}		`xml:"property" json:"property,omitempty" asn1:"optional"`//Property,ChoiceOption
	Location	struct {
		Subgraph	*ChemGraphPntrs		`xml:"subgraph" json:"subgraph,omitempty"`
		Region		*RegionPntrs		`xml:"region" json:"region,omitempty"`
		Alignment	*ChemGraphAlignment	`xml:"alignment" json:"alignment,omitempty"`
		Interaction	*ChemGraphInteraction	`xml:"interaction" json:"interaction,omitempty"`
		Similarity	*RegionSimilarity	`xml:"similarity" json:"similarity,omitempty"`
		Indirect	*OtherFeature		`xml:"indirect" json:"indirect,omitempty"`
	}	`xml:"location" json:"location,omitempty" asn1:"optional"`//Location,ChoiceOption
}
type OtherFeature struct {
	BiostrucId	*MMDB.BiostrucId	`xml:"biostruc-id" json:"biostruc_id,omitempty"`
	Set		*BiostrucFeatureSetId	`xml:"set" json:"set,omitempty"`
	Feature		*BiostrucFeatureId	`xml:"feature" json:"feature,omitempty"`
}
type BiostrucFeatureId int64
type BiostrucMoleculePntr struct {
	BiostrucId	*MMDB.BiostrucId		`xml:"biostruc-id" json:"biostruc_id,omitempty"`
	MoleculeId	*MMDBChemicalGraph.MoleculeId	`xml:"molecule-id" json:"molecule_id,omitempty"`
}
type ChemGraphPntrs struct {
	Atoms		*AtomPntrs	`xml:"atoms" json:"atoms,omitempty"`
	Residues	*ResiduePntrs	`xml:"residues" json:"residues,omitempty"`
	Molecules	*MoleculePntrs	`xml:"molecules" json:"molecules,omitempty"`
}
//ChemGraphPntrs,ChoiceOption
type AtomPntrs struct {
	NumberOfPtrs	int64				`xml:"number-of-ptrs" json:"number_of_ptrs"`
	MoleculeIds	[]MMDBChemicalGraph.MoleculeId	`xml:"molecule-ids" json:"molecule_ids,omitempty"`
	ResidueIds	[]MMDBChemicalGraph.ResidueId	`xml:"residue-ids" json:"residue_ids,omitempty"`
	AtomIds		[]MMDBChemicalGraph.AtomId	`xml:"atom-ids" json:"atom_ids,omitempty"`
}
type ResiduePntrs struct {
	Explicit	*ResidueExplicitPntrs	`xml:"explicit" json:"explicit,omitempty"`
	Interval	[]ResidueIntervalPntr	`xml:"interval" json:"interval,omitempty"`
}
//ResiduePntrs,ChoiceOption
type ResidueExplicitPntrs struct {
	NumberOfPtrs	int64				`xml:"number-of-ptrs" json:"number_of_ptrs"`
	MoleculeIds	[]MMDBChemicalGraph.MoleculeId	`xml:"molecule-ids" json:"molecule_ids,omitempty"`
	ResidueIds	[]MMDBChemicalGraph.ResidueId	`xml:"residue-ids" json:"residue_ids,omitempty"`
}
type ResidueIntervalPntr struct {
	MoleculeId	*MMDBChemicalGraph.MoleculeId	`xml:"molecule-id" json:"molecule_id,omitempty"`
	From		*MMDBChemicalGraph.ResidueId	`xml:"from" json:"from,omitempty"`
	To		*MMDBChemicalGraph.ResidueId	`xml:"to" json:"to,omitempty"`
}
type MoleculePntrs struct {
	NumberOfPtrs	int64				`xml:"number-of-ptrs" json:"number_of_ptrs"`
	MoleculeIds	[]MMDBChemicalGraph.MoleculeId	`xml:"molecule-ids" json:"molecule_ids,omitempty"`
}
type RegionPntrs struct {
	ModelId	*MMDBStructuralModel.ModelId	`xml:"model-id" json:"model_id,omitempty"`
	Region	struct {
		Site		[]RegionCoordinates	`xml:"site" json:"site,omitempty"`
		Boundary	[]RegionBoundary	`xml:"boundary" json:"boundary,omitempty"`
	}	`xml:"region" json:"region"`//Region,ChoiceOption
}
type RegionCoordinates struct {
	ModelCoordSetId		*MMDBStructuralModel.ModelCoordinateSetId	`xml:"model-coord-set-id" json:"model_coord_set_id,omitempty"`
	NumberOfCoords		int64						`xml:"number-of-coords" json:"number_of_coords,omitempty" asn1:"optional"`
	CoordinateIndices	[]int64						`xml:"coordinate-indices" json:"coordinate_indices,omitempty" asn1:"optional"`
}
type RegionBoundary struct {
	Sphere		*Sphere		`xml:"sphere" json:"sphere,omitempty"`
	Cone		*Cone		`xml:"cone" json:"cone,omitempty"`
	Cylinder	*Cylinder	`xml:"cylinder" json:"cylinder,omitempty"`
	Brick		*Brick		`xml:"brick" json:"brick,omitempty"`
}
//RegionBoundary,ChoiceOption
type ChemGraphAlignment struct {
	Dimension	int64			`xml:"dimension" json:"dimension" asn1:"default:2"`
	BiostrucIds	[]MMDB.BiostrucId	`xml:"biostruc-ids" json:"biostruc_ids,omitempty"`
	Alignment	[]ChemGraphPntrs	`xml:"alignment" json:"alignment,omitempty"`
	Domain		[]ChemGraphPntrs	`xml:"domain" json:"domain,omitempty" asn1:"optional"`
	Transform	[]Transform		`xml:"transform" json:"transform,omitempty" asn1:"optional"`
	Aligndata	[]AlignStats		`xml:"aligndata" json:"aligndata,omitempty" asn1:"optional"`
}
type ChemGraphInteraction struct {
	Type			int			`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:protein-protein(1),protein-dna(2),protein-rna(3),protein-chemical(4),dna-dna(5),dna-rna(6),dna-chemical(7),rna-rna(8),rna-chemical(9),other(255)
	DistanceThreshold	*RealValue		`xml:"distance-threshold" json:"distance_threshold,omitempty" asn1:"optional"`
	Interactors		[]BiostrucMoleculePntr	`xml:"interactors" json:"interactors,omitempty"`
	ResidueContacts		[]ChemGraphPntrs	`xml:"residue-contacts" json:"residue_contacts,omitempty" asn1:"optional"`
	AtomContacts		[]ChemGraphPntrs	`xml:"atom-contacts" json:"atom_contacts,omitempty" asn1:"optional"`
	AtomDistance		[]RealValue		`xml:"atom-distance" json:"atom_distance,omitempty" asn1:"optional"`
}
type AlignStats struct {
	Descr		string	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor,omitempty" asn1:"optional"`
	VastScore	int64	`xml:"vast-score" json:"vast_score,omitempty" asn1:"optional"`
	VastMlogp	int64	`xml:"vast-mlogp" json:"vast_mlogp,omitempty" asn1:"optional"`
	AlignRes	int64	`xml:"align-res" json:"align_res,omitempty" asn1:"optional"`
	Rmsd		int64	`xml:"rmsd" json:"rmsd,omitempty" asn1:"optional"`
	BlastScore	int64	`xml:"blast-score" json:"blast_score,omitempty" asn1:"optional"`
	BlastMlogp	int64	`xml:"blast-mlogp" json:"blast_mlogp,omitempty" asn1:"optional"`
	OtherScore	int64	`xml:"other-score" json:"other_score,omitempty" asn1:"optional"`
}
type RegionSimilarity struct {
	Dimension	int64			`xml:"dimension" json:"dimension" asn1:"default:2"`
	BiostrucIds	[]MMDB.BiostrucId	`xml:"biostruc-ids" json:"biostruc_ids,omitempty"`
	Similarity	[]RegionPntrs		`xml:"similarity" json:"similarity,omitempty"`
	Transform	[]Transform		`xml:"transform" json:"transform,omitempty"`
}
type Sphere struct {
	Center	*ModelSpacePoint	`xml:"center" json:"center,omitempty"`
	Radius	*RealValue		`xml:"radius" json:"radius,omitempty"`
}
type Cone struct {
	AxisTop		*ModelSpacePoint	`xml:"axis-top" json:"axis_top,omitempty"`
	AxisBottom	*ModelSpacePoint	`xml:"axis-bottom" json:"axis_bottom,omitempty"`
	RadiusBottom	*RealValue		`xml:"radius-bottom" json:"radius_bottom,omitempty"`
}
type Cylinder struct {
	AxisTop		*ModelSpacePoint	`xml:"axis-top" json:"axis_top,omitempty"`
	AxisBottom	*ModelSpacePoint	`xml:"axis-bottom" json:"axis_bottom,omitempty"`
	Radius		*RealValue		`xml:"radius" json:"radius,omitempty"`
}
type Brick struct {
	Corner000	*ModelSpacePoint	`xml:"corner-000" json:"corner_000,omitempty"`
	Corner001	*ModelSpacePoint	`xml:"corner-001" json:"corner_001,omitempty"`
	Corner010	*ModelSpacePoint	`xml:"corner-010" json:"corner_010,omitempty"`
	Corner011	*ModelSpacePoint	`xml:"corner-011" json:"corner_011,omitempty"`
	Corner100	*ModelSpacePoint	`xml:"corner-100" json:"corner_100,omitempty"`
	Corner101	*ModelSpacePoint	`xml:"corner-101" json:"corner_101,omitempty"`
	Corner110	*ModelSpacePoint	`xml:"corner-110" json:"corner_110,omitempty"`
	Corner111	*ModelSpacePoint	`xml:"corner-111" json:"corner_111,omitempty"`
}
type ModelSpacePoint struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	X		int64	`xml:"x" json:"x"`
	Y		int64	`xml:"y" json:"y"`
	Z		int64	`xml:"z" json:"z"`
}
type RealValue struct {
	ScaleFactor		int64	`xml:"scale-factor" json:"scale_factor"`
	ScaledIntegerValue	int64	`xml:"scaled-integer-value" json:"scaled_integer_value"`
}
type Transform struct {
	Id	int64	`xml:"id" json:"id"`
	Moves	[]Move	`xml:"moves" json:"moves,omitempty"`
}
type Move struct {
	Rotate		*RotMatrix	`xml:"rotate" json:"rotate,omitempty"`
	Translate	*TransMatrix	`xml:"translate" json:"translate,omitempty"`
}
//Move,ChoiceOption
type RotMatrix struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	Rot11		int64	`xml:"rot-11" json:"rot_11"`
	Rot12		int64	`xml:"rot-12" json:"rot_12"`
	Rot13		int64	`xml:"rot-13" json:"rot_13"`
	Rot21		int64	`xml:"rot-21" json:"rot_21"`
	Rot22		int64	`xml:"rot-22" json:"rot_22"`
	Rot23		int64	`xml:"rot-23" json:"rot_23"`
	Rot31		int64	`xml:"rot-31" json:"rot_31"`
	Rot32		int64	`xml:"rot-32" json:"rot_32"`
	Rot33		int64	`xml:"rot-33" json:"rot_33"`
}
type TransMatrix struct {
	ScaleFactor	int64	`xml:"scale-factor" json:"scale_factor"`
	Tran1		int64	`xml:"tran-1" json:"tran_1"`
	Tran2		int64	`xml:"tran-2" json:"tran_2"`
	Tran3		int64	`xml:"tran-3" json:"tran_3"`
}
type Camera struct {
	X		int64		`xml:"x" json:"x"`
	Y		int64		`xml:"y" json:"y"`
	Distance	int64		`xml:"distance" json:"distance"`
	Angle		int64		`xml:"angle" json:"angle"`
	Scale		int64		`xml:"scale" json:"scale"`
	Modelview	*GLMatrix	`xml:"modelview" json:"modelview,omitempty"`
}
type GLMatrix struct {
	Scale	int64	`xml:"scale" json:"scale"`
	M11	int64	`xml:"m11" json:"m11"`
	M12	int64	`xml:"m12" json:"m12"`
	M13	int64	`xml:"m13" json:"m13"`
	M14	int64	`xml:"m14" json:"m14"`
	M21	int64	`xml:"m21" json:"m21"`
	M22	int64	`xml:"m22" json:"m22"`
	M23	int64	`xml:"m23" json:"m23"`
	M24	int64	`xml:"m24" json:"m24"`
	M31	int64	`xml:"m31" json:"m31"`
	M32	int64	`xml:"m32" json:"m32"`
	M33	int64	`xml:"m33" json:"m33"`
	M34	int64	`xml:"m34" json:"m34"`
	M41	int64	`xml:"m41" json:"m41"`
	M42	int64	`xml:"m42" json:"m42"`
	M43	int64	`xml:"m43" json:"m43"`
	M44	int64	`xml:"m44" json:"m44"`
}
type ColorProp struct {
	R	int64	`xml:"r" json:"r,omitempty" asn1:"optional"`
	G	int64	`xml:"g" json:"g,omitempty" asn1:"optional"`
	B	int64	`xml:"b" json:"b,omitempty" asn1:"optional"`
	Name	string	`xml:"name" json:"name,omitempty" asn1:"optional"`
}
type RenderProp int
//RenderProp,IntegerEnum:default(0),wire(1),space(2),stick(3),ballNStick(4),thickWire(5),hide(9),name(10),number(11),pdbNumber(12),objWireFrame(150),objPolygons(151),colorsetCPK(225),colorsetbyChain(226),colorsetbyTemp(227),colorsetbyRes(228),colorsetbyLen(229),colorsetbySStru(230),colorsetbyHydro(231),colorsetbyObject(246),colorsetbyDomain(247),other(255)
type BiostrucScript []BiostrucScriptStep
type BiostrucScriptStep struct {
	StepId		*StepId		`xml:"step-id" json:"step_id,omitempty"`
	StepName	string		`xml:"step-name" json:"step_name,omitempty" asn1:"optional"`
	FeatureDo	[]OtherFeature	`xml:"feature-do" json:"feature_do,omitempty" asn1:"optional"`
	CameraMove	*Transform	`xml:"camera-move" json:"camera_move,omitempty" asn1:"optional"`
	Pause		int64		`xml:"pause" json:"pause" asn1:"default:10"`
	Waitevent	bool		`xml:"waitevent" json:"waitevent"`
	Extra		int64		`xml:"extra" json:"extra"`
	Jump		*StepId		`xml:"jump" json:"jump,omitempty" asn1:"optional"`
}
type StepId int64
package NCBIMime

import "MMDB"
import "NCBICdd"
import "NCBISeqset"
import "NCBISequence"
import "NCBIMedline"
import "NCBICn3d"

type NcbiMimeAsn1 struct {
	Entrez		*EntrezGeneral		`xml:"entrez" json:"entrez,omitempty"`
	Alignstruc	*BiostrucAlign		`xml:"alignstruc" json:"alignstruc,omitempty"`
	Alignseq	*BiostrucAlignSeq	`xml:"alignseq" json:"alignseq,omitempty"`
	Strucseq	*BiostrucSeq		`xml:"strucseq" json:"strucseq,omitempty"`
	Strucseqs	*BiostrucSeqs		`xml:"strucseqs" json:"strucseqs,omitempty"`
	General		*BiostrucSeqsAlignsCdd	`xml:"general" json:"general,omitempty"`
}
//NcbiMimeAsn1,ChoiceOption
type BundleSeqsAligns struct {
	Sequences	[]NCBISeqset.SeqEntry		`xml:"sequences" json:"sequences,omitempty" asn1:"optional"`
	Seqaligns	[]NCBISequence.SeqAnnot		`xml:"seqaligns" json:"seqaligns,omitempty" asn1:"optional"`
	Strucaligns	*MMDB.BiostrucAnnotSet		`xml:"strucaligns" json:"strucaligns,omitempty" asn1:"optional"`
	Imports		[]NCBISequence.SeqAnnot		`xml:"imports" json:"imports,omitempty" asn1:"optional"`
	StyleDictionary	*NCBICn3d.Cn3dStyleDictionary	`xml:"style-dictionary" json:"style_dictionary,omitempty" asn1:"optional"`
	UserAnnotations	*NCBICn3d.Cn3dUserAnnotations	`xml:"user-annotations" json:"user_annotations,omitempty" asn1:"optional"`
}
type BiostrucSeqsAlignsCdd struct {
	SeqAlignData	struct {
		Bundle	*BundleSeqsAligns	`xml:"bundle" json:"bundle,omitempty"`
		Cdd	*NCBICdd.Cdd		`xml:"cdd" json:"cdd,omitempty"`
	}				`xml:"seq-align-data" json:"seq_align_data"`//SeqAlignData,ChoiceOption
	Structures	[]MMDB.Biostruc	`xml:"structures" json:"structures,omitempty" asn1:"optional"`
	StructureType	string		`xml:"structure-type" json:"structure_type,omitempty" asn1:"optional"`//StructureType,EnumList:ncbi-backbone(2),ncbi-all-atom(3),pdb-model(4)
}
type BiostrucAlign struct {
	Master		*MMDB.Biostruc			`xml:"master" json:"master,omitempty"`
	Slaves		[]MMDB.Biostruc			`xml:"slaves" json:"slaves,omitempty"`
	Alignments	*MMDB.BiostrucAnnotSet		`xml:"alignments" json:"alignments,omitempty"`
	Sequences	[]NCBISeqset.SeqEntry		`xml:"sequences" json:"sequences,omitempty"`
	Seqalign	[]NCBISequence.SeqAnnot		`xml:"seqalign" json:"seqalign,omitempty"`
	StyleDictionary	*NCBICn3d.Cn3dStyleDictionary	`xml:"style-dictionary" json:"style_dictionary,omitempty" asn1:"optional"`
	UserAnnotations	*NCBICn3d.Cn3dUserAnnotations	`xml:"user-annotations" json:"user_annotations,omitempty" asn1:"optional"`
}
type BiostrucAlignSeq struct {
	Sequences	[]NCBISeqset.SeqEntry		`xml:"sequences" json:"sequences,omitempty"`
	Seqalign	[]NCBISequence.SeqAnnot		`xml:"seqalign" json:"seqalign,omitempty"`
	StyleDictionary	*NCBICn3d.Cn3dStyleDictionary	`xml:"style-dictionary" json:"style_dictionary,omitempty" asn1:"optional"`
	UserAnnotations	*NCBICn3d.Cn3dUserAnnotations	`xml:"user-annotations" json:"user_annotations,omitempty" asn1:"optional"`
}
type BiostrucSeq struct {
	Structure	*MMDB.Biostruc			`xml:"structure" json:"structure,omitempty"`
	Sequences	[]NCBISeqset.SeqEntry		`xml:"sequences" json:"sequences,omitempty"`
	StyleDictionary	*NCBICn3d.Cn3dStyleDictionary	`xml:"style-dictionary" json:"style_dictionary,omitempty" asn1:"optional"`
	UserAnnotations	*NCBICn3d.Cn3dUserAnnotations	`xml:"user-annotations" json:"user_annotations,omitempty" asn1:"optional"`
}
type BiostrucSeqs struct {
	Structure	*MMDB.Biostruc			`xml:"structure" json:"structure,omitempty"`
	Sequences	[]NCBISeqset.SeqEntry		`xml:"sequences" json:"sequences,omitempty"`
	Seqalign	[]NCBISequence.SeqAnnot		`xml:"seqalign" json:"seqalign,omitempty"`
	StyleDictionary	*NCBICn3d.Cn3dStyleDictionary	`xml:"style-dictionary" json:"style_dictionary,omitempty" asn1:"optional"`
	UserAnnotations	*NCBICn3d.Cn3dUserAnnotations	`xml:"user-annotations" json:"user_annotations,omitempty" asn1:"optional"`
}
type EntrezStyle string
//EntrezStyle,EnumList:docsum(1),genbank(2),genpept(3),fasta(4),asn1(5),graphic(6),alignment(7),globalview(8),report(9),medlars(10),embl(11),pdb(12),kinemage(13)
type EntrezGeneral struct {
	Title	string	`xml:"title" json:"title,omitempty" asn1:"optional"`
	Data	struct {
		Ml		*NCBIMedline.MedlineEntry	`xml:"ml" json:"ml,omitempty"`
		Prot		*NCBISeqset.SeqEntry		`xml:"prot" json:"prot,omitempty"`
		Nuc		*NCBISeqset.SeqEntry		`xml:"nuc" json:"nuc,omitempty"`
		Genome		*NCBISeqset.SeqEntry		`xml:"genome" json:"genome,omitempty"`
		Structure	*MMDB.Biostruc			`xml:"structure" json:"structure,omitempty"`
		StrucAnnot	*MMDB.BiostrucAnnotSet		`xml:"strucAnnot" json:"strucAnnot,omitempty"`
	}				`xml:"data" json:"data"`//Data,ChoiceOption
	Style		*EntrezStyle	`xml:"style" json:"style,omitempty"`
	Location	string		`xml:"location" json:"location,omitempty" asn1:"optional"`
}
package NCBIObjPrt

type PrintTemplate struct {
	Name		*TemplateName	`xml:"name" json:"name,omitempty"`
	Labelfrom	string		`xml:"labelfrom" json:"labelfrom,omitempty" asn1:"optional"`
	Format		*PrintFormat	`xml:"format" json:"format,omitempty"`
}
type TemplateName string
type PrintTemplateSet []PrintTemplate
type PrintFormat struct {
	Asn1	string		`xml:"asn1" json:"asn1"`
	Label	string		`xml:"label" json:"label,omitempty" asn1:"optional"`
	Prefix	string		`xml:"prefix" json:"prefix,omitempty" asn1:"optional"`
	Suffix	string		`xml:"suffix" json:"suffix,omitempty" asn1:"optional"`
	Form	*PrintForm	`xml:"form" json:"form,omitempty"`
}
type PrintForm struct {
	Block		*PrintFormBlock		`xml:"block" json:"block,omitempty"`
	Boolean		*PrintFormBoolean	`xml:"boolean" json:"boolean,omitempty"`
	Enum		*PrintFormEnum		`xml:"enum" json:"enum,omitempty"`
	Text		*PrintFormText		`xml:"text" json:"text,omitempty"`
	UseTemplate	*TemplateName		`xml:"use-template" json:"use_template,omitempty"`
	User		*UserFormat		`xml:"user" json:"user,omitempty"`
	Null		interface{}		`xml:"null" json:"null"`
}
//PrintForm,ChoiceOption
type UserFormat struct {
	Printfunc	string	`xml:"printfunc" json:"printfunc"`
	Defaultfunc	string	`xml:"defaultfunc" json:"defaultfunc,omitempty" asn1:"optional"`
}
type PrintFormBlock struct {
	Separator	string		`xml:"separator" json:"separator,omitempty" asn1:"optional"`
	Components	[]PrintFormat	`xml:"components" json:"components,omitempty"`
}
type PrintFormBoolean struct {
	True	string	`xml:"true" json:"true,omitempty" asn1:"optional"`
	False	string	`xml:"false" json:"false,omitempty" asn1:"optional"`
}
type PrintFormEnum struct {
	Values []string `xml:"values" json:"values,omitempty" asn1:"optional"`
}
type PrintFormText struct {
	Textfunc string `xml:"textfunc" json:"textfunc,omitempty" asn1:"optional"`
}
package OMSSA

import "NCBISequence"

type NameValue struct {
	Name	string	`xml:"name" json:"name"`
	Value	string	`xml:"value" json:"value"`
}
type MSSpectrum struct {
	Number		int64		`xml:"number" json:"number"`
	Charge		[]int64		`xml:"charge" json:"charge,omitempty"`
	Precursormz	int64		`xml:"precursormz" json:"precursormz"`
	Mz		[]int64		`xml:"mz" json:"mz,omitempty"`
	Abundance	[]int64		`xml:"abundance" json:"abundance,omitempty"`
	Iscale		float64		`xml:"iscale" json:"iscale"`
	Ids		[]string	`xml:"ids" json:"ids,omitempty" asn1:"optional"`
	Namevalue	[]NameValue	`xml:"namevalue" json:"namevalue,omitempty" asn1:"optional"`
}
type MSSpectrumset []MSSpectrum
type MSEnzymes int
//MSEnzymes,IntegerEnum:trypsin(0),argc(1),cnbr(2),chymotrypsin(3),formicacid(4),lysc(5),lysc-p(6),pepsin-a(7),tryp-cnbr(8),tryp-chymo(9),trypsin-p(10),whole-protein(11),aspn(12),gluc(13),aspngluc(14),top-down(15),semi-tryptic(16),no-enzyme(17),chymotrypsin-p(18),aspn-de(19),gluc-de(20),lysn(21),thermolysin-p(22),semi-chymotrypsin(23),semi-gluc(24),max(25),none(255)
type MSMod int
//MSMod,IntegerEnum:methylk(0),oxym(1),carboxymethylc(2),carbamidomethylc(3),deamidationkq(4),propionamidec(5),phosphorylations(6),phosphorylationt(7),phosphorylationy(8),ntermmcleave(9),ntermacetyl(10),ntermmethyl(11),ntermtrimethyl(12),methythiold(13),methylq(14),trimethylk(15),methyld(16),methyle(17),ctermpepmethyl(18),trideuteromethyld(19),trideuteromethyle(20),ctermpeptrideuteromethyl(21),nformylmet(22),twoamino3oxobutanoicacid(23),acetylk(24),ctermamide(25),bmethylthiold(26),carbamidomethylk(27),carbamidometylh(28),carbamidomethyld(29),carbamidomethyle(30),carbamylk(31),ntermcarbamyl(32),citrullinationr(33),cysteicacidc(34),diiodinationy(35),dimethylk(36),dimethylr(37),ntermpepdimethyl(38),dihydroxyf(39),thioacetylk(40),ntermpeptioacetyl(41),farnesylationc(42),formylk(43),ntermpepformyl(44),formylkynureninw(45),phef(46),gammacarboxyld(47),gammacarboxyle(48),geranylgeranylc(49),ntermpepglucuronylg(50),glutathionec(51),glyglyk(52),guanidinationk(53),his2asnh(54),his2asph(55),ctermpephsem(56),ctermpephselactm(57),hydroxykynureninw(58),hydroxylationd(59),hydroxylationk(60),hydroxylationn(61),hydroxylationp(62),hydroxylationf(63),hydroxylationy(64),iodinationy(65),kynureninw(66),lipoylk(67),ctermpepmeester(68),meesterd(69),meestere(70),meesters(71),meestery(72),methylc(73),methylh(74),methyln(75),ntermpepmethyl(76),methylr(77),ntermpepmyristoyeylationg(78),ntermpepmyristoyl4hg(79),ntermpepmyristoylationg(80),myristoylationk(81),ntermformyl(82),nemc(83),nipcam(84),nitrow(85),nitroy(86),ctermpepo18(87),ctermpepdio18(88),oxyh(89),oxyw(90),ppantetheines(91),palmitoylationc(92),palmitoylationk(93),palmitoylations(94),palmitoylationt(95),phospholosss(96),phospholosst(97),phospholossy(98),phosphoneutrallossc(99),phosphoneutrallossd(100),phosphoneutrallossh(101),propionylk(102),ntermpeppropionyl(103),propionylheavyk(104),ntermpeppropionylheavy(105),pyridylk(106),ntermpeppyridyl(107),ntermpeppyrocmc(108),ntermpeppyroe(109),ntermpeppyroq(110),pyroglutamicp(111),spyridylethylc(112),semetm(113),sulfationy(114),suphonem(115),triiodinationy(116),trimethylationr(117),ntermpeptripalmitatec(118),usermod1(119),usermod2(120),usermod3(121),usermod4(122),usermod5(123),usermod6(124),usermod7(125),usermod8(126),usermod9(127),usermod10(128),icatlight(129),icatheavy(130),camthiopropanoylk(131),phosphoneutrallosss(132),phosphoneutrallosst(133),phosphoetdlosss(134),phosphoetdlosst(135),arg-13c6(136),arg-13c6-15n4(137),lys-13c6(138),oxy18(139),beta-elim-s(140),beta-elim-t(141),usermod11(142),usermod12(143),usermod13(144),usermod14(145),usermod15(146),usermod16(147),usermod17(148),usermod18(149),usermod19(150),usermod20(151),usermod21(152),usermod22(153),usermod23(154),usermod24(155),usermod25(156),usermod26(157),usermod27(158),usermod28(159),usermod29(160),usermod30(161),sulfinicacid(162),arg2orn(163),dehydro(164),carboxykynurenin(165),sumoylation(166),iTRAQ114nterm(167),iTRAQ114K(168),iTRAQ114Y(169),iTRAQ115nterm(170),iTRAQ115K(171),iTRAQ115Y(172),iTRAQ116nterm(173),iTRAQ116K(174),iTRAQ116Y(175),iTRAQ117nterm(176),iTRAQ117K(177),iTRAQ117Y(178),mmts(179),lys-2H4(180),lys-13C615N2(181),hexNAcN(182),dHexHexNAcN(183),hexNAcS(184),hexNAcT(185),mod186(186),mod187(187),mod188(188),mod189(189),mod190(190),mod191(191),mod192(192),mod193(193),mod194(194),mod195(195),mod196(196),mod197(197),mod198(198),mod199(199),mod200(200),mod201(201),mod202(202),mod203(203),mod204(204),mod205(205),mod206(206),mod207(207),mod208(208),mod209(209),mod210(210),mod211(211),mod212(212),mod213(213),mod214(214),mod215(215),mod216(216),mod217(217),mod218(218),mod219(219),mod220(220),mod221(221),mod222(222),mod223(223),mod224(224),mod225(225),mod226(226),mod227(227),mod228(228),mod229(229),mod230(230),max(231),unknown(9999),none(10000)
type MSModType int
//MSModType,IntegerEnum:modaa(0),modn(1),modnaa(2),modc(3),modcaa(4),modnp(5),modnpaa(6),modcp(7),modcpaa(8),modmax(9)
type MSMassSet struct {
	Monomass	float64	`xml:"monomass" json:"monomass"`
	Averagemass	float64	`xml:"averagemass" json:"averagemass"`
	N15mass		float64	`xml:"n15mass" json:"n15mass"`
}
type MSModSpec struct {
	Mod		*MSMod		`xml:"mod" json:"mod,omitempty"`
	Type		*MSModType	`xml:"type" json:"type,omitempty"`
	Name		string		`xml:"name" json:"name"`
	Monomass	float64		`xml:"monomass" json:"monomass"`
	Averagemass	float64		`xml:"averagemass" json:"averagemass"`
	N15mass		float64		`xml:"n15mass" json:"n15mass"`
	Residues	[]string	`xml:"residues" json:"residues,omitempty" asn1:"optional"`
	Neutralloss	*MSMassSet	`xml:"neutralloss" json:"neutralloss,omitempty" asn1:"optional"`
	Unimod		int64		`xml:"unimod" json:"unimod,omitempty" asn1:"optional"`
	PsiMs		string		`xml:"psi-ms" json:"psi_ms,omitempty" asn1:"optional"`
}
type MSModSpecSet []MSModSpec
type MSCalcPlusOne int
//MSCalcPlusOne,IntegerEnum:dontcalc(0),calc(1)
type MSCalcCharge int
//MSCalcCharge,IntegerEnum:calculate(0),usefile(1),userange(2)
type MSChargeHandle struct {
	Calcplusone		*MSCalcPlusOne	`xml:"calcplusone" json:"calcplusone,omitempty" asn1:"default:1"`
	Calccharge		*MSCalcCharge	`xml:"calccharge" json:"calccharge,omitempty" asn1:"default:2"`
	Mincharge		int64		`xml:"mincharge" json:"mincharge" asn1:"default:2"`
	Maxcharge		int64		`xml:"maxcharge" json:"maxcharge" asn1:"default:3"`
	Considermult		int64		`xml:"considermult" json:"considermult" asn1:"default:3"`
	Plusone			float64		`xml:"plusone" json:"plusone"`
	Maxproductcharge	int64		`xml:"maxproductcharge" json:"maxproductcharge,omitempty" asn1:"optional"`
	Prodlesspre		bool		`xml:"prodlesspre" json:"prodlesspre,omitempty" asn1:"optional"`
	Negative		int64		`xml:"negative" json:"negative" asn1:"default:1"`
}
type MSSearchType int
//MSSearchType,IntegerEnum:monoisotopic(0),average(1),monon15(2),exact(3),multiisotope(4),max(5)
type MSZdependence int
//MSZdependence,IntegerEnum:independent(0),linearwithz(1),max(2)
type MSIterativeSettings struct {
	Researchthresh	float64	`xml:"researchthresh" json:"researchthresh"`
	Subsetthresh	float64	`xml:"subsetthresh" json:"subsetthresh"`
	Replacethresh	float64	`xml:"replacethresh" json:"replacethresh"`
}
type MSLibrarySettings struct {
	Libnames		[]string	`xml:"libnames" json:"libnames,omitempty"`
	Presearch		bool		`xml:"presearch" json:"presearch"`
	Useomssascore		bool		`xml:"useomssascore" json:"useomssascore"`
	Usereplicatescore	bool		`xml:"usereplicatescore" json:"usereplicatescore"`
	Qtofscore		bool		`xml:"qtofscore" json:"qtofscore"`
}
type MSSearchSettings struct {
	Precursorsearchtype	*MSSearchType		`xml:"precursorsearchtype" json:"precursorsearchtype,omitempty"`
	Productsearchtype	*MSSearchType		`xml:"productsearchtype" json:"productsearchtype,omitempty"`
	Ionstosearch		[]MSIonType		`xml:"ionstosearch" json:"ionstosearch,omitempty"`
	Peptol			float64			`xml:"peptol" json:"peptol"`
	Msmstol			float64			`xml:"msmstol" json:"msmstol"`
	Zdep			*MSZdependence		`xml:"zdep" json:"zdep,omitempty"`
	Cutoff			float64			`xml:"cutoff" json:"cutoff"`
	Cutlo			float64			`xml:"cutlo" json:"cutlo"`
	Cuthi			float64			`xml:"cuthi" json:"cuthi"`
	Cutinc			float64			`xml:"cutinc" json:"cutinc"`
	Singlewin		int64			`xml:"singlewin" json:"singlewin"`
	Doublewin		int64			`xml:"doublewin" json:"doublewin"`
	Singlenum		int64			`xml:"singlenum" json:"singlenum"`
	Doublenum		int64			`xml:"doublenum" json:"doublenum"`
	Fixed			[]MSMod			`xml:"fixed" json:"fixed,omitempty"`
	Variable		[]MSMod			`xml:"variable" json:"variable,omitempty"`
	Enzyme			*MSEnzymes		`xml:"enzyme" json:"enzyme,omitempty"`
	Missedcleave		int64			`xml:"missedcleave" json:"missedcleave"`
	Hitlistlen		int64			`xml:"hitlistlen" json:"hitlistlen" asn1:"default:25"`
	Db			string			`xml:"db" json:"db"`
	Tophitnum		int64			`xml:"tophitnum" json:"tophitnum"`
	Minhit			int64			`xml:"minhit" json:"minhit" asn1:"default:2"`
	Minspectra		int64			`xml:"minspectra" json:"minspectra" asn1:"default:4"`
	Scale			int64			`xml:"scale" json:"scale" asn1:"default:100"`
	Maxmods			int64			`xml:"maxmods" json:"maxmods" asn1:"default:64"`
	Taxids			[]int64			`xml:"taxids" json:"taxids,omitempty" asn1:"optional"`
	Chargehandling		*MSChargeHandle		`xml:"chargehandling" json:"chargehandling,omitempty" asn1:"optional"`
	Usermods		*MSModSpecSet		`xml:"usermods" json:"usermods,omitempty" asn1:"optional"`
	Pseudocount		int64			`xml:"pseudocount" json:"pseudocount" asn1:"default:1"`
	Searchb1		int64			`xml:"searchb1" json:"searchb1" asn1:"default:0"`
	Searchctermproduct	int64			`xml:"searchctermproduct" json:"searchctermproduct" asn1:"default:0"`
	Maxproductions		int64			`xml:"maxproductions" json:"maxproductions" asn1:"default:0"`
	Minnoenzyme		int64			`xml:"minnoenzyme" json:"minnoenzyme" asn1:"default:4"`
	Maxnoenzyme		int64			`xml:"maxnoenzyme" json:"maxnoenzyme" asn1:"default:0"`
	Exactmass		float64			`xml:"exactmass" json:"exactmass,omitempty" asn1:"optional"`
	Settingid		int64			`xml:"settingid" json:"settingid,omitempty" asn1:"optional"`
	Iterativesettings	*MSIterativeSettings	`xml:"iterativesettings" json:"iterativesettings,omitempty" asn1:"optional"`
	Precursorcull		int64			`xml:"precursorcull" json:"precursorcull,omitempty" asn1:"optional"`
	Infiles			[]MSInFile		`xml:"infiles" json:"infiles,omitempty" asn1:"optional"`
	Outfiles		[]MSOutFile		`xml:"outfiles" json:"outfiles,omitempty" asn1:"optional"`
	Nocorrelationscore	int64			`xml:"nocorrelationscore" json:"nocorrelationscore,omitempty" asn1:"optional"`
	Probfollowingion	float64			`xml:"probfollowingion" json:"probfollowingion,omitempty" asn1:"optional"`
	Nmethionine		bool			`xml:"nmethionine" json:"nmethionine,omitempty" asn1:"optional"`
	Automassadjust		float64			`xml:"automassadjust" json:"automassadjust,omitempty" asn1:"optional"`
	Lomasscutoff		float64			`xml:"lomasscutoff" json:"lomasscutoff,omitempty" asn1:"optional"`
	Libsearchsettings	*MSLibrarySettings	`xml:"libsearchsettings" json:"libsearchsettings,omitempty" asn1:"optional"`
	Noprolineions		[]MSIonType		`xml:"noprolineions" json:"noprolineions,omitempty" asn1:"optional"`
	Reversesearch		bool			`xml:"reversesearch" json:"reversesearch,omitempty" asn1:"optional"`
	Othersettings		[]NameValue		`xml:"othersettings" json:"othersettings,omitempty" asn1:"optional"`
	Numisotopes		int64			`xml:"numisotopes" json:"numisotopes,omitempty" asn1:"optional"`
	Pepppm			bool			`xml:"pepppm" json:"pepppm,omitempty" asn1:"optional"`
	Msmsppm			bool			`xml:"msmsppm" json:"msmsppm,omitempty" asn1:"optional"`
	Reportedhitcount	int64			`xml:"reportedhitcount" json:"reportedhitcount,omitempty" asn1:"optional"`
}
type MSSerialDataFormat int
//MSSerialDataFormat,IntegerEnum:none(0),asntext(1),asnbinary(2),xml(3),csv(4),pepxml(5),xmlbz2(6)
type MSOutFile struct {
	Outfile		string			`xml:"outfile" json:"outfile"`
	Outfiletype	*MSSerialDataFormat	`xml:"outfiletype" json:"outfiletype,omitempty"`
	Includerequest	bool			`xml:"includerequest" json:"includerequest"`
}
type MSSpectrumFileType int
//MSSpectrumFileType,IntegerEnum:dta(0),dtablank(1),dtaxml(2),asc(3),pkl(4),pks(5),sciex(6),mgf(7),unknown(8),oms(9),omx(10),xml(11),omxbz2(12)
type MSInFile struct {
	Infile		string			`xml:"infile" json:"infile"`
	Infiletype	*MSSpectrumFileType	`xml:"infiletype" json:"infiletype,omitempty"`
}
type MSSearchSettingsSet []MSSearchSettings
type MSRequest struct {
	Spectra		*MSSpectrumset		`xml:"spectra" json:"spectra,omitempty"`
	Settings	*MSSearchSettings	`xml:"settings" json:"settings,omitempty"`
	Rid		string			`xml:"rid" json:"rid,omitempty" asn1:"optional"`
	Moresettings	*MSSearchSettingsSet	`xml:"moresettings" json:"moresettings,omitempty" asn1:"optional"`
	Modset		*MSModSpecSet		`xml:"modset" json:"modset,omitempty" asn1:"optional"`
}
type MSIonType int
//MSIonType,IntegerEnum:a(0),b(1),c(2),x(3),y(4),z(5),parent(6),internal(7),immonium(8),unknown(9),adot(10),x-CO2(11),adot-CO2(12),max(13)
type MSIonNeutralLoss int
//MSIonNeutralLoss,IntegerEnum:water(0),ammonia(1)
type MSIonIsotopicType int
//MSIonIsotopicType,IntegerEnum:monoisotopic(0),c13(1),c13two(2),c13three(3),c13four(4)
type MSImmonium struct {
	Parent	string	`xml:"parent" json:"parent"`
	Product	string	`xml:"product" json:"product,omitempty" asn1:"optional"`
}
type MSIon struct {
	Neutralloss	*MSIonNeutralLoss	`xml:"neutralloss" json:"neutralloss,omitempty" asn1:"optional"`
	Isotope		*MSIonIsotopicType	`xml:"isotope" json:"isotope,omitempty" asn1:"optional"`
	Internal	string			`xml:"internal" json:"internal,omitempty" asn1:"optional"`
	Immonium	*MSImmonium		`xml:"immonium" json:"immonium,omitempty" asn1:"optional"`
}
type MSIonAnnot struct {
	Suspect		bool	`xml:"suspect" json:"suspect,omitempty" asn1:"optional"`
	Massdiff	float64	`xml:"massdiff" json:"massdiff,omitempty" asn1:"optional"`
	Missingisotope	bool	`xml:"missingisotope" json:"missingisotope,omitempty" asn1:"optional"`
}
type MSMZHit struct {
	Ion		*MSIonType	`xml:"ion" json:"ion,omitempty"`
	Charge		int64		`xml:"charge" json:"charge"`
	Number		int64		`xml:"number" json:"number"`
	Mz		int64		`xml:"mz" json:"mz"`
	Index		int64		`xml:"index" json:"index,omitempty" asn1:"optional"`
	Moreion		*MSIon		`xml:"moreion" json:"moreion,omitempty" asn1:"optional"`
	Annotation	*MSIonAnnot	`xml:"annotation" json:"annotation,omitempty" asn1:"optional"`
}
type MSPepHit struct {
	Start		int64	`xml:"start" json:"start"`
	Stop		int64	`xml:"stop" json:"stop"`
	Gi		int64	`xml:"gi" json:"gi,omitempty" asn1:"optional"`
	Accession	string	`xml:"accession" json:"accession,omitempty" asn1:"optional"`
	Defline		string	`xml:"defline" json:"defline,omitempty" asn1:"optional"`
	Protlength	int64	`xml:"protlength" json:"protlength,omitempty" asn1:"optional"`
	Oid		int64	`xml:"oid" json:"oid,omitempty" asn1:"optional"`
	Reversed	bool	`xml:"reversed" json:"reversed,omitempty" asn1:"optional"`
	Pepstart	string	`xml:"pepstart" json:"pepstart,omitempty" asn1:"optional"`
	Pepstop		string	`xml:"pepstop" json:"pepstop,omitempty" asn1:"optional"`
}
type MSModHit struct {
	Site	int64	`xml:"site" json:"site"`
	Modtype	*MSMod	`xml:"modtype" json:"modtype,omitempty"`
}
type MSScoreSet struct {
	Name	string	`xml:"name" json:"name"`
	Value	float64	`xml:"value" json:"value"`
}
type MSHits struct {
	Evalue		float64		`xml:"evalue" json:"evalue"`
	Pvalue		float64		`xml:"pvalue" json:"pvalue"`
	Charge		int64		`xml:"charge" json:"charge"`
	Pephits		[]MSPepHit	`xml:"pephits" json:"pephits,omitempty"`
	Mzhits		[]MSMZHit	`xml:"mzhits" json:"mzhits,omitempty" asn1:"optional"`
	Pepstring	string		`xml:"pepstring" json:"pepstring,omitempty" asn1:"optional"`
	Mass		int64		`xml:"mass" json:"mass,omitempty" asn1:"optional"`
	Mods		[]MSModHit	`xml:"mods" json:"mods,omitempty" asn1:"optional"`
	Pepstart	string		`xml:"pepstart" json:"pepstart,omitempty" asn1:"optional"`
	Pepstop		string		`xml:"pepstop" json:"pepstop,omitempty" asn1:"optional"`
	Protlength	int64		`xml:"protlength" json:"protlength,omitempty" asn1:"optional"`
	Theomass	int64		`xml:"theomass" json:"theomass,omitempty" asn1:"optional"`
	Oid		int64		`xml:"oid" json:"oid,omitempty" asn1:"optional"`
	Scores		[]MSScoreSet	`xml:"scores" json:"scores,omitempty" asn1:"optional"`
	Libaccession	string		`xml:"libaccession" json:"libaccession,omitempty" asn1:"optional"`
}
type MSHitError int
//MSHitError,IntegerEnum:none(0),generalerr(1),unable2read(2),notenuffpeaks(3)
type MSUserAnnot int
//MSUserAnnot,IntegerEnum:none(0),delete(1),flag(2)
type MSHitSet struct {
	Number		int64		`xml:"number" json:"number"`
	Error		*MSHitError	`xml:"error" json:"error,omitempty" asn1:"optional"`
	Hits		[]MSHits	`xml:"hits" json:"hits,omitempty" asn1:"optional"`
	Ids		[]string	`xml:"ids" json:"ids,omitempty" asn1:"optional"`
	Namevalue	[]NameValue	`xml:"namevalue" json:"namevalue,omitempty" asn1:"optional"`
	Settingid	int64		`xml:"settingid" json:"settingid,omitempty" asn1:"optional"`
	Userannotation	*MSUserAnnot	`xml:"userannotation" json:"userannotation,omitempty" asn1:"optional"`
}
type MSResponseError int
//MSResponseError,IntegerEnum:none(0),generalerr(1),noblastdb(2),noinput(3)
type MSBioseq struct {
	Oid	int64			`xml:"oid" json:"oid"`
	Seq	*NCBISequence.Bioseq	`xml:"seq" json:"seq,omitempty"`
}
type MSBioseqSet []MSBioseq
type MSResponse struct {
	Hitsets		[]MSHitSet		`xml:"hitsets" json:"hitsets,omitempty"`
	Scale		int64			`xml:"scale" json:"scale" asn1:"default:100"`
	Rid		string			`xml:"rid" json:"rid,omitempty" asn1:"optional"`
	Error		*MSResponseError	`xml:"error" json:"error,omitempty" asn1:"optional"`
	Version		string			`xml:"version" json:"version,omitempty" asn1:"optional"`
	Email		string			`xml:"email" json:"email,omitempty" asn1:"optional"`
	Dbversion	int64			`xml:"dbversion" json:"dbversion,omitempty" asn1:"optional"`
	Bioseqs		*MSBioseqSet		`xml:"bioseqs" json:"bioseqs,omitempty" asn1:"optional"`
}
type MSSearch struct {
	Request		[]MSRequest	`xml:"request" json:"request,omitempty" asn1:"optional"`
	Response	[]MSResponse	`xml:"response" json:"response,omitempty" asn1:"optional"`
}
package NCBIPCAssay2

import "NCBIBioSource"
import "NCBIGeneral"
import "NCBIPCSubstance"

type PCAssayContainer []PCAssaySubmit
type PCAssaySubmit struct {
	Assay	struct {
		Aid		int64				`xml:"aid" json:"aid"`
		AidSource	*NCBIPCSubstance.PCSource	`xml:"aid-source" json:"aid_source,omitempty"`
		Descr		*PCAssayDescription		`xml:"descr" json:"descr,omitempty"`
		Aidver		*NCBIPCSubstance.PCID		`xml:"aidver" json:"aidver,omitempty"`
	}				`xml:"assay" json:"assay"`//Assay,ChoiceOption
	Data	[]PCAssayResults	`xml:"data" json:"data,omitempty" asn1:"optional"`
	Revoke	[]int64			`xml:"revoke" json:"revoke,omitempty" asn1:"optional"`
}
type PCAssayResults struct {
	Sid		int64				`xml:"sid" json:"sid"`
	SidSource	*NCBIPCSubstance.PCSource	`xml:"sid-source" json:"sid_source,omitempty" asn1:"optional"`
	Version		int64				`xml:"version" json:"version,omitempty" asn1:"optional"`
	Comment		string				`xml:"comment" json:"comment,omitempty" asn1:"optional,utf8"`
	Outcome		int				`xml:"outcome" json:"outcome"`//Outcome,IntegerEnum:inactive(1),active(2),inconclusive(3),unspecified(4),probe(5)
	Rank		int64				`xml:"rank" json:"rank,omitempty" asn1:"optional"`
	Data		[]PCAssayData			`xml:"data" json:"data,omitempty" asn1:"optional"`
	Url		string				`xml:"url" json:"url,omitempty" asn1:"optional,utf8"`
	Xref		[]PCAnnotatedXRef		`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Date		*NCBIGeneral.Date		`xml:"date" json:"date,omitempty" asn1:"optional"`
}
type PCAssayData struct {
	Tid	int64	`xml:"tid" json:"tid"`
	Value	struct {
		Ival	int64	`xml:"ival" json:"ival"`
		Fval	float64	`xml:"fval" json:"fval"`
		Bval	bool	`xml:"bval" json:"bval"`
		Sval	string	`xml:"sval" json:"sval" asn1:"utf8"`
	}	`xml:"value" json:"value"`//Value,ChoiceOption
}
type PCAssayDescription struct {
	Aid			*NCBIPCSubstance.PCID		`xml:"aid" json:"aid,omitempty"`
	AidSource		*NCBIPCSubstance.PCSource	`xml:"aid-source" json:"aid_source,omitempty" asn1:"optional"`
	Name			string				`xml:"name" json:"name" asn1:"utf8"`
	Description		[]string			`xml:"description" json:"description,omitempty" asn1:"optional"`
	Protocol		[]string			`xml:"protocol" json:"protocol,omitempty" asn1:"optional"`
	Comment			[]string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Xref			[]PCAnnotatedXRef		`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Results			[]PCResultType			`xml:"results" json:"results,omitempty" asn1:"optional"`
	Revision		int64				`xml:"revision" json:"revision,omitempty" asn1:"optional"`
	Target			[]PCAssayTargetInfo		`xml:"target" json:"target,omitempty" asn1:"optional"`
	ActivityOutcomeMethod	int				`xml:"activity-outcome-method" json:"activity_outcome_method,omitempty" asn1:"optional"`//ActivityOutcomeMethod,IntegerEnum:other(0),screening(1),confirmatory(2),summary(3)
	Dr			[]PCAssayDRAttr			`xml:"dr" json:"dr,omitempty" asn1:"optional"`
	SubstanceType		int				`xml:"substance-type" json:"substance_type,omitempty" asn1:"optional"`//SubstanceType,IntegerEnum:small-molecule(1),nucleotide(2),other(255)
	GrantNumber		[]string			`xml:"grant-number" json:"grant_number,omitempty" asn1:"optional"`
	ProjectCategory		int				`xml:"project-category" json:"project_category,omitempty" asn1:"optional"`//ProjectCategory,IntegerEnum:mlscn(1),mlpcn(2),mlscn-ap(3),mlpcn-ap(4),journal-article(5),assay-vendor(6),literature-extracted(7),literature-author(8),literature-publisher(9),rnaigi(10),other(255)
	AssayGroup		[]string			`xml:"assay-group" json:"assay_group,omitempty" asn1:"optional"`
	CategorizedComment	[]PCCategorizedComment		`xml:"categorized-comment" json:"categorized_comment,omitempty" asn1:"optional"`
}
type PCCategorizedComment struct {
	Title	string		`xml:"title" json:"title" asn1:"utf8"`
	Comment	[]string	`xml:"comment" json:"comment,omitempty"`
}
type PCAssayDRAttr struct {
	Id	int64	`xml:"id" json:"id"`
	Descr	string	`xml:"descr" json:"descr,omitempty" asn1:"optional,utf8"`
	Dn	string	`xml:"dn" json:"dn,omitempty" asn1:"optional,utf8"`
	Rn	string	`xml:"rn" json:"rn,omitempty" asn1:"optional,utf8"`
	Type	int	`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:experimental(0),calculated(1)
}
type PCAssayTargetInfo struct {
	Name	string	`xml:"name" json:"name" asn1:"utf8"`
	MolId	struct {
		GeneId			int64	`xml:"gene-id" json:"gene_id"`
		ProteinAccession	string	`xml:"protein-accession" json:"protein_accession"`
		NucleotideAccession	string	`xml:"nucleotide-accession" json:"nucleotide_accession"`
		Other			string	`xml:"other" json:"other"`
		TaxId			int64	`xml:"tax-id" json:"tax_id"`
	}						`xml:"mol-id" json:"mol_id"`//MolId,ChoiceOption
	Organism	*NCBIBioSource.BioSource	`xml:"organism" json:"organism,omitempty" asn1:"optional"`
	Descr		string				`xml:"descr" json:"descr,omitempty" asn1:"optional,utf8"`
	Comment		[]string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
}
type PCAnnotatedXRef struct {
	Xref	*NCBIPCSubstance.PCXRefData	`xml:"xref" json:"xref,omitempty"`
	Comment	string				`xml:"comment" json:"comment,omitempty" asn1:"optional,utf8"`
	Type	int				`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:pcit(1),pgene(2)
}
type PCResultType struct {
	Tid		int64		`xml:"tid" json:"tid"`
	Name		string		`xml:"name" json:"name" asn1:"utf8"`
	Description	[]string	`xml:"description" json:"description,omitempty" asn1:"optional"`
	Type		int		`xml:"type" json:"type"`//Type,IntegerEnum:float(1),int(2),bool(3),string(4)
	Constraints	struct {
		Fset	[]float64		`xml:"fset" json:"fset,omitempty"`
		Fmin	float64			`xml:"fmin" json:"fmin"`
		Fmax	float64			`xml:"fmax" json:"fmax"`
		Frange	*PCRealMinMax		`xml:"frange" json:"frange,omitempty"`
		Iset	[]int64			`xml:"iset" json:"iset,omitempty"`
		Imin	int64			`xml:"imin" json:"imin"`
		Imax	int64			`xml:"imax" json:"imax"`
		Irange	*PCIntegerMinMax	`xml:"irange" json:"irange,omitempty"`
		Sset	[]string		`xml:"sset" json:"sset,omitempty"`
	}					`xml:"constraints" json:"constraints,omitempty" asn1:"optional"`//Constraints,ChoiceOption
	Unit		int			`xml:"unit" json:"unit,omitempty" asn1:"optional"`//Unit,IntegerEnum:ppt(1),ppm(2),ppb(3),mm(4),um(5),nm(6),pm(7),fm(8),mgml(9),ugml(10),ngml(11),pgml(12),fgml(13),m(14),percent(15),ratio(16),sec(17),rsec(18),min(19),rmin(20),day(21),rday(22),ml-min-kg(23),l-kg(24),hr-ng-ml(25),cm-sec(26),mg-kg(27),none(254),unspecified(255)
	Sunit		string			`xml:"sunit" json:"sunit,omitempty" asn1:"optional"`
	Transform	int			`xml:"transform" json:"transform,omitempty" asn1:"optional"`//Transform,IntegerEnum:linear(1),ln(2),log(3),reciprocal(4),negative(5),nlog(6),nln(7)
	Tc		*PCConcentrationAttr	`xml:"tc" json:"tc,omitempty" asn1:"optional"`
	Ac		bool			`xml:"ac" json:"ac,omitempty" asn1:"optional"`
	AcQualifier	bool			`xml:"ac-qualifier" json:"ac_qualifier,omitempty" asn1:"optional"`
	Annot		int			`xml:"annot" json:"annot,omitempty" asn1:"optional"`//Annot,IntegerEnum:pmid(1),mmdb(2),url(3),taxonomy(6),mim(7),gene(8),probe(9),aid(10),sid(11),cid(12),target-name(15),target-descr(16),target-tax-id(17),gene-target-id(18),protein-target-accession(21),nucleotide-target-accession(22),other(255)
}
type PCConcentrationAttr struct {
	Concentration	float64	`xml:"concentration" json:"concentration"`
	Unit		int	`xml:"unit" json:"unit"`//Unit,IntegerEnum:um(5)
	DrId		int64	`xml:"dr-id" json:"dr_id,omitempty" asn1:"optional"`
}
type PCIntegerMinMax struct {
	Min	int64	`xml:"min" json:"min"`
	Max	int64	`xml:"max" json:"max"`
}
type PCRealMinMax struct {
	Min	float64	`xml:"min" json:"min"`
	Max	float64	`xml:"max" json:"max"`
}
package NCBIPCAssay

import "NCBIPub"
import "NCBIBioSource"
import "NCBIGeneral"
import "NCBIPCSubstance"

type PCAssayContainer []PCAssaySubmit
type PCAssaySubmit struct {
	Assay	struct {
		Aid		int64				`xml:"aid" json:"aid"`
		AidSource	*NCBIPCSubstance.PCSource	`xml:"aid-source" json:"aid_source,omitempty"`
		Descr		*PCAssayDescription		`xml:"descr" json:"descr,omitempty"`
		Aidver		*NCBIPCSubstance.PCID		`xml:"aidver" json:"aidver,omitempty"`
	}				`xml:"assay" json:"assay"`//Assay,ChoiceOption
	Data	[]PCAssayResults	`xml:"data" json:"data,omitempty" asn1:"optional"`
	Revoke	[]int64			`xml:"revoke" json:"revoke,omitempty" asn1:"optional"`
}
type PCAssayResults struct {
	Sid		int64				`xml:"sid" json:"sid"`
	SidSource	*NCBIPCSubstance.PCSource	`xml:"sid-source" json:"sid_source,omitempty" asn1:"optional"`
	Version		int64				`xml:"version" json:"version,omitempty" asn1:"optional"`
	Comment		string				`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Outcome		int				`xml:"outcome" json:"outcome"`//Outcome,IntegerEnum:inactive(1),active(2),inconclusive(3),unspecified(4),probe(5)
	Rank		int64				`xml:"rank" json:"rank,omitempty" asn1:"optional"`
	Data		[]PCAssayData			`xml:"data" json:"data,omitempty" asn1:"optional"`
	Url		string				`xml:"url" json:"url,omitempty" asn1:"optional"`
	Xref		[]PCAnnotatedXRef		`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Date		*NCBIGeneral.Date		`xml:"date" json:"date,omitempty" asn1:"optional"`
}
type PCAssayData struct {
	Tid	int64	`xml:"tid" json:"tid"`
	Value	struct {
		Ival	int64	`xml:"ival" json:"ival"`
		Fval	float64	`xml:"fval" json:"fval"`
		Bval	bool	`xml:"bval" json:"bval"`
		Sval	string	`xml:"sval" json:"sval"`
	}	`xml:"value" json:"value"`//Value,ChoiceOption
}
type PCAssayDescription struct {
	Aid			*NCBIPCSubstance.PCID		`xml:"aid" json:"aid,omitempty"`
	AidSource		*NCBIPCSubstance.PCSource	`xml:"aid-source" json:"aid_source,omitempty" asn1:"optional"`
	Name			string				`xml:"name" json:"name"`
	Description		[]string			`xml:"description" json:"description,omitempty" asn1:"optional"`
	Protocol		[]string			`xml:"protocol" json:"protocol,omitempty" asn1:"optional"`
	Comment			[]string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Xref			[]PCAnnotatedXRef		`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Results			[]PCResultType			`xml:"results" json:"results,omitempty" asn1:"optional"`
	Pub			[]NCBIPub.Pub			`xml:"pub" json:"pub,omitempty" asn1:"optional"`
	Revision		int64				`xml:"revision" json:"revision,omitempty" asn1:"optional"`
	Target			[]PCAssayTargetInfo		`xml:"target" json:"target,omitempty" asn1:"optional"`
	ActivityOutcomeMethod	int				`xml:"activity-outcome-method" json:"activity_outcome_method,omitempty" asn1:"optional"`//ActivityOutcomeMethod,IntegerEnum:other(0),screening(1),confirmatory(2),summary(3)
	Dr			[]PCAssayDRAttr			`xml:"dr" json:"dr,omitempty" asn1:"optional"`
	SubstanceType		int				`xml:"substance-type" json:"substance_type,omitempty" asn1:"optional"`//SubstanceType,IntegerEnum:small-molecule(1),nucleotide(2),other(255)
	GrantNumber		[]string			`xml:"grant-number" json:"grant_number,omitempty" asn1:"optional"`
	ProjectCategory		int				`xml:"project-category" json:"project_category,omitempty" asn1:"optional"`//ProjectCategory,IntegerEnum:mlscn(1),mlpcn(2),mlscn-ap(3),mlpcn-ap(4),journal-article(5),assay-vendor(6),literature-extracted(7),literature-author(8),literature-publisher(9),rnaigi(10),other(255)
	IsPanel			bool				`xml:"is-panel" json:"is_panel,omitempty" asn1:"optional"`
	AssayGroup		[]string			`xml:"assay-group" json:"assay_group,omitempty" asn1:"optional"`
	PanelInfo		*PCAssayPanel			`xml:"panel-info" json:"panel_info,omitempty" asn1:"optional"`
	IsMlpLateStage		bool				`xml:"is-mlp-late-stage" json:"is_mlp_late_stage,omitempty" asn1:"optional"`
	CategorizedComment	[]PCCategorizedComment		`xml:"categorized-comment" json:"categorized_comment,omitempty" asn1:"optional"`
}
type PCAssayPanel struct {
	Name	string			`xml:"name" json:"name"`
	Descr	string			`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Member	[]PCAssayPanelMember	`xml:"member" json:"member,omitempty" asn1:"optional"`
}
type PCAssayPanelMember struct {
	Mid			int64			`xml:"mid" json:"mid"`
	Name			string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Description		string			`xml:"description" json:"description,omitempty" asn1:"optional"`
	Protocol		[]string		`xml:"protocol" json:"protocol,omitempty" asn1:"optional"`
	Comment			[]string		`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Target			[]PCAssayTargetInfo	`xml:"target" json:"target,omitempty" asn1:"optional"`
	Xref			[]PCAnnotatedXRef	`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	ActivityOutcomeMethod	int			`xml:"activity-outcome-method" json:"activity_outcome_method,omitempty" asn1:"optional"`//ActivityOutcomeMethod,IntegerEnum:other(0),screening(1),confirmatory(2),summary(3)
	Dr			[]PCAssayDRAttr		`xml:"dr" json:"dr,omitempty" asn1:"optional"`
	CategorizedComment	[]PCCategorizedComment	`xml:"categorized-comment" json:"categorized_comment,omitempty" asn1:"optional"`
}
type PCCategorizedComment struct {
	Title	string		`xml:"title" json:"title"`
	Comment	[]string	`xml:"comment" json:"comment,omitempty"`
}
type PCAssayDRAttr struct {
	Id	int64	`xml:"id" json:"id"`
	Descr	string	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Dn	string	`xml:"dn" json:"dn,omitempty" asn1:"optional"`
	Rn	string	`xml:"rn" json:"rn,omitempty" asn1:"optional"`
	Type	int	`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:experimental(0),calculated(1)
}
type PCAssayTargetInfo struct {
	Name		string				`xml:"name" json:"name"`
	MolId		int64				`xml:"mol-id" json:"mol_id"`
	MoleculeType	int				`xml:"molecule-type" json:"molecule_type"`//MoleculeType,IntegerEnum:protein(1),dna(2),rna(3),gene(4),biosystem(5),other(255)
	Organism	*NCBIBioSource.BioSource	`xml:"organism" json:"organism,omitempty" asn1:"optional"`
	Descr		string				`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Comment		[]string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
}
type PCAnnotatedXRef struct {
	Xref	*NCBIPCSubstance.PCXRefData	`xml:"xref" json:"xref,omitempty"`
	Comment	string				`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Type	int				`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:pcit(1),pgene(2)
}
type PCResultType struct {
	Tid		int64		`xml:"tid" json:"tid"`
	Name		string		`xml:"name" json:"name"`
	Description	[]string	`xml:"description" json:"description,omitempty" asn1:"optional"`
	Type		int		`xml:"type" json:"type"`//Type,IntegerEnum:float(1),int(2),bool(3),string(4)
	Constraints	struct {
		Fset	[]float64		`xml:"fset" json:"fset,omitempty"`
		Fmin	float64			`xml:"fmin" json:"fmin"`
		Fmax	float64			`xml:"fmax" json:"fmax"`
		Frange	*PCRealMinMax		`xml:"frange" json:"frange,omitempty"`
		Iset	[]int64			`xml:"iset" json:"iset,omitempty"`
		Imin	int64			`xml:"imin" json:"imin"`
		Imax	int64			`xml:"imax" json:"imax"`
		Irange	*PCIntegerMinMax	`xml:"irange" json:"irange,omitempty"`
		Sset	[]string		`xml:"sset" json:"sset,omitempty"`
	}					`xml:"constraints" json:"constraints,omitempty" asn1:"optional"`//Constraints,ChoiceOption
	Unit		int			`xml:"unit" json:"unit,omitempty" asn1:"optional"`//Unit,IntegerEnum:ppt(1),ppm(2),ppb(3),mm(4),um(5),nm(6),pm(7),fm(8),mgml(9),ugml(10),ngml(11),pgml(12),fgml(13),m(14),percent(15),ratio(16),sec(17),rsec(18),min(19),rmin(20),day(21),rday(22),ml-min-kg(23),l-kg(24),hr-ng-ml(25),cm-sec(26),mg-kg(27),none(254),unspecified(255)
	Sunit		string			`xml:"sunit" json:"sunit,omitempty" asn1:"optional"`
	Transform	int			`xml:"transform" json:"transform,omitempty" asn1:"optional"`//Transform,IntegerEnum:linear(1),ln(2),log(3),reciprocal(4),negative(5),nlog(6),nln(7)
	Stransform	string			`xml:"stransform" json:"stransform,omitempty" asn1:"optional"`
	Tc		*PCConcentrationAttr	`xml:"tc" json:"tc,omitempty" asn1:"optional"`
	Ac		bool			`xml:"ac" json:"ac,omitempty" asn1:"optional"`
	PanelInfo	*PCAssayPanelTestResult	`xml:"panel-info" json:"panel_info,omitempty" asn1:"optional"`
	Annot		int			`xml:"annot" json:"annot,omitempty" asn1:"optional"`//Annot,IntegerEnum:pmid(1),mmdb(2),url(3),protein-gi(4),nucleotide-gi(5),taxonomy(6),mim(7),gene(8),probe(9),aid(10),sid(11),cid(12),protein-target-gi(13),biosystems-target-id(14),target-name(15),target-descr(16),target-tax-id(17),gene-target-id(18),dna-nucleotide-target-gi(19),rna-nucleotide-target-gi(20)
}
type PCAssayPanelTestResult struct {
	Mid		int64	`xml:"mid" json:"mid"`
	ReadoutAnnot	int	`xml:"readout-annot" json:"readout_annot"`//ReadoutAnnot,IntegerEnum:regular(1),outcome(2),score(3),ac(4)
}
type PCConcentrationAttr struct {
	Concentration	float64	`xml:"concentration" json:"concentration"`
	Unit		int	`xml:"unit" json:"unit"`//Unit,IntegerEnum:um(5)
	DrId		int64	`xml:"dr-id" json:"dr_id,omitempty" asn1:"optional"`
}
type PCIntegerMinMax struct {
	Min	int64	`xml:"min" json:"min"`
	Max	int64	`xml:"max" json:"max"`
}
type PCRealMinMax struct {
	Min	float64	`xml:"min" json:"min"`
	Max	float64	`xml:"max" json:"max"`
}
package NCBIPCSubstance

import "encoding/asn1"
import "NCBIPub"
import "NCBIGeneral"

type PCSubstance struct {
	Sid		*PCID		`xml:"sid" json:"sid,omitempty"`
	Source		*PCSource	`xml:"source" json:"source,omitempty"`
	Pub		[]NCBIPub.Pub	`xml:"pub" json:"pub,omitempty" asn1:"optional"`
	Synonyms	[]string	`xml:"synonyms" json:"synonyms,omitempty" asn1:"optional"`
	Comment		[]string	`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Xref		[]PCXRefData	`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Compound	*PCCompounds	`xml:"compound" json:"compound,omitempty" asn1:"optional"`
}
type PCSubstances []PCSubstance
type PCID struct {
	Id	int64	`xml:"id" json:"id"`
	Version	int64	`xml:"version" json:"version"`
}
type PCSource struct {
	Individual	*NCBIPub.Pub	`xml:"individual" json:"individual,omitempty"`
	Db		*PCDBTracking	`xml:"db" json:"db,omitempty"`
	Mmdb		*PCMMDBSource	`xml:"mmdb" json:"mmdb,omitempty"`
}
//PCSource,ChoiceOption
type PCDBTracking struct {
	Name		string			`xml:"name" json:"name"`
	SourceId	*NCBIGeneral.ObjectId	`xml:"source-id" json:"source_id,omitempty"`
	Date		*NCBIGeneral.Date	`xml:"date" json:"date,omitempty" asn1:"optional"`
	Description	string			`xml:"description" json:"description,omitempty" asn1:"optional"`
	Pub		*NCBIPub.Pub		`xml:"pub" json:"pub,omitempty" asn1:"optional"`
}
type PCMMDBSource struct {
	MmdbId		int64		`xml:"mmdb-id" json:"mmdb_id"`
	MoleculeId	int64		`xml:"molecule-id" json:"molecule_id"`
	MoleculeName	[]string	`xml:"molecule-name" json:"molecule_name,omitempty"`
	ResidueId	int64		`xml:"residue-id" json:"residue_id,omitempty" asn1:"optional"`
	ResidueName	string		`xml:"residue-name" json:"residue_name,omitempty" asn1:"optional"`
	AtomId		int64		`xml:"atom-id" json:"atom_id,omitempty" asn1:"optional"`
	AtomName	string		`xml:"atom-name" json:"atom_name,omitempty" asn1:"optional"`
}
type PCXRefData struct {
	Regid			string	`xml:"regid" json:"regid"`
	Rn			string	`xml:"rn" json:"rn"`
	Mesh			string	`xml:"mesh" json:"mesh"`
	Pmid			int64	`xml:"pmid" json:"pmid"`
	Gi			int64	`xml:"gi" json:"gi"`
	Mmdb			int64	`xml:"mmdb" json:"mmdb"`
	Sid			int64	`xml:"sid" json:"sid"`
	Cid			int64	`xml:"cid" json:"cid"`
	Dburl			string	`xml:"dburl" json:"dburl"`
	Sburl			string	`xml:"sburl" json:"sburl"`
	Asurl			string	`xml:"asurl" json:"asurl"`
	ProteinGi		int64	`xml:"protein-gi" json:"protein_gi"`
	NucleotideGi		int64	`xml:"nucleotide-gi" json:"nucleotide_gi"`
	Taxonomy		int64	`xml:"taxonomy" json:"taxonomy"`
	Aid			int64	`xml:"aid" json:"aid"`
	Mim			int64	`xml:"mim" json:"mim"`
	Gene			int64	`xml:"gene" json:"gene"`
	Probe			int64	`xml:"probe" json:"probe"`
	Biosystem		int64	`xml:"biosystem" json:"biosystem"`
	Geogse			int64	`xml:"geogse" json:"geogse"`
	Geogsm			int64	`xml:"geogsm" json:"geogsm"`
	Patent			string	`xml:"patent" json:"patent"`
	ProteinAccession	string	`xml:"protein-accession" json:"protein_accession"`
	NucleotideAccession	string	`xml:"nucleotide-accession" json:"nucleotide_accession"`
	Doi			string	`xml:"doi" json:"doi"`
	Citation		string	`xml:"citation" json:"citation"`
}
//PCXRefData,ChoiceOption
type PCCompound struct {
	Id		*PCCompoundType		`xml:"id" json:"id,omitempty"`
	Atoms		*PCAtoms		`xml:"atoms" json:"atoms,omitempty" asn1:"optional"`
	Bonds		*PCBonds		`xml:"bonds" json:"bonds,omitempty" asn1:"optional"`
	Stereo		[]PCStereoCenter	`xml:"stereo" json:"stereo,omitempty" asn1:"optional"`
	Coords		[]PCCoordinates		`xml:"coords" json:"coords,omitempty" asn1:"optional"`
	Charge		int64			`xml:"charge" json:"charge,omitempty" asn1:"optional"`
	Props		[]PCInfoData		`xml:"props" json:"props,omitempty" asn1:"optional"`
	Stereogroups	[]PCStereoGroup		`xml:"stereogroups" json:"stereogroups,omitempty" asn1:"optional"`
	Count		*PCCount		`xml:"count" json:"count,omitempty" asn1:"optional"`
	Vbalt		*PCCompounds		`xml:"vbalt" json:"vbalt,omitempty" asn1:"optional"`
	Groups		[]PCGroup		`xml:"groups" json:"groups,omitempty" asn1:"optional"`
}
type PCCompounds []PCCompound
type PCCompoundType struct {
	Type	int	`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:deposited(0),standardized(1),component(2),neutralized(3),mixture(4),tautomer(5),pka-state(6),unknown(255)
	Id	struct {
		Cid	int64	`xml:"cid" json:"cid"`
		Sid	int64	`xml:"sid" json:"sid"`
		Xid	int64	`xml:"xid" json:"xid"`
	}	`xml:"id" json:"id,omitempty" asn1:"optional"`//Id,ChoiceOption
}
type PCGroup struct {
	Atoms		[]int64	`xml:"atoms" json:"atoms,omitempty"`
	Type		int	`xml:"type" json:"type"`//Type,IntegerEnum:sup(1),mul(2),sru(3),mon(4),mer(5),cop(6),cro(7),mod(8),gra(9),com(10),mix(11),for(12),dat(13),any(14),gen(15),unknown(255)
	Subtype		int	`xml:"subtype" json:"subtype,omitempty" asn1:"optional"`//Subtype,IntegerEnum:alt(1),ran(2),blo(3),unknown(255)
	Connectivity	int	`xml:"connectivity" json:"connectivity,omitempty" asn1:"optional"`//Connectivity,IntegerEnum:hh(1),ht(2),eu(3),unknown(255)
	Label		int64	`xml:"label" json:"label,omitempty" asn1:"optional"`
	Subscript	string	`xml:"subscript" json:"subscript,omitempty" asn1:"optional"`
	RepeatCount	struct {
		Exact	int64	`xml:"exact" json:"exact"`
		Range	struct {
			Lower	int64	`xml:"lower" json:"lower"`
			Upper	int64	`xml:"upper" json:"upper"`
		}	`xml:"range" json:"range"`
	}	`xml:"repeat-count" json:"repeat_count,omitempty" asn1:"optional"`//RepeatCount,ChoiceOption
	Bonds	struct {
		From	[]int64	`xml:"from" json:"from,omitempty"`
		To	[]int64	`xml:"to" json:"to,omitempty"`
	}	`xml:"bonds" json:"bonds,omitempty" asn1:"optional"`
	Brackets	struct {
		Left	*PCBracket	`xml:"left" json:"left,omitempty"`
		Right	*PCBracket	`xml:"right" json:"right,omitempty"`
	}	`xml:"brackets" json:"brackets,omitempty" asn1:"optional"`
}
type PCBracket struct {
	X1	float64	`xml:"x1" json:"x1"`
	Y1	float64	`xml:"y1" json:"y1"`
	X2	float64	`xml:"x2" json:"x2"`
	Y2	float64	`xml:"y2" json:"y2"`
}
type PCCount struct {
	HeavyAtom	int64	`xml:"heavy-atom" json:"heavy_atom"`
	AtomChiral	int64	`xml:"atom-chiral" json:"atom_chiral"`
	AtomChiralDef	int64	`xml:"atom-chiral-def" json:"atom_chiral_def"`
	AtomChiralUndef	int64	`xml:"atom-chiral-undef" json:"atom_chiral_undef"`
	BondChiral	int64	`xml:"bond-chiral" json:"bond_chiral"`
	BondChiralDef	int64	`xml:"bond-chiral-def" json:"bond_chiral_def"`
	BondChiralUndef	int64	`xml:"bond-chiral-undef" json:"bond_chiral_undef"`
	IsotopeAtom	int64	`xml:"isotope-atom" json:"isotope_atom"`
	CovalentUnit	int64	`xml:"covalent-unit" json:"covalent_unit"`
	Tautomers	int64	`xml:"tautomers" json:"tautomers"`
}
type PCStereoGroup struct {
	Type	int	`xml:"type" json:"type"`//Type,IntegerEnum:absolute(1),or(2),and(3),unknown(255)
	Aid	[]int64	`xml:"aid" json:"aid,omitempty"`
}
type PCInfoData struct {
	Urn	*PCUrn	`xml:"urn" json:"urn,omitempty"`
	Value	struct {
		Bval	bool			`xml:"bval" json:"bval"`
		Bvec	[]bool			`xml:"bvec" json:"bvec,omitempty"`
		Ival	int64			`xml:"ival" json:"ival"`
		Ivec	[]int64			`xml:"ivec" json:"ivec,omitempty"`
		Fval	float64			`xml:"fval" json:"fval"`
		Fvec	[]float64		`xml:"fvec" json:"fvec,omitempty"`
		Sval	string			`xml:"sval" json:"sval"`
		Slist	[]string		`xml:"slist" json:"slist,omitempty"`
		Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
		Binary	[]byte			`xml:"binary" json:"binary,omitempty"`
		Bitlist	asn1.BitString		`xml:"bitlist" json:"bitlist"`
	}	`xml:"value" json:"value"`//Value,ChoiceOption
}
type PCUrn struct {
	Label		string		`xml:"label" json:"label"`
	Name		string		`xml:"name" json:"name,omitempty" asn1:"optional"`
	Datatype	*PCUrnDataType	`xml:"datatype" json:"datatype,omitempty" asn1:"optional"`
	Parameters	string		`xml:"parameters" json:"parameters,omitempty" asn1:"optional"`
	Implementation	string		`xml:"implementation" json:"implementation,omitempty" asn1:"optional"`
	Version		string		`xml:"version" json:"version,omitempty" asn1:"optional"`
	Software	string		`xml:"software" json:"software,omitempty" asn1:"optional"`
	Source		string		`xml:"source" json:"source,omitempty" asn1:"optional"`
	Release		string		`xml:"release" json:"release,omitempty" asn1:"optional"`
}
type PCUrnDataType int
//PCUrnDataType,IntegerEnum:string(1),stringlist(2),int(3),intvec(4),uint(5),uintvec(6),double(7),doublevec(8),bool(9),boolvec(10),uint64(11),binary(12),url(13),unicode(14),date(15),fingerprint(16),unknown(255)
type PCCoordinates struct {
	Type		[]PCCoordinateType	`xml:"type" json:"type,omitempty"`
	Aid		[]int64			`xml:"aid" json:"aid,omitempty"`
	Conformers	[]PCConformer		`xml:"conformers" json:"conformers,omitempty" asn1:"optional"`
	Atomlabels	[]PCAtomString		`xml:"atomlabels" json:"atomlabels,omitempty" asn1:"optional"`
	Data		[]PCInfoData		`xml:"data" json:"data,omitempty" asn1:"optional"`
}
type PCConformer struct {
	X	[]float64		`xml:"x" json:"x,omitempty"`
	Y	[]float64		`xml:"y" json:"y,omitempty"`
	Z	[]float64		`xml:"z" json:"z,omitempty" asn1:"optional"`
	Style	*PCDrawAnnotations	`xml:"style" json:"style,omitempty" asn1:"optional"`
	Data	[]PCInfoData		`xml:"data" json:"data,omitempty" asn1:"optional"`
}
type PCConformers []PCConformer
type PCCoordinateType int
//PCCoordinateType,IntegerEnum:twod(1),threed(2),submitted(3),experimental(4),computed(5),standardized(6),augmented(7),aligned(8),compact(9),units-angstroms(10),units-nanometers(11),units-pixel(12),units-points(13),units-stdbonds(14),units-unknown(255)
type PCDrawAnnotations struct {
	Annotation	[]PCBondAnnotation	`xml:"annotation" json:"annotation,omitempty"`
	Aid1		[]int64			`xml:"aid1" json:"aid1,omitempty"`
	Aid2		[]int64			`xml:"aid2" json:"aid2,omitempty"`
}
type PCBondAnnotation int
//PCBondAnnotation,IntegerEnum:crossed(1),dashed(2),wavy(3),dotted(4),wedge-up(5),wedge-down(6),arrow(7),aromatic(8),resonance(9),bold(10),fischer(11),closeContact(12),unknown(255)
type PCAtoms struct {
	Aid	[]int64		`xml:"aid" json:"aid,omitempty"`
	Element	[]PCElement	`xml:"element" json:"element,omitempty"`
	Label	[]PCAtomString	`xml:"label" json:"label,omitempty" asn1:"optional"`
	Isotope	[]PCAtomInt	`xml:"isotope" json:"isotope,omitempty" asn1:"optional"`
	Charge	[]PCAtomInt	`xml:"charge" json:"charge,omitempty" asn1:"optional"`
	Radical	[]PCAtomRadical	`xml:"radical" json:"radical,omitempty" asn1:"optional"`
	Source	[]PCAtomSource	`xml:"source" json:"source,omitempty" asn1:"optional"`
	Comment	[]PCAtomString	`xml:"comment" json:"comment,omitempty" asn1:"optional"`
}
type PCAtomSource struct {
	Aid	int64		`xml:"aid" json:"aid"`
	Source	*PCMMDBSource	`xml:"source" json:"source,omitempty"`
}
type PCAtomInt struct {
	Aid	int64	`xml:"aid" json:"aid"`
	Value	int64	`xml:"value" json:"value"`
}
type PCAtomString struct {
	Aid	int64	`xml:"aid" json:"aid"`
	Value	string	`xml:"value" json:"value"`
}
type PCAtomRadical struct {
	Aid	int64	`xml:"aid" json:"aid"`
	Type	int	`xml:"type" json:"type"`//Type,IntegerEnum:singlet(1),doublet(2),triplet(3),quartet(4),quintet(5),hextet(6),heptet(7),octet(8),none(255)
}
type PCElement int
//PCElement,IntegerEnum:a(255),d(254),r(253),lp(252),h(1),he(2),li(3),be(4),b(5),c(6),n(7),o(8),f(9),ne(10),na(11),mg(12),al(13),si(14),p(15),s(16),cl(17),ar(18),k(19),ca(20),sc(21),ti(22),v(23),cr(24),mn(25),fe(26),co(27),ni(28),cu(29),zn(30),ga(31),ge(32),as(33),se(34),br(35),kr(36),rb(37),sr(38),y(39),zr(40),nb(41),mo(42),tc(43),ru(44),rh(45),pd(46),ag(47),cd(48),in(49),sn(50),sb(51),te(52),i(53),xe(54),cs(55),ba(56),la(57),ce(58),pr(59),nd(60),pm(61),sm(62),eu(63),gd(64),tb(65),dy(66),ho(67),er(68),tm(69),yb(70),lu(71),hf(72),ta(73),w(74),re(75),os(76),ir(77),pt(78),au(79),hg(80),tl(81),pb(82),bi(83),po(84),at(85),rn(86),fr(87),ra(88),ac(89),th(90),pa(91),u(92),np(93),pu(94),am(95),cm(96),bk(97),cf(98),es(99),fm(100),md(101),no(102),lr(103),rf(104),db(105),sg(106),bh(107),hs(108),mt(109),ds(110),rg(111),cn(112),nh(113),fl(114),mc(115),lv(116),ts(117),og(118)
type PCBonds struct {
	Aid1	[]int64		`xml:"aid1" json:"aid1,omitempty"`
	Aid2	[]int64		`xml:"aid2" json:"aid2,omitempty"`
	Order	[]PCBondType	`xml:"order" json:"order,omitempty"`
}
type PCBondType int
//PCBondType,IntegerEnum:single(1),double(2),triple(3),quadruple(4),dative(5),complex(6),ionic(7),unknown(255)
type PCStereoCenter struct {
	Tetrahedral	*PCStereoTetrahedral		`xml:"tetrahedral" json:"tetrahedral,omitempty"`
	Planar		*PCStereoPlanar			`xml:"planar" json:"planar,omitempty"`
	Squareplanar	*PCStereoSquarePlanar		`xml:"squareplanar" json:"squareplanar,omitempty"`
	Octahedral	*PCStereoOctahedral		`xml:"octahedral" json:"octahedral,omitempty"`
	Bipyramid	*PCStereoTrigonalBiPyramid	`xml:"bipyramid" json:"bipyramid,omitempty"`
	Tshape		*PCStereoTShape			`xml:"tshape" json:"tshape,omitempty"`
	Pentagonal	*PCStereoPentagonalBiPyramid	`xml:"pentagonal" json:"pentagonal,omitempty"`
}
//PCStereoCenter,ChoiceOption
type PCStereoTetrahedral struct {
	Center	int64	`xml:"center" json:"center"`
	Above	int64	`xml:"above" json:"above"`
	Top	int64	`xml:"top" json:"top"`
	Bottom	int64	`xml:"bottom" json:"bottom"`
	Below	int64	`xml:"below" json:"below"`
	Parity	int	`xml:"parity" json:"parity,omitempty" asn1:"optional"`//Parity,IntegerEnum:clockwise(1),counterclockwise(2),any(3),unknown(255)
	Type	int	`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:tetrahedral(1),cumulenic(2),biaryl(3)
}
type PCStereoPlanar struct {
	Left	int64	`xml:"left" json:"left"`
	Ltop	int64	`xml:"ltop" json:"ltop"`
	Lbottom	int64	`xml:"lbottom" json:"lbottom"`
	Right	int64	`xml:"right" json:"right"`
	Rtop	int64	`xml:"rtop" json:"rtop"`
	Rbottom	int64	`xml:"rbottom" json:"rbottom"`
	Parity	int	`xml:"parity" json:"parity,omitempty" asn1:"optional"`//Parity,IntegerEnum:same(1),opposite(2),any(3),unknown(255)
	Type	int	`xml:"type" json:"type,omitempty" asn1:"optional"`//Type,IntegerEnum:planar(1),cumulenic(2)
}
type PCStereoSquarePlanar struct {
	Center	int64	`xml:"center" json:"center"`
	Lbelow	int64	`xml:"lbelow" json:"lbelow"`
	Rbelow	int64	`xml:"rbelow" json:"rbelow"`
	Labove	int64	`xml:"labove" json:"labove"`
	Rabove	int64	`xml:"rabove" json:"rabove"`
	Parity	int	`xml:"parity" json:"parity,omitempty" asn1:"optional"`//Parity,IntegerEnum:u-shape(1),z-shape(2),x-shape(3),any(4),unknown(255)
}
type PCStereoOctahedral struct {
	Center	int64	`xml:"center" json:"center"`
	Top	int64	`xml:"top" json:"top"`
	Bottom	int64	`xml:"bottom" json:"bottom"`
	Labove	int64	`xml:"labove" json:"labove"`
	Lbelow	int64	`xml:"lbelow" json:"lbelow"`
	Rabove	int64	`xml:"rabove" json:"rabove"`
	Rbelow	int64	`xml:"rbelow" json:"rbelow"`
}
type PCStereoTrigonalBiPyramid struct {
	Center	int64	`xml:"center" json:"center"`
	Above	int64	`xml:"above" json:"above"`
	Below	int64	`xml:"below" json:"below"`
	Top	int64	`xml:"top" json:"top"`
	Bottom	int64	`xml:"bottom" json:"bottom"`
	Right	int64	`xml:"right" json:"right"`
}
type PCStereoTShape struct {
	Center	int64	`xml:"center" json:"center"`
	Top	int64	`xml:"top" json:"top"`
	Bottom	int64	`xml:"bottom" json:"bottom"`
	Above	int64	`xml:"above" json:"above"`
}
type PCStereoPentagonalBiPyramid struct {
	Center	int64	`xml:"center" json:"center"`
	Top	int64	`xml:"top" json:"top"`
	Bottom	int64	`xml:"bottom" json:"bottom"`
	Left	int64	`xml:"left" json:"left"`
	Labove	int64	`xml:"labove" json:"labove"`
	Lbelow	int64	`xml:"lbelow" json:"lbelow"`
	Rabove	int64	`xml:"rabove" json:"rabove"`
	Rbelow	int64	`xml:"rbelow" json:"rbelow"`
}
package NCBIProject

import "NCBIGeneral"
import "NCBIBiblio"
import "NCBISeqloc"
import "NCBISequence"
import "NCBISeqset"
import "NCBIPubMed"

type Project struct {
	Descr	*ProjectDescr	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Data	*ProjectItem	`xml:"data" json:"data,omitempty"`
}
type ProjectItem struct {
	Pmuid		[]int64				`xml:"pmuid" json:"pmuid,omitempty"`
	Protuid		[]int64				`xml:"protuid" json:"protuid,omitempty"`
	Nucuid		[]int64				`xml:"nucuid" json:"nucuid,omitempty"`
	Sequid		[]int64				`xml:"sequid" json:"sequid,omitempty"`
	Genomeuid	[]int64				`xml:"genomeuid" json:"genomeuid,omitempty"`
	Structuid	[]int64				`xml:"structuid" json:"structuid,omitempty"`
	Pmid		[]NCBIBiblio.PubMedId		`xml:"pmid" json:"pmid,omitempty"`
	Protid		[]NCBISeqloc.SeqId		`xml:"protid" json:"protid,omitempty"`
	Nucid		[]NCBISeqloc.SeqId		`xml:"nucid" json:"nucid,omitempty"`
	Seqid		[]NCBISeqloc.SeqId		`xml:"seqid" json:"seqid,omitempty"`
	Genomeid	[]NCBISeqloc.SeqId		`xml:"genomeid" json:"genomeid,omitempty"`
	Structid	interface{}			`xml:"structid" json:"structid"`
	Pment		[]NCBIPubMed.PubmedEntry	`xml:"pment" json:"pment,omitempty"`
	Protent		[]NCBISeqset.SeqEntry		`xml:"protent" json:"protent,omitempty"`
	Nucent		[]NCBISeqset.SeqEntry		`xml:"nucent" json:"nucent,omitempty"`
	Seqent		[]NCBISeqset.SeqEntry		`xml:"seqent" json:"seqent,omitempty"`
	Genomeent	[]NCBISeqset.SeqEntry		`xml:"genomeent" json:"genomeent,omitempty"`
	Structent	interface{}			`xml:"structent" json:"structent"`
	Seqannot	[]NCBISequence.SeqAnnot		`xml:"seqannot" json:"seqannot,omitempty"`
	Loc		[]NCBISeqloc.SeqLoc		`xml:"loc" json:"loc,omitempty"`
	Proj		[]Project			`xml:"proj" json:"proj,omitempty"`
}
//ProjectItem,ChoiceOption
type ProjectDescr struct {
	Id	[]ProjectId	`xml:"id" json:"id,omitempty"`
	Name	string		`xml:"name" json:"name,omitempty" asn1:"optional"`
	Descr	[]Projdesc	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
}
type Projdesc struct {
	Pub	*NCBISequence.Pubdesc	`xml:"pub" json:"pub,omitempty"`
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
	Comment	string			`xml:"comment" json:"comment"`
	Title	string			`xml:"title" json:"title"`
}
//Projdesc,ChoiceOption
type ProjectId string
package NCBIPub

import "NCBIMedline"
import "NCBIBiblio"

type Pub struct {
	Gen	*NCBIBiblio.CitGen		`xml:"gen" json:"gen,omitempty"`
	Sub	*NCBIBiblio.CitSub		`xml:"sub" json:"sub,omitempty"`
	Medline	*NCBIMedline.MedlineEntry	`xml:"medline" json:"medline,omitempty"`
	Muid	int64				`xml:"muid" json:"muid"`
	Article	*NCBIBiblio.CitArt		`xml:"article" json:"article,omitempty"`
	Journal	*NCBIBiblio.CitJour		`xml:"journal" json:"journal,omitempty"`
	Book	*NCBIBiblio.CitBook		`xml:"book" json:"book,omitempty"`
	Proc	*NCBIBiblio.CitProc		`xml:"proc" json:"proc,omitempty"`
	Patent	*NCBIBiblio.CitPat		`xml:"patent" json:"patent,omitempty"`
	PatId	*NCBIBiblio.IdPat		`xml:"pat-id" json:"pat_id,omitempty"`
	Man	*NCBIBiblio.CitLet		`xml:"man" json:"man,omitempty"`
	Equiv	*PubEquiv			`xml:"equiv" json:"equiv,omitempty"`
	Pmid	*NCBIBiblio.PubMedId		`xml:"pmid" json:"pmid,omitempty"`
}
//Pub,ChoiceOption
type PubEquiv []Pub
type PubSet struct {
	Pub	[]Pub				`xml:"pub" json:"pub,omitempty"`
	Medline	[]NCBIMedline.MedlineEntry	`xml:"medline" json:"medline,omitempty"`
	Article	[]NCBIBiblio.CitArt		`xml:"article" json:"article,omitempty"`
	Journal	[]NCBIBiblio.CitJour		`xml:"journal" json:"journal,omitempty"`
	Book	[]NCBIBiblio.CitBook		`xml:"book" json:"book,omitempty"`
	Proc	[]NCBIBiblio.CitProc		`xml:"proc" json:"proc,omitempty"`
	Patent	[]NCBIBiblio.CitPat		`xml:"patent" json:"patent,omitempty"`
}
//PubSet,ChoiceOption
package NCBIPubMed

import "NCBIBiblio"
import "NCBIMedline"

type PubmedEntry struct {
	Pmid		*NCBIBiblio.PubMedId		`xml:"pmid" json:"pmid,omitempty"`
	Medent		*NCBIMedline.MedlineEntry	`xml:"medent" json:"medent,omitempty" asn1:"optional"`
	Publisher	string				`xml:"publisher" json:"publisher,omitempty" asn1:"optional"`
	Urls		[]PubmedUrl			`xml:"urls" json:"urls,omitempty" asn1:"optional"`
	Pubid		string				`xml:"pubid" json:"pubid,omitempty" asn1:"optional"`
}
type PubmedUrl struct {
	Location	string	`xml:"location" json:"location,omitempty" asn1:"optional"`
	Url		string	`xml:"url" json:"url"`
}
package NCBIRemap

import "NCBISeqloc"

type RemapDt int64
type RemapDbId string
type RemapRequest struct {
	Request	*RMRequest	`xml:"request" json:"request,omitempty"`
	Version	int64		`xml:"version" json:"version"`
	Tool	string		`xml:"tool" json:"tool,omitempty" asn1:"optional"`
}
type RMRequest struct {
	Remap		*RemapQuery	`xml:"remap" json:"remap,omitempty"`
	MapsToBuilds	string		`xml:"maps-to-builds" json:"maps_to_builds"`
	MapsFromBuilds	string		`xml:"maps-from-builds" json:"maps_from_builds"`
	AllBuilds	interface{}	`xml:"all-builds" json:"all_builds"`
}
//RMRequest,ChoiceOption
type RemapQuery struct {
	FromBuild	string			`xml:"from-build" json:"from_build"`
	ToBuild		string			`xml:"to-build" json:"to_build"`
	Locs		[]NCBISeqloc.SeqLoc	`xml:"locs" json:"locs,omitempty"`
}
type RemapReply struct {
	Reply	*RMReply	`xml:"reply" json:"reply,omitempty"`
	Dt	*RemapDt	`xml:"dt" json:"dt,omitempty"`
	Server	string		`xml:"server" json:"server"`
	Msg	string		`xml:"msg" json:"msg,omitempty" asn1:"optional"`
}
type RMReply struct {
	Error		string		`xml:"error" json:"error"`
	Remap		*RemapResult	`xml:"remap" json:"remap,omitempty"`
	MapsToBuilds	[]string	`xml:"maps-to-builds" json:"maps_to_builds,omitempty"`
	MapsFromBuilds	[]string	`xml:"maps-from-builds" json:"maps_from_builds,omitempty"`
	AllBuilds	[]string	`xml:"all-builds" json:"all_builds,omitempty"`
}
//RMReply,ChoiceOption
type RemapResult []NCBISeqloc.SeqLoc
package NCBIScoreMat

import "NCBIGeneral"
import "NCBISeqset"

type BlockProperty struct {
	Type		int	`xml:"type" json:"type"`//Type,IntegerEnum:unassigned(0),threshold(1),minscore(2),maxscore(3),meanscore(4),variance(5),name(10),is-optional(20),other(255)
	Intvalue	int64	`xml:"intvalue" json:"intvalue,omitempty" asn1:"optional"`
	Textvalue	string	`xml:"textvalue" json:"textvalue,omitempty" asn1:"optional"`
}
type CoreBlock struct {
	Start		int64		`xml:"start" json:"start"`
	Stop		int64		`xml:"stop" json:"stop"`
	Minstart	int64		`xml:"minstart" json:"minstart,omitempty" asn1:"optional"`
	Maxstop		int64		`xml:"maxstop" json:"maxstop,omitempty" asn1:"optional"`
	Property	[]BlockProperty	`xml:"property" json:"property,omitempty" asn1:"optional"`
}
type LoopConstraint struct {
	Minlength	int64	`xml:"minlength" json:"minlength" asn1:"default:0"`
	Maxlength	int64	`xml:"maxlength" json:"maxlength" asn1:"default:100000"`
}
type CoreDef struct {
	Nblocks		int64			`xml:"nblocks" json:"nblocks"`
	Blocks		[]CoreBlock		`xml:"blocks" json:"blocks,omitempty"`
	Loops		[]LoopConstraint	`xml:"loops" json:"loops,omitempty"`
	IsDiscontinuous	bool			`xml:"isDiscontinuous" json:"isDiscontinuous,omitempty" asn1:"optional"`
	Insertions	[]int64			`xml:"insertions" json:"insertions,omitempty" asn1:"optional"`
}
type SiteAnnot struct {
	StartPosition	int64		`xml:"startPosition" json:"startPosition"`
	StopPosition	int64		`xml:"stopPosition" json:"stopPosition"`
	Description	string		`xml:"description" json:"description,omitempty" asn1:"optional"`
	Type		int64		`xml:"type" json:"type,omitempty" asn1:"optional"`
	Aliases		[]string	`xml:"aliases" json:"aliases,omitempty" asn1:"optional"`
	Motif		string		`xml:"motif" json:"motif,omitempty" asn1:"optional"`
	Motifuse	int64		`xml:"motifuse" json:"motifuse,omitempty" asn1:"optional"`
}
type SiteAnnotSet []SiteAnnot
type PssmFinalData struct {
	Scores			[]int64	`xml:"scores" json:"scores,omitempty"`
	Lambda			float64	`xml:"lambda" json:"lambda"`
	Kappa			float64	`xml:"kappa" json:"kappa"`
	H			float64	`xml:"h" json:"h"`
	ScalingFactor		int64	`xml:"scalingFactor" json:"scalingFactor" asn1:"default:1"`
	LambdaUngapped		float64	`xml:"lambdaUngapped" json:"lambdaUngapped,omitempty" asn1:"optional"`
	KappaUngapped		float64	`xml:"kappaUngapped" json:"kappaUngapped,omitempty" asn1:"optional"`
	HUngapped		float64	`xml:"hUngapped" json:"hUngapped,omitempty" asn1:"optional"`
	WordScoreThreshold	float64	`xml:"wordScoreThreshold" json:"wordScoreThreshold,omitempty" asn1:"optional"`
}
type PssmIntermediateData struct {
	ResFreqsPerPos		[]int64		`xml:"resFreqsPerPos" json:"resFreqsPerPos,omitempty" asn1:"optional"`
	WeightedResFreqsPerPos	[]float64	`xml:"weightedResFreqsPerPos" json:"weightedResFreqsPerPos,omitempty" asn1:"optional"`
	FreqRatios		[]float64	`xml:"freqRatios" json:"freqRatios,omitempty"`
	InformationContent	[]float64	`xml:"informationContent" json:"informationContent,omitempty" asn1:"optional"`
	GaplessColumnWeights	[]float64	`xml:"gaplessColumnWeights" json:"gaplessColumnWeights,omitempty" asn1:"optional"`
	Sigma			[]float64	`xml:"sigma" json:"sigma,omitempty" asn1:"optional"`
	IntervalSizes		[]int64		`xml:"intervalSizes" json:"intervalSizes,omitempty" asn1:"optional"`
	NumMatchingSeqs		[]int64		`xml:"numMatchingSeqs" json:"numMatchingSeqs,omitempty" asn1:"optional"`
	NumIndeptObsr		[]float64	`xml:"numIndeptObsr" json:"numIndeptObsr,omitempty" asn1:"optional"`
}
type Pssm struct {
	IsProtein		bool			`xml:"isProtein" json:"isProtein"`
	Identifier		*NCBIGeneral.ObjectId	`xml:"identifier" json:"identifier,omitempty" asn1:"optional"`
	NumRows			int64			`xml:"numRows" json:"numRows"`
	NumColumns		int64			`xml:"numColumns" json:"numColumns"`
	RowLabels		[]string		`xml:"rowLabels" json:"rowLabels,omitempty" asn1:"optional"`
	ByRow			bool			`xml:"byRow" json:"byRow"`
	Query			*NCBISeqset.SeqEntry	`xml:"query" json:"query,omitempty" asn1:"optional"`
	IntermediateData	*PssmIntermediateData	`xml:"intermediateData" json:"intermediateData,omitempty" asn1:"optional"`
	FinalData		*PssmFinalData		`xml:"finalData" json:"finalData,omitempty" asn1:"optional"`
}
type FormatRpsDbParameters struct {
	MatrixName	string	`xml:"matrixName" json:"matrixName"`
	GapOpen		int64	`xml:"gapOpen" json:"gapOpen,omitempty" asn1:"optional"`
	GapExtend	int64	`xml:"gapExtend" json:"gapExtend,omitempty" asn1:"optional"`
}
type PssmParameters struct {
	Pseudocount	int64			`xml:"pseudocount" json:"pseudocount,omitempty" asn1:"optional"`
	Rpsdbparams	*FormatRpsDbParameters	`xml:"rpsdbparams" json:"rpsdbparams,omitempty" asn1:"optional"`
	Constraints	*CoreDef		`xml:"constraints" json:"constraints,omitempty" asn1:"optional"`
	BitScoreThresh	float64			`xml:"bitScoreThresh" json:"bitScoreThresh,omitempty" asn1:"optional"`
	AnnotatedSites	*SiteAnnotSet		`xml:"annotatedSites" json:"annotatedSites,omitempty" asn1:"optional"`
}
type PssmWithParameters struct {
	Pssm	*Pssm		`xml:"pssm" json:"pssm,omitempty"`
	Params	*PssmParameters	`xml:"params" json:"params,omitempty" asn1:"optional"`
}
package NCBISeqalign

import "NCBISeqloc"
import "NCBIGeneral"

type SeqAlignSet []SeqAlign
type SeqAlign struct {
	Type	string	`xml:"type" json:"type"`//Type,EnumList:not-set(0),global(1),diags(2),partial(3),disc(4),other(255)
	Dim	int64	`xml:"dim" json:"dim,omitempty" asn1:"optional"`
	Score	[]Score	`xml:"score" json:"score,omitempty" asn1:"optional"`
	Segs	struct {
		Dendiag	[]DenseDiag	`xml:"dendiag" json:"dendiag,omitempty"`
		Denseg	*DenseSeg	`xml:"denseg" json:"denseg,omitempty"`
		Std	[]StdSeg	`xml:"std" json:"std,omitempty"`
		Packed	*PackedSeg	`xml:"packed" json:"packed,omitempty"`
		Disc	*SeqAlignSet	`xml:"disc" json:"disc,omitempty"`
		Spliced	*SplicedSeg	`xml:"spliced" json:"spliced,omitempty"`
		Sparse	*SparseSeg	`xml:"sparse" json:"sparse,omitempty"`
	}					`xml:"segs" json:"segs"`//Segs,ChoiceOption
	Bounds	[]NCBISeqloc.SeqLoc		`xml:"bounds" json:"bounds,omitempty" asn1:"optional"`
	Id	[]NCBIGeneral.ObjectId		`xml:"id" json:"id,omitempty" asn1:"optional"`
	Ext	[]NCBIGeneral.UserObject	`xml:"ext" json:"ext,omitempty" asn1:"optional"`
}
type DenseDiag struct {
	Dim	int64			`xml:"dim" json:"dim" asn1:"default:2"`
	Ids	[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty"`
	Starts	[]int64			`xml:"starts" json:"starts,omitempty"`
	Len	int64			`xml:"len" json:"len"`
	Strands	[]NCBISeqloc.NaStrand	`xml:"strands" json:"strands,omitempty" asn1:"optional"`
	Scores	[]Score			`xml:"scores" json:"scores,omitempty" asn1:"optional"`
}
type DenseSeg struct {
	Dim	int64			`xml:"dim" json:"dim" asn1:"default:2"`
	Numseg	int64			`xml:"numseg" json:"numseg"`
	Ids	[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty"`
	Starts	[]int64			`xml:"starts" json:"starts,omitempty"`
	Lens	[]int64			`xml:"lens" json:"lens,omitempty"`
	Strands	[]NCBISeqloc.NaStrand	`xml:"strands" json:"strands,omitempty" asn1:"optional"`
	Scores	[]Score			`xml:"scores" json:"scores,omitempty" asn1:"optional"`
}
type PackedSeg struct {
	Dim	int64			`xml:"dim" json:"dim" asn1:"default:2"`
	Numseg	int64			`xml:"numseg" json:"numseg"`
	Ids	[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty"`
	Starts	[]int64			`xml:"starts" json:"starts,omitempty"`
	Present	[]byte			`xml:"present" json:"present,omitempty"`
	Lens	[]int64			`xml:"lens" json:"lens,omitempty"`
	Strands	[]NCBISeqloc.NaStrand	`xml:"strands" json:"strands,omitempty" asn1:"optional"`
	Scores	[]Score			`xml:"scores" json:"scores,omitempty" asn1:"optional"`
}
type StdSeg struct {
	Dim	int64			`xml:"dim" json:"dim" asn1:"default:2"`
	Ids	[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty" asn1:"optional"`
	Loc	[]NCBISeqloc.SeqLoc	`xml:"loc" json:"loc,omitempty"`
	Scores	[]Score			`xml:"scores" json:"scores,omitempty" asn1:"optional"`
}
type SplicedSeg struct {
	ProductId	*NCBISeqloc.SeqId	`xml:"product-id" json:"product_id,omitempty" asn1:"optional"`
	GenomicId	*NCBISeqloc.SeqId	`xml:"genomic-id" json:"genomic_id,omitempty" asn1:"optional"`
	ProductStrand	*NCBISeqloc.NaStrand	`xml:"product-strand" json:"product_strand,omitempty" asn1:"optional"`
	GenomicStrand	*NCBISeqloc.NaStrand	`xml:"genomic-strand" json:"genomic_strand,omitempty" asn1:"optional"`
	ProductType	string			`xml:"product-type" json:"product_type"`//ProductType,EnumList:transcript(0),protein(1)
	Exons		[]SplicedExon		`xml:"exons" json:"exons,omitempty"`
	PolyA		int64			`xml:"poly-a" json:"poly_a,omitempty" asn1:"optional"`
	ProductLength	int64			`xml:"product-length" json:"product_length,omitempty" asn1:"optional"`
	Modifiers	[]SplicedSegModifier	`xml:"modifiers" json:"modifiers,omitempty" asn1:"optional"`
}
type SplicedSegModifier struct {
	StartCodonFound	bool	`xml:"start-codon-found" json:"start_codon_found"`
	StopCodonFound	bool	`xml:"stop-codon-found" json:"stop_codon_found"`
}
//SplicedSegModifier,ChoiceOption
type SplicedExon struct {
	ProductStart		*ProductPos			`xml:"product-start" json:"product_start,omitempty"`
	ProductEnd		*ProductPos			`xml:"product-end" json:"product_end,omitempty"`
	GenomicStart		int64				`xml:"genomic-start" json:"genomic_start"`
	GenomicEnd		int64				`xml:"genomic-end" json:"genomic_end"`
	ProductId		*NCBISeqloc.SeqId		`xml:"product-id" json:"product_id,omitempty" asn1:"optional"`
	GenomicId		*NCBISeqloc.SeqId		`xml:"genomic-id" json:"genomic_id,omitempty" asn1:"optional"`
	ProductStrand		*NCBISeqloc.NaStrand		`xml:"product-strand" json:"product_strand,omitempty" asn1:"optional"`
	GenomicStrand		*NCBISeqloc.NaStrand		`xml:"genomic-strand" json:"genomic_strand,omitempty" asn1:"optional"`
	Parts			[]SplicedExonChunk		`xml:"parts" json:"parts,omitempty" asn1:"optional"`
	Scores			*ScoreSet			`xml:"scores" json:"scores,omitempty" asn1:"optional"`
	AcceptorBeforeExon	*SpliceSite			`xml:"acceptor-before-exon" json:"acceptor_before_exon,omitempty" asn1:"optional"`
	DonorAfterExon		*SpliceSite			`xml:"donor-after-exon" json:"donor_after_exon,omitempty" asn1:"optional"`
	Partial			bool				`xml:"partial" json:"partial,omitempty" asn1:"optional"`
	Ext			[]NCBIGeneral.UserObject	`xml:"ext" json:"ext,omitempty" asn1:"optional"`
}
type ProductPos struct {
	Nucpos	int64		`xml:"nucpos" json:"nucpos"`
	Protpos	*ProtPos	`xml:"protpos" json:"protpos,omitempty"`
}
//ProductPos,ChoiceOption
type ProtPos struct {
	Amin	int64	`xml:"amin" json:"amin"`
	Frame	int64	`xml:"frame" json:"frame" asn1:"default:0"`
}
type SplicedExonChunk struct {
	Match		int64	`xml:"match" json:"match"`
	Mismatch	int64	`xml:"mismatch" json:"mismatch"`
	Diag		int64	`xml:"diag" json:"diag"`
	ProductIns	int64	`xml:"product-ins" json:"product_ins"`
	GenomicIns	int64	`xml:"genomic-ins" json:"genomic_ins"`
}
//SplicedExonChunk,ChoiceOption
type SpliceSite struct {
	Bases string `xml:"bases" json:"bases"`
}
type SparseSeg struct {
	MasterId	*NCBISeqloc.SeqId	`xml:"master-id" json:"master_id,omitempty" asn1:"optional"`
	Rows		[]SparseAlign		`xml:"rows" json:"rows,omitempty"`
	RowScores	[]Score			`xml:"row-scores" json:"row_scores,omitempty" asn1:"optional"`
	Ext		[]SparseSegExt		`xml:"ext" json:"ext,omitempty" asn1:"optional"`
}
type SparseAlign struct {
	FirstId		*NCBISeqloc.SeqId	`xml:"first-id" json:"first_id,omitempty"`
	SecondId	*NCBISeqloc.SeqId	`xml:"second-id" json:"second_id,omitempty"`
	Numseg		int64			`xml:"numseg" json:"numseg"`
	FirstStarts	[]int64			`xml:"first-starts" json:"first_starts,omitempty"`
	SecondStarts	[]int64			`xml:"second-starts" json:"second_starts,omitempty"`
	Lens		[]int64			`xml:"lens" json:"lens,omitempty"`
	SecondStrands	[]NCBISeqloc.NaStrand	`xml:"second-strands" json:"second_strands,omitempty" asn1:"optional"`
	SegScores	[]Score			`xml:"seg-scores" json:"seg_scores,omitempty" asn1:"optional"`
}
type SparseSegExt struct {
	Index int64 `xml:"index" json:"index"`
}
type Score struct {
	Id	*NCBIGeneral.ObjectId	`xml:"id" json:"id,omitempty" asn1:"optional"`
	Value	struct {
		Real	float64	`xml:"real" json:"real"`
		Int	int64	`xml:"int" json:"int"`
	}	`xml:"value" json:"value"`//Value,ChoiceOption
}
type ScoreSet []Score
package NCBISequence

import "NCBIGeneral"
import "NCBISeqalign"
import "NCBISeqfeat"
import "NCBISeqres"
import "NCBIPub"
import "NCBIOrganism"
import "NCBIBioSource"
import "NCBISeqloc"
import "GenBankGeneral"
import "PIRGeneral"
import "EMBLGeneral"
import "SPGeneral"
import "PRFGeneral"
import "PDBGeneral"
import "NCBISeqTable"

type Bioseq struct {
	Id	[]NCBISeqloc.SeqId	`xml:"id" json:"id,omitempty"`
	Descr	*SeqDescr		`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Inst	*SeqInst		`xml:"inst" json:"inst,omitempty"`
	Annot	[]SeqAnnot		`xml:"annot" json:"annot,omitempty" asn1:"optional"`
}
type SeqDescr []Seqdesc
type Seqdesc struct {
	MolType		*GIBBMol				`xml:"mol-type" json:"mol_type,omitempty"`
	Modif		[]GIBBMod				`xml:"modif" json:"modif,omitempty"`
	Method		*GIBBMethod				`xml:"method" json:"method,omitempty"`
	Name		string					`xml:"name" json:"name"`
	Title		string					`xml:"title" json:"title"`
	Org		*NCBIOrganism.OrgRef			`xml:"org" json:"org,omitempty"`
	Comment		string					`xml:"comment" json:"comment"`
	Num		*Numbering				`xml:"num" json:"num,omitempty"`
	Maploc		*NCBIGeneral.Dbtag			`xml:"maploc" json:"maploc,omitempty"`
	Pir		*PIRGeneral.PIRBlock			`xml:"pir" json:"pir,omitempty"`
	Genbank		*GenBankGeneral.GBBlock			`xml:"genbank" json:"genbank,omitempty"`
	Pub		*Pubdesc				`xml:"pub" json:"pub,omitempty"`
	Region		string					`xml:"region" json:"region"`
	User		*NCBIGeneral.UserObject			`xml:"user" json:"user,omitempty"`
	Sp		*SPGeneral.SPBlock			`xml:"sp" json:"sp,omitempty"`
	Dbxref		*NCBIGeneral.Dbtag			`xml:"dbxref" json:"dbxref,omitempty"`
	Embl		*EMBLGeneral.EMBLBlock			`xml:"embl" json:"embl,omitempty"`
	CreateDate	*NCBIGeneral.Date			`xml:"create-date" json:"create_date,omitempty"`
	UpdateDate	*NCBIGeneral.Date			`xml:"update-date" json:"update_date,omitempty"`
	Prf		*PRFGeneral.PRFBlock			`xml:"prf" json:"prf,omitempty"`
	Pdb		*PDBGeneral.PDBBlock			`xml:"pdb" json:"pdb,omitempty"`
	Het		*Heterogen				`xml:"het" json:"het,omitempty"`
	Source		*NCBIBioSource.BioSource		`xml:"source" json:"source,omitempty"`
	Molinfo		*MolInfo				`xml:"molinfo" json:"molinfo,omitempty"`
	Modelev		*NCBISeqfeat.ModelEvidenceSupport	`xml:"modelev" json:"modelev,omitempty"`
}
//Seqdesc,ChoiceOption
type MolInfo struct {
	Biomol		int	`xml:"biomol" json:"biomol"`//Biomol,IntegerEnum:unknown(0),genomic(1),pre-RNA(2),mRNA(3),rRNA(4),tRNA(5),snRNA(6),scRNA(7),peptide(8),other-genetic(9),genomic-mRNA(10),cRNA(11),snoRNA(12),transcribed-RNA(13),ncRNA(14),tmRNA(15),other(255)
	Tech		int	`xml:"tech" json:"tech"`//Tech,IntegerEnum:unknown(0),standard(1),est(2),sts(3),survey(4),genemap(5),physmap(6),derived(7),concept-trans(8),seq-pept(9),both(10),seq-pept-overlap(11),seq-pept-homol(12),concept-trans-a(13),htgs-1(14),htgs-2(15),htgs-3(16),fli-cdna(17),htgs-0(18),htc(19),wgs(20),barcode(21),composite-wgs-htgs(22),tsa(23),targeted(24),other(255)
	Techexp		string	`xml:"techexp" json:"techexp,omitempty" asn1:"optional"`
	Completeness	int	`xml:"completeness" json:"completeness"`//Completeness,IntegerEnum:unknown(0),complete(1),partial(2),no-left(3),no-right(4),no-ends(5),has-left(6),has-right(7),other(255)
	Gbmoltype	string	`xml:"gbmoltype" json:"gbmoltype,omitempty" asn1:"optional"`
}
type GIBBMol string
//GIBBMol,EnumList:unknown(0),genomic(1),pre-mRNA(2),mRNA(3),rRNA(4),tRNA(5),snRNA(6),scRNA(7),peptide(8),other-genetic(9),genomic-mRNA(10),other(255)
type GIBBMod string
//GIBBMod,EnumList:dna(0),rna(1),extrachrom(2),plasmid(3),mitochondrial(4),chloroplast(5),kinetoplast(6),cyanelle(7),synthetic(8),recombinant(9),partial(10),complete(11),mutagen(12),natmut(13),transposon(14),insertion-seq(15),no-left(16),no-right(17),macronuclear(18),proviral(19),est(20),sts(21),survey(22),chromoplast(23),genemap(24),restmap(25),physmap(26),other(255)
type GIBBMethod string
//GIBBMethod,EnumList:concept-trans(1),seq-pept(2),both(3),seq-pept-overlap(4),seq-pept-homol(5),concept-trans-a(6),other(255)
type Numbering struct {
	Cont	*NumCont	`xml:"cont" json:"cont,omitempty"`
	Enum	*NumEnum	`xml:"enum" json:"enum,omitempty"`
	Ref	*NumRef		`xml:"ref" json:"ref,omitempty"`
	Real	*NumReal	`xml:"real" json:"real,omitempty"`
}
//Numbering,ChoiceOption
type NumCont struct {
	Refnum		int64	`xml:"refnum" json:"refnum" asn1:"default:1"`
	HasZero		bool	`xml:"has-zero" json:"has_zero"`
	Ascending	bool	`xml:"ascending" json:"ascending"`
}
type NumEnum struct {
	Num	int64		`xml:"num" json:"num"`
	Names	[]string	`xml:"names" json:"names,omitempty"`
}
type NumRef struct {
	Type	string			`xml:"type" json:"type"`//Type,EnumList:not-set(0),sources(1),aligns(2)
	Aligns	*NCBISeqalign.SeqAlign	`xml:"aligns" json:"aligns,omitempty" asn1:"optional"`
}
type NumReal struct {
	A	float64	`xml:"a" json:"a"`
	B	float64	`xml:"b" json:"b"`
	Units	string	`xml:"units" json:"units,omitempty" asn1:"optional"`
}
type Pubdesc struct {
	Pub		*NCBIPub.PubEquiv	`xml:"pub" json:"pub,omitempty"`
	Name		string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Fig		string			`xml:"fig" json:"fig,omitempty" asn1:"optional"`
	Num		*Numbering		`xml:"num" json:"num,omitempty" asn1:"optional"`
	Numexc		bool			`xml:"numexc" json:"numexc,omitempty" asn1:"optional"`
	PolyA		bool			`xml:"poly-a" json:"poly_a,omitempty" asn1:"optional"`
	Maploc		string			`xml:"maploc" json:"maploc,omitempty" asn1:"optional"`
	SeqRaw		*string			`xml:"seq-raw" json:"seq_raw,omitempty" asn1:"optional"`
	AlignGroup	int64			`xml:"align-group" json:"align_group,omitempty" asn1:"optional"`
	Comment		string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Reftype		int			`xml:"reftype" json:"reftype"`//Reftype,IntegerEnum:seq(0),sites(1),feats(2),no-target(3)
}
type Heterogen string
type SeqInst struct {
	Repr		string			`xml:"repr" json:"repr"`//Repr,EnumList:not-set(0),virtual(1),raw(2),seg(3),const(4),ref(5),consen(6),map(7),delta(8),other(255)
	Mol		string			`xml:"mol" json:"mol"`//Mol,EnumList:not-set(0),dna(1),rna(2),aa(3),na(4),other(255)
	Length		int64			`xml:"length" json:"length,omitempty" asn1:"optional"`
	Fuzz		*NCBIGeneral.IntFuzz	`xml:"fuzz" json:"fuzz,omitempty" asn1:"optional"`
	Topology	string			`xml:"topology" json:"topology"`//Topology,EnumList:not-set(0),linear(1),circular(2),tandem(3),other(255)
	Strand		string			`xml:"strand" json:"strand,omitempty" asn1:"optional"`//Strand,EnumList:not-set(0),ss(1),ds(2),mixed(3),other(255)
	SeqData		*SeqData		`xml:"seq-data" json:"seq_data,omitempty" asn1:"optional"`
	Ext		*SeqExt			`xml:"ext" json:"ext,omitempty" asn1:"optional"`
	Hist		*SeqHist		`xml:"hist" json:"hist,omitempty" asn1:"optional"`
}
type SeqExt struct {
	Seg	*SegExt			`xml:"seg" json:"seg,omitempty"`
	Ref	*NCBISeqloc.RefExt	`xml:"ref" json:"ref,omitempty"`
	Map	*MapExt			`xml:"map" json:"map,omitempty"`
	Delta	*DeltaExt		`xml:"delta" json:"delta,omitempty"`
}
//SeqExt,ChoiceOption
type SegExt []NCBISeqloc.SeqLoc
type RefExt NCBISeqloc.SeqLoc
type MapExt []NCBISeqfeat.SeqFeat
type DeltaExt []DeltaSeq
type DeltaSeq struct {
	Loc	*NCBISeqloc.SeqLoc	`xml:"loc" json:"loc,omitempty"`
	Literal	*SeqLiteral		`xml:"literal" json:"literal,omitempty"`
}
//DeltaSeq,ChoiceOption
type SeqLiteral struct {
	Length	int64			`xml:"length" json:"length"`
	Fuzz	*NCBIGeneral.IntFuzz	`xml:"fuzz" json:"fuzz,omitempty" asn1:"optional"`
	SeqData	*SeqData		`xml:"seq-data" json:"seq_data,omitempty" asn1:"optional"`
}
type SeqHist struct {
	Assembly	[]NCBISeqalign.SeqAlign	`xml:"assembly" json:"assembly,omitempty" asn1:"optional"`
	Replaces	*SeqHistRec		`xml:"replaces" json:"replaces,omitempty" asn1:"optional"`
	ReplacedBy	*SeqHistRec		`xml:"replaced-by" json:"replaced_by,omitempty" asn1:"optional"`
	Deleted		struct {
		Bool	bool			`xml:"bool" json:"bool"`
		Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
	}	`xml:"deleted" json:"deleted,omitempty" asn1:"optional"`//Deleted,ChoiceOption
}
type SeqHistRec struct {
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty" asn1:"optional"`
	Ids	[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty"`
}
type SeqData struct {
	Iupacna		*IUPACna	`xml:"iupacna" json:"iupacna,omitempty"`
	Iupacaa		*IUPACaa	`xml:"iupacaa" json:"iupacaa,omitempty"`
	Ncbi2na		*NCBI2na	`xml:"ncbi2na" json:"ncbi2na,omitempty"`
	Ncbi4na		*NCBI4na	`xml:"ncbi4na" json:"ncbi4na,omitempty"`
	Ncbi8na		*NCBI8na	`xml:"ncbi8na" json:"ncbi8na,omitempty"`
	Ncbipna		*NCBIpna	`xml:"ncbipna" json:"ncbipna,omitempty"`
	Ncbi8aa		*NCBI8aa	`xml:"ncbi8aa" json:"ncbi8aa,omitempty"`
	Ncbieaa		*NCBIeaa	`xml:"ncbieaa" json:"ncbieaa,omitempty"`
	Ncbipaa		*NCBIpaa	`xml:"ncbipaa" json:"ncbipaa,omitempty"`
	Ncbistdaa	*NCBIstdaa	`xml:"ncbistdaa" json:"ncbistdaa,omitempty"`
	Gap		*SeqGap		`xml:"gap" json:"gap,omitempty"`
}
//SeqData,ChoiceOption
type SeqGap struct {
	Type		int			`xml:"type" json:"type"`//Type,IntegerEnum:unknown(0),fragment(1),clone(2),short-arm(3),heterochromatin(4),centromere(5),telomere(6),repeat(7),contig(8),scaffold(9),contamination(10),other(255)
	Linkage		int			`xml:"linkage" json:"linkage,omitempty" asn1:"optional"`//Linkage,IntegerEnum:unlinked(0),linked(1),other(255)
	LinkageEvidence	[]LinkageEvidence	`xml:"linkage-evidence" json:"linkage_evidence,omitempty" asn1:"optional"`
}
type LinkageEvidence struct {
	Type int `xml:"type" json:"type"`//Type,IntegerEnum:paired-ends(0),align-genus(1),align-xgenus(2),align-trnscpt(3),within-clone(4),clone-contig(5),map(6),strobe(7),unspecified(8),pcr(9),proximity-ligation(10),other(255)
}
type IUPACna string
type IUPACaa string
type NCBI2na []byte
type NCBI4na []byte
type NCBI8na []byte
type NCBIpna []byte
type NCBI8aa []byte
type NCBIeaa string
type NCBIpaa []byte
type NCBIstdaa []byte
type TextannotId struct {
	Name		string	`xml:"name" json:"name,omitempty" asn1:"optional"`
	Accession	string	`xml:"accession" json:"accession,omitempty" asn1:"optional"`
	Release		string	`xml:"release" json:"release,omitempty" asn1:"optional"`
	Version		int64	`xml:"version" json:"version,omitempty" asn1:"optional"`
}
type AnnotId struct {
	Local	*NCBIGeneral.ObjectId	`xml:"local" json:"local,omitempty"`
	Ncbi	int64			`xml:"ncbi" json:"ncbi"`
	General	*NCBIGeneral.Dbtag	`xml:"general" json:"general,omitempty"`
	Other	*TextannotId		`xml:"other" json:"other,omitempty"`
}
//AnnotId,ChoiceOption
type AnnotDescr []Annotdesc
type Annotdesc struct {
	Name		string			`xml:"name" json:"name"`
	Title		string			`xml:"title" json:"title"`
	Comment		string			`xml:"comment" json:"comment"`
	Pub		*Pubdesc		`xml:"pub" json:"pub,omitempty"`
	User		*NCBIGeneral.UserObject	`xml:"user" json:"user,omitempty"`
	CreateDate	*NCBIGeneral.Date	`xml:"create-date" json:"create_date,omitempty"`
	UpdateDate	*NCBIGeneral.Date	`xml:"update-date" json:"update_date,omitempty"`
	Src		*NCBISeqloc.SeqId	`xml:"src" json:"src,omitempty"`
	Align		*AlignDef		`xml:"align" json:"align,omitempty"`
	Region		*NCBISeqloc.SeqLoc	`xml:"region" json:"region,omitempty"`
}
//Annotdesc,ChoiceOption
type AlignDef struct {
	AlignType	int			`xml:"align-type" json:"align_type"`//AlignType,IntegerEnum:ref(1),alt(2),blocks(3),other(255)
	Ids		[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty" asn1:"optional"`
}
type SeqAnnot struct {
	Id	[]AnnotId	`xml:"id" json:"id,omitempty" asn1:"optional"`
	Db	int		`xml:"db" json:"db,omitempty" asn1:"optional"`//Db,IntegerEnum:genbank(1),embl(2),ddbj(3),pir(4),sp(5),bbone(6),pdb(7),other(255)
	Name	string		`xml:"name" json:"name,omitempty" asn1:"optional"`
	Desc	*AnnotDescr	`xml:"desc" json:"desc,omitempty" asn1:"optional"`
	Data	struct {
		Ftable		[]NCBISeqfeat.SeqFeat	`xml:"ftable" json:"ftable,omitempty"`
		Align		[]NCBISeqalign.SeqAlign	`xml:"align" json:"align,omitempty"`
		Graph		[]NCBISeqres.SeqGraph	`xml:"graph" json:"graph,omitempty"`
		Ids		[]NCBISeqloc.SeqId	`xml:"ids" json:"ids,omitempty"`
		Locs		[]NCBISeqloc.SeqLoc	`xml:"locs" json:"locs,omitempty"`
		SeqTable	*NCBISeqTable.SeqTable	`xml:"seq-table" json:"seq_table,omitempty"`
	}	`xml:"data" json:"data"`//Data,ChoiceOption
}
package EMBLGeneral

import "NCBIGeneral"

type EMBLDbname struct {
	Code	string	`xml:"code" json:"code"`//Code,EnumList:embl(0),genbank(1),ddbj(2),geninfo(3),medline(4),swissprot(5),pir(6),pdb(7),epd(8),ecd(9),tfd(10),flybase(11),prosite(12),enzyme(13),mim(14),ecoseq(15),hiv(16),other(255)
	Name	string	`xml:"name" json:"name"`
}
//EMBLDbname,ChoiceOption
type EMBLXref struct {
	Dbname	*EMBLDbname		`xml:"dbname" json:"dbname,omitempty"`
	Id	[]NCBIGeneral.ObjectId	`xml:"id" json:"id,omitempty"`
}
type EMBLBlock struct {
	Class		string			`xml:"class" json:"class"`//Class,EnumList:not-set(0),standard(1),unannotated(2),other(255)
	Div		string			`xml:"div" json:"div,omitempty" asn1:"optional"`//Div,EnumList:fun(0),inv(1),mam(2),org(3),phg(4),pln(5),pri(6),pro(7),rod(8),syn(9),una(10),vrl(11),vrt(12),pat(13),est(14),sts(15),other(255)
	CreationDate	*NCBIGeneral.Date	`xml:"creation-date" json:"creation_date,omitempty"`
	UpdateDate	*NCBIGeneral.Date	`xml:"update-date" json:"update_date,omitempty"`
	ExtraAcc	[]string		`xml:"extra-acc" json:"extra_acc,omitempty" asn1:"optional"`
	Keywords	[]string		`xml:"keywords" json:"keywords,omitempty" asn1:"optional"`
	Xref		[]EMBLXref		`xml:"xref" json:"xref,omitempty" asn1:"optional"`
}
package SPGeneral

import "NCBIGeneral"
import "NCBISeqloc"

type SPBlock struct {
	Class		string			`xml:"class" json:"class"`//Class,EnumList:not-set(0),standard(1),prelim(2),other(255)
	ExtraAcc	[]string		`xml:"extra-acc" json:"extra_acc,omitempty" asn1:"optional"`
	Imeth		bool			`xml:"imeth" json:"imeth"`
	Plasnm		[]string		`xml:"plasnm" json:"plasnm,omitempty" asn1:"optional"`
	Seqref		[]NCBISeqloc.SeqId	`xml:"seqref" json:"seqref,omitempty" asn1:"optional"`
	Dbref		[]NCBIGeneral.Dbtag	`xml:"dbref" json:"dbref,omitempty" asn1:"optional"`
	Keywords	[]string		`xml:"keywords" json:"keywords,omitempty" asn1:"optional"`
	Created		*NCBIGeneral.Date	`xml:"created" json:"created,omitempty" asn1:"optional"`
	Sequpd		*NCBIGeneral.Date	`xml:"sequpd" json:"sequpd,omitempty" asn1:"optional"`
	Annotupd	*NCBIGeneral.Date	`xml:"annotupd" json:"annotupd,omitempty" asn1:"optional"`
}
package PIRGeneral

import "NCBISeqloc"

type PIRBlock struct {
	HadPunct	bool			`xml:"had-punct" json:"had_punct,omitempty" asn1:"optional"`
	Host		string			`xml:"host" json:"host,omitempty" asn1:"optional"`
	Source		string			`xml:"source" json:"source,omitempty" asn1:"optional"`
	Summary		string			`xml:"summary" json:"summary,omitempty" asn1:"optional"`
	Genetic		string			`xml:"genetic" json:"genetic,omitempty" asn1:"optional"`
	Includes	string			`xml:"includes" json:"includes,omitempty" asn1:"optional"`
	Placement	string			`xml:"placement" json:"placement,omitempty" asn1:"optional"`
	Superfamily	string			`xml:"superfamily" json:"superfamily,omitempty" asn1:"optional"`
	Keywords	[]string		`xml:"keywords" json:"keywords,omitempty" asn1:"optional"`
	CrossReference	string			`xml:"cross-reference" json:"cross_reference,omitempty" asn1:"optional"`
	Date		string			`xml:"date" json:"date,omitempty" asn1:"optional"`
	SeqRaw		string			`xml:"seq-raw" json:"seq_raw,omitempty" asn1:"optional"`
	Seqref		[]NCBISeqloc.SeqId	`xml:"seqref" json:"seqref,omitempty" asn1:"optional"`
}
package GenBankGeneral

import "NCBIGeneral"

type GBBlock struct {
	ExtraAccessions	[]string		`xml:"extra-accessions" json:"extra_accessions,omitempty" asn1:"optional"`
	Source		string			`xml:"source" json:"source,omitempty" asn1:"optional"`
	Keywords	[]string		`xml:"keywords" json:"keywords,omitempty" asn1:"optional"`
	Origin		string			`xml:"origin" json:"origin,omitempty" asn1:"optional"`
	Date		string			`xml:"date" json:"date,omitempty" asn1:"optional"`
	EntryDate	*NCBIGeneral.Date	`xml:"entry-date" json:"entry_date,omitempty" asn1:"optional"`
	Div		string			`xml:"div" json:"div,omitempty" asn1:"optional"`
	Taxonomy	string			`xml:"taxonomy" json:"taxonomy,omitempty" asn1:"optional"`
}
package PRFGeneral

type PRFBlock struct {
	ExtraSrc	*PRFExtraSrc	`xml:"extra-src" json:"extra_src,omitempty" asn1:"optional"`
	Keywords	[]string	`xml:"keywords" json:"keywords,omitempty" asn1:"optional"`
}
type PRFExtraSrc struct {
	Host	string	`xml:"host" json:"host,omitempty" asn1:"optional"`
	Part	string	`xml:"part" json:"part,omitempty" asn1:"optional"`
	State	string	`xml:"state" json:"state,omitempty" asn1:"optional"`
	Strain	string	`xml:"strain" json:"strain,omitempty" asn1:"optional"`
	Taxon	string	`xml:"taxon" json:"taxon,omitempty" asn1:"optional"`
}
package PDBGeneral

import "NCBIGeneral"

type PDBBlock struct {
	Deposition	*NCBIGeneral.Date	`xml:"deposition" json:"deposition,omitempty"`
	Class		string			`xml:"class" json:"class"`
	Compound	[]string		`xml:"compound" json:"compound,omitempty"`
	Source		[]string		`xml:"source" json:"source,omitempty"`
	ExpMethod	string			`xml:"exp-method" json:"exp_method,omitempty" asn1:"optional"`
	Replace		*PDBReplace		`xml:"replace" json:"replace,omitempty" asn1:"optional"`
}
type PDBReplace struct {
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty"`
	Ids	[]string		`xml:"ids" json:"ids,omitempty"`
}
package NCBISeqCode

type SeqCodeType string
//SeqCodeType,EnumList:iupacna(1),iupacaa(2),ncbi2na(3),ncbi4na(4),ncbi8na(5),ncbipna(6),ncbi8aa(7),ncbieaa(8),ncbipaa(9),iupacaa3(10),ncbistdaa(11)
type SeqMapTable struct {
	From	*SeqCodeType	`xml:"from" json:"from,omitempty"`
	To	*SeqCodeType	`xml:"to" json:"to,omitempty"`
	Num	int64		`xml:"num" json:"num"`
	StartAt	int64		`xml:"start-at" json:"start_at" asn1:"default:0"`
	Table	[]int64		`xml:"table" json:"table,omitempty"`
}
type SeqCodeTable struct {
	Code		*SeqCodeType	`xml:"code" json:"code,omitempty"`
	Num		int64		`xml:"num" json:"num"`
	OneLetter	bool		`xml:"one-letter" json:"one_letter"`
	StartAt		int64		`xml:"start-at" json:"start_at" asn1:"default:0"`
	Table		[]struct {
		Symbol	string	`xml:"symbol" json:"symbol"`
		Name	string	`xml:"name" json:"name"`
	}	`xml:"table" json:"table,omitempty"`
	Comps	[]int64	`xml:"comps" json:"comps,omitempty" asn1:"optional"`
}
type SeqCodeSet struct {
	Codes	[]SeqCodeTable	`xml:"codes" json:"codes,omitempty" asn1:"optional"`
	Maps	[]SeqMapTable	`xml:"maps" json:"maps,omitempty" asn1:"optional"`
}
package NCBISeqfeat

import "NCBIGene"
import "NCBIProtein"
import "NCBIOrganism"
import "NCBIVariation"
import "NCBIBioSource"
import "NCBIRNA"
import "NCBISeqloc"
import "NCBISequence"
import "NCBIRsite"
import "NCBITxInit"
import "NCBIBiblio"
import "NCBIPub"
import "NCBIGeneral"

type FeatId struct {
	Gibb	int64			`xml:"gibb" json:"gibb"`
	Giim	*NCBISeqloc.GiimportId	`xml:"giim" json:"giim,omitempty"`
	Local	*NCBIGeneral.ObjectId	`xml:"local" json:"local,omitempty"`
	General	*NCBIGeneral.Dbtag	`xml:"general" json:"general,omitempty"`
}
//FeatId,ChoiceOption
type SeqFeat struct {
	Id		*FeatId				`xml:"id" json:"id,omitempty" asn1:"optional"`
	Data		*SeqFeatData			`xml:"data" json:"data,omitempty"`
	Partial		bool				`xml:"partial" json:"partial,omitempty" asn1:"optional"`
	Except		bool				`xml:"except" json:"except,omitempty" asn1:"optional"`
	Comment		string				`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Product		*NCBISeqloc.SeqLoc		`xml:"product" json:"product,omitempty" asn1:"optional"`
	Location	*NCBISeqloc.SeqLoc		`xml:"location" json:"location,omitempty"`
	Qual		[]GbQual			`xml:"qual" json:"qual,omitempty" asn1:"optional"`
	Title		string				`xml:"title" json:"title,omitempty" asn1:"optional"`
	Ext		*NCBIGeneral.UserObject		`xml:"ext" json:"ext,omitempty" asn1:"optional"`
	Cit		*NCBIPub.PubSet			`xml:"cit" json:"cit,omitempty" asn1:"optional"`
	ExpEv		string				`xml:"exp-ev" json:"exp_ev,omitempty" asn1:"optional"`//ExpEv,EnumList:experimental(1),not-experimental(2)
	Xref		[]SeqFeatXref			`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	Dbxref		[]NCBIGeneral.Dbtag		`xml:"dbxref" json:"dbxref,omitempty" asn1:"optional"`
	Pseudo		bool				`xml:"pseudo" json:"pseudo,omitempty" asn1:"optional"`
	ExceptText	string				`xml:"except-text" json:"except_text,omitempty" asn1:"optional"`
	Ids		[]FeatId			`xml:"ids" json:"ids,omitempty" asn1:"optional"`
	Exts		[]NCBIGeneral.UserObject	`xml:"exts" json:"exts,omitempty" asn1:"optional"`
	Support		*SeqFeatSupport			`xml:"support" json:"support,omitempty" asn1:"optional"`
}
type SeqFeatData struct {
	Gene		*NCBIGene.GeneRef		`xml:"gene" json:"gene,omitempty"`
	Org		*NCBIOrganism.OrgRef		`xml:"org" json:"org,omitempty"`
	Cdregion	*Cdregion			`xml:"cdregion" json:"cdregion,omitempty"`
	Prot		*NCBIProtein.ProtRef		`xml:"prot" json:"prot,omitempty"`
	Rna		*NCBIRNA.RNARef			`xml:"rna" json:"rna,omitempty"`
	Pub		*NCBISequence.Pubdesc		`xml:"pub" json:"pub,omitempty"`
	Seq		*NCBISeqloc.SeqLoc		`xml:"seq" json:"seq,omitempty"`
	Imp		*ImpFeat			`xml:"imp" json:"imp,omitempty"`
	Region		string				`xml:"region" json:"region"`
	Comment		interface{}			`xml:"comment" json:"comment"`
	Bond		string				`xml:"bond" json:"bond"`//Bond,EnumList:disulfide(1),thiolester(2),xlink(3),thioether(4),other(255)
	Site		string				`xml:"site" json:"site"`//Site,EnumList:active(1),binding(2),cleavage(3),inhibit(4),modified(5),glycosylation(6),myristoylation(7),mutagenized(8),metal-binding(9),phosphorylation(10),acetylation(11),amidation(12),methylation(13),hydroxylation(14),sulfatation(15),oxidative-deamination(16),pyrrolidone-carboxylic-acid(17),gamma-carboxyglutamic-acid(18),blocked(19),lipid-binding(20),np-binding(21),dna-binding(22),signal-peptide(23),transit-peptide(24),transmembrane-region(25),nitrosylation(26),other(255)
	Rsite		*NCBIRsite.RsiteRef		`xml:"rsite" json:"rsite,omitempty"`
	User		*NCBIGeneral.UserObject		`xml:"user" json:"user,omitempty"`
	Txinit		*NCBITxInit.Txinit		`xml:"txinit" json:"txinit,omitempty"`
	Num		*NCBISequence.Numbering		`xml:"num" json:"num,omitempty"`
	PsecStr		string				`xml:"psec-str" json:"psec_str"`//PsecStr,EnumList:helix(1),sheet(2),turn(3)
	NonStdResidue	string				`xml:"non-std-residue" json:"non_std_residue"`
	Het		*NCBISequence.Heterogen		`xml:"het" json:"het,omitempty"`
	Biosrc		*NCBIBioSource.BioSource	`xml:"biosrc" json:"biosrc,omitempty"`
	Clone		*CloneRef			`xml:"clone" json:"clone,omitempty"`
	Variation	*NCBIVariation.VariationRef	`xml:"variation" json:"variation,omitempty"`
}
//SeqFeatData,ChoiceOption
type SeqFeatXref struct {
	Id	*FeatId		`xml:"id" json:"id,omitempty" asn1:"optional"`
	Data	*SeqFeatData	`xml:"data" json:"data,omitempty" asn1:"optional"`
}
type SeqFeatSupport struct {
	Experiment	[]ExperimentSupport	`xml:"experiment" json:"experiment,omitempty" asn1:"optional"`
	Inference	[]InferenceSupport	`xml:"inference" json:"inference,omitempty" asn1:"optional"`
	ModelEvidence	[]ModelEvidenceSupport	`xml:"model-evidence" json:"model_evidence,omitempty" asn1:"optional"`
}
type EvidenceCategory int
//EvidenceCategory,IntegerEnum:not-set(0),coordinates(1),description(2),existence(3)
type ExperimentSupport struct {
	Category	*EvidenceCategory	`xml:"category" json:"category,omitempty" asn1:"optional"`
	Explanation	string			`xml:"explanation" json:"explanation"`
	Pmids		[]NCBIBiblio.PubMedId	`xml:"pmids" json:"pmids,omitempty" asn1:"optional"`
	Dois		[]NCBIBiblio.DOI	`xml:"dois" json:"dois,omitempty" asn1:"optional"`
}
type ProgramId struct {
	Name	string	`xml:"name" json:"name"`
	Version	string	`xml:"version" json:"version,omitempty" asn1:"optional"`
}
type EvidenceBasis struct {
	Programs	[]ProgramId		`xml:"programs" json:"programs,omitempty" asn1:"optional"`
	Accessions	[]NCBISeqloc.SeqId	`xml:"accessions" json:"accessions,omitempty" asn1:"optional"`
}
type InferenceSupport struct {
	Category	*EvidenceCategory	`xml:"category" json:"category,omitempty" asn1:"optional"`
	Type		int			`xml:"type" json:"type"`//Type,IntegerEnum:not-set(0),similar-to-sequence(1),similar-to-aa(2),similar-to-dna(3),similar-to-rna(4),similar-to-mrna(5),similiar-to-est(6),similar-to-other-rna(7),profile(8),nucleotide-motif(9),protein-motif(10),ab-initio-prediction(11),alignment(12),other(255)
	OtherType	string			`xml:"other-type" json:"other_type,omitempty" asn1:"optional"`
	SameSpecies	bool			`xml:"same-species" json:"same_species"`
	Basis		*EvidenceBasis		`xml:"basis" json:"basis,omitempty"`
	Pmids		[]NCBIBiblio.PubMedId	`xml:"pmids" json:"pmids,omitempty" asn1:"optional"`
	Dois		[]NCBIBiblio.DOI	`xml:"dois" json:"dois,omitempty" asn1:"optional"`
}
type ModelEvidenceItem struct {
	Id			*NCBISeqloc.SeqId	`xml:"id" json:"id,omitempty"`
	ExonCount		int64			`xml:"exon-count" json:"exon_count,omitempty" asn1:"optional"`
	ExonLength		int64			`xml:"exon-length" json:"exon_length,omitempty" asn1:"optional"`
	FullLength		bool			`xml:"full-length" json:"full_length"`
	SupportsAllExonCombo	bool			`xml:"supports-all-exon-combo" json:"supports_all_exon_combo"`
}
type ModelEvidenceSupport struct {
	Method			string			`xml:"method" json:"method,omitempty" asn1:"optional"`
	Mrna			[]ModelEvidenceItem	`xml:"mrna" json:"mrna,omitempty" asn1:"optional"`
	Est			[]ModelEvidenceItem	`xml:"est" json:"est,omitempty" asn1:"optional"`
	Protein			[]ModelEvidenceItem	`xml:"protein" json:"protein,omitempty" asn1:"optional"`
	Identification		*NCBISeqloc.SeqId	`xml:"identification" json:"identification,omitempty" asn1:"optional"`
	Dbxref			[]NCBIGeneral.Dbtag	`xml:"dbxref" json:"dbxref,omitempty" asn1:"optional"`
	ExonCount		int64			`xml:"exon-count" json:"exon_count,omitempty" asn1:"optional"`
	ExonLength		int64			`xml:"exon-length" json:"exon_length,omitempty" asn1:"optional"`
	FullLength		bool			`xml:"full-length" json:"full_length"`
	SupportsAllExonCombo	bool			`xml:"supports-all-exon-combo" json:"supports_all_exon_combo"`
}
type Cdregion struct {
	Orf		bool		`xml:"orf" json:"orf,omitempty" asn1:"optional"`
	Frame		string		`xml:"frame" json:"frame"`//Frame,EnumList:not-set(0),one(1),two(2),three(3)
	Conflict	bool		`xml:"conflict" json:"conflict,omitempty" asn1:"optional"`
	Gaps		int64		`xml:"gaps" json:"gaps,omitempty" asn1:"optional"`
	Mismatch	int64		`xml:"mismatch" json:"mismatch,omitempty" asn1:"optional"`
	Code		*GeneticCode	`xml:"code" json:"code,omitempty" asn1:"optional"`
	CodeBreak	[]CodeBreak	`xml:"code-break" json:"code_break,omitempty" asn1:"optional"`
	Stops		int64		`xml:"stops" json:"stops,omitempty" asn1:"optional"`
}
type GeneticCode []struct {
	Name		string	`xml:"name" json:"name"`
	Id		int64	`xml:"id" json:"id"`
	Ncbieaa		string	`xml:"ncbieaa" json:"ncbieaa"`
	Ncbi8aa		[]byte	`xml:"ncbi8aa" json:"ncbi8aa,omitempty"`
	Ncbistdaa	[]byte	`xml:"ncbistdaa" json:"ncbistdaa,omitempty"`
	Sncbieaa	string	`xml:"sncbieaa" json:"sncbieaa"`
	Sncbi8aa	[]byte	`xml:"sncbi8aa" json:"sncbi8aa,omitempty"`
	Sncbistdaa	[]byte	`xml:"sncbistdaa" json:"sncbistdaa,omitempty"`
}
type CodeBreak struct {
	Loc	*NCBISeqloc.SeqLoc	`xml:"loc" json:"loc,omitempty"`
	Aa	struct {
		Ncbieaa		int64	`xml:"ncbieaa" json:"ncbieaa"`
		Ncbi8aa		int64	`xml:"ncbi8aa" json:"ncbi8aa"`
		Ncbistdaa	int64	`xml:"ncbistdaa" json:"ncbistdaa"`
	}	`xml:"aa" json:"aa"`//Aa,ChoiceOption
}
type GeneticCodeTable []GeneticCode
type ImpFeat struct {
	Key	string	`xml:"key" json:"key"`
	Loc	string	`xml:"loc" json:"loc,omitempty" asn1:"optional"`
	Descr	string	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
}
type GbQual struct {
	Qual	string	`xml:"qual" json:"qual"`
	Val	string	`xml:"val" json:"val"`
}
type CloneRef struct {
	Name		string		`xml:"name" json:"name"`
	Library		string		`xml:"library" json:"library,omitempty" asn1:"optional"`
	Concordant	bool		`xml:"concordant" json:"concordant"`
	Unique		bool		`xml:"unique" json:"unique"`
	PlacementMethod	int		`xml:"placement-method" json:"placement_method,omitempty" asn1:"optional"`//PlacementMethod,IntegerEnum:end-seq(0),insert-alignment(1),sts(2),fish(3),fingerprint(4),end-seq-insert-alignment(5),external(253),curated(254),other(255)
	CloneSeq	*CloneSeqSet	`xml:"clone-seq" json:"clone_seq,omitempty" asn1:"optional"`
}
type CloneSeqSet []CloneSeq
type CloneSeq struct {
	Type		int			`xml:"type" json:"type"`//Type,IntegerEnum:insert(0),end(1),other(255)
	Confidence	int			`xml:"confidence" json:"confidence,omitempty" asn1:"optional"`//Confidence,IntegerEnum:multiple(0),na(1),nohit-rep(2),nohitnorep(3),other-chrm(4),unique(5),virtual(6),multiple-rep(7),multiplenorep(8),no-hit(9),other(255)
	Location	*NCBISeqloc.SeqLoc	`xml:"location" json:"location,omitempty"`
	Seq		*NCBISeqloc.SeqLoc	`xml:"seq" json:"seq,omitempty" asn1:"optional"`
	AlignId		*NCBIGeneral.Dbtag	`xml:"align-id" json:"align_id,omitempty" asn1:"optional"`
	Support		int			`xml:"support" json:"support,omitempty" asn1:"optional"`//Support,IntegerEnum:prototype(0),supporting(1),supports-other(2),non-supporting(3)
}
package NCBIVariation

import "NCBIGeneral"
import "NCBISequence"
import "NCBIBioSource"
import "NCBISeqloc"
import "NCBIPub"

type VariantProperties struct {
	Version				int64	`xml:"version" json:"version"`
	ResourceLink			int	`xml:"resource-link" json:"resource_link,omitempty" asn1:"optional"`//ResourceLink,IntegerEnum:preserved(1),provisional(2),has3D(4),submitterLinkout(8),clinical(16),genotypeKit(32)
	GeneLocation			int	`xml:"gene-location" json:"gene_location,omitempty" asn1:"optional"`//GeneLocation,IntegerEnum:in-gene(1),near-gene-5(2),near-gene-3(4),intron(8),donor(16),acceptor(32),utr-5(64),utr-3(128),in-start-codon(256),in-stop-codon(512),intergenic(1024),conserved-noncoding(2048)
	Effect				int	`xml:"effect" json:"effect,omitempty" asn1:"optional"`//Effect,IntegerEnum:no-change(0),synonymous(1),nonsense(2),missense(4),frameshift(8),up-regulator(16),down-regulator(32),methylation(64),stop-gain(128),stop-loss(256)
	Mapping				int	`xml:"mapping" json:"mapping,omitempty" asn1:"optional"`//Mapping,IntegerEnum:has-other-snp(1),has-assembly-conflict(2),is-assembly-specific(4)
	MapWeight			int	`xml:"map-weight" json:"map_weight,omitempty" asn1:"optional"`//MapWeight,IntegerEnum:is-uniquely-placed(1),placed-twice-on-same-chrom(2),placed-twice-on-diff-chrom(3),many-placements(10)
	FrequencyBasedValidation	int	`xml:"frequency-based-validation" json:"frequency_based_validation,omitempty" asn1:"optional"`//FrequencyBasedValidation,IntegerEnum:is-mutation(1),above-5pct-all(2),above-5pct-1plus(4),validated(8),above-1pct-all(16),above-1pct-1plus(32)
	Genotype			int	`xml:"genotype" json:"genotype,omitempty" asn1:"optional"`//Genotype,IntegerEnum:in-haplotype-set(1),has-genotypes(2)
	ProjectData			[]int64	`xml:"project-data" json:"project_data,omitempty" asn1:"optional"`
	QualityCheck			int	`xml:"quality-check" json:"quality_check,omitempty" asn1:"optional"`//QualityCheck,IntegerEnum:contig-allele-missing(1),withdrawn-by-submitter(2),non-overlapping-alleles(4),strain-specific(8),genotype-conflict(16)
	Confidence			int	`xml:"confidence" json:"confidence,omitempty" asn1:"optional"`//Confidence,IntegerEnum:unknown(0),likely-artifact(1),other(255)
	OtherValidation			bool	`xml:"other-validation" json:"other_validation,omitempty" asn1:"optional"`
	AlleleOrigin			int	`xml:"allele-origin" json:"allele_origin,omitempty" asn1:"optional"`//AlleleOrigin,IntegerEnum:unknown(0),germline(1),somatic(2),inherited(4),paternal(8),maternal(16),de-novo(32),biparental(64),uniparental(128),not-tested(256),tested-inconclusive(512),not-reported(1024),other(1073741824)
	AlleleState			int	`xml:"allele-state" json:"allele_state,omitempty" asn1:"optional"`//AlleleState,IntegerEnum:unknown(0),homozygous(1),heterozygous(2),hemizygous(3),nullizygous(4),other(255)
	AlleleFrequency			float64	`xml:"allele-frequency" json:"allele_frequency,omitempty" asn1:"optional"`
	IsAncestralAllele		bool	`xml:"is-ancestral-allele" json:"is_ancestral_allele,omitempty" asn1:"optional"`
}
type Phenotype struct {
	Source			string			`xml:"source" json:"source,omitempty" asn1:"optional"`
	Term			string			`xml:"term" json:"term,omitempty" asn1:"optional"`
	Xref			[]NCBIGeneral.Dbtag	`xml:"xref" json:"xref,omitempty" asn1:"optional"`
	ClinicalSignificance	int			`xml:"clinical-significance" json:"clinical_significance,omitempty" asn1:"optional"`//ClinicalSignificance,IntegerEnum:unknown(0),untested(1),non-pathogenic(2),probable-non-pathogenic(3),probable-pathogenic(4),pathogenic(5),drug-response(6),histocompatibility(7),other(255)
}
type PopulationData struct {
	Population		string			`xml:"population" json:"population"`
	GenotypeFrequency	float64			`xml:"genotype-frequency" json:"genotype_frequency,omitempty" asn1:"optional"`
	ChromosomesTested	int64			`xml:"chromosomes-tested" json:"chromosomes_tested,omitempty" asn1:"optional"`
	SampleIds		[]NCBIGeneral.ObjectId	`xml:"sample-ids" json:"sample_ids,omitempty" asn1:"optional"`
	AlleleFrequency		float64			`xml:"allele-frequency" json:"allele_frequency,omitempty" asn1:"optional"`
	Flags			int			`xml:"flags" json:"flags,omitempty" asn1:"optional"`//Flags,IntegerEnum:is-default-population(1),is-minor-allele(2),is-rare-allele(4)
}
type ExtLoc struct {
	Id		*NCBIGeneral.ObjectId	`xml:"id" json:"id,omitempty"`
	Location	*NCBISeqloc.SeqLoc	`xml:"location" json:"location,omitempty"`
}
type VariationRef struct {
	Id			*NCBIGeneral.Dbtag	`xml:"id" json:"id,omitempty" asn1:"optional"`
	ParentId		*NCBIGeneral.Dbtag	`xml:"parent-id" json:"parent_id,omitempty" asn1:"optional"`
	SampleId		*NCBIGeneral.ObjectId	`xml:"sample-id" json:"sample_id,omitempty" asn1:"optional"`
	OtherIds		[]NCBIGeneral.Dbtag	`xml:"other-ids" json:"other_ids,omitempty" asn1:"optional"`
	Name			string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Synonyms		[]string		`xml:"synonyms" json:"synonyms,omitempty" asn1:"optional"`
	Description		string			`xml:"description" json:"description,omitempty" asn1:"optional"`
	Phenotype		[]Phenotype		`xml:"phenotype" json:"phenotype,omitempty" asn1:"optional"`
	Method			[]int			`xml:"method" json:"method,omitempty" asn1:"optional"`
	PopulationData		[]PopulationData	`xml:"population-data" json:"population_data,omitempty" asn1:"optional"`
	VariantProp		*VariantProperties	`xml:"variant-prop" json:"variant_prop,omitempty" asn1:"optional"`
	Validated		bool			`xml:"validated" json:"validated,omitempty" asn1:"optional"`
	ClinicalTest		[]NCBIGeneral.Dbtag	`xml:"clinical-test" json:"clinical_test,omitempty" asn1:"optional"`
	AlleleOrigin		int			`xml:"allele-origin" json:"allele_origin,omitempty" asn1:"optional"`//AlleleOrigin,IntegerEnum:unknown(0),germline(1),somatic(2),inherited(4),paternal(8),maternal(16),de-novo(32),biparental(64),uniparental(128),not-tested(256),tested-inconclusive(512),other(1073741824)
	AlleleState		int			`xml:"allele-state" json:"allele_state,omitempty" asn1:"optional"`//AlleleState,IntegerEnum:unknown(0),homozygous(1),heterozygous(2),hemizygous(3),nullizygous(4),other(255)
	AlleleFrequency		float64			`xml:"allele-frequency" json:"allele_frequency,omitempty" asn1:"optional"`
	IsAncestralAllele	bool			`xml:"is-ancestral-allele" json:"is_ancestral_allele,omitempty" asn1:"optional"`
	Pub			*NCBIPub.Pub		`xml:"pub" json:"pub,omitempty" asn1:"optional"`
	Data			struct {
		Unknown			interface{}	`xml:"unknown" json:"unknown"`
		Note			string		`xml:"note" json:"note"`
		UniparentalDisomy	interface{}	`xml:"uniparental-disomy" json:"uniparental_disomy"`
		Instance		*VariationInst	`xml:"instance" json:"instance,omitempty"`
		Set			struct {
			Type		int		`xml:"type" json:"type"`//Type,IntegerEnum:unknown(0),compound(1),products(2),haplotype(3),genotype(4),mosaic(5),individual(6),population(7),alleles(8),package(9),other(255)
			Variations	[]VariationRef	`xml:"variations" json:"variations,omitempty"`
			Name		string		`xml:"name" json:"name,omitempty" asn1:"optional"`
		}	`xml:"set" json:"set"`
		Complex	interface{}	`xml:"complex" json:"complex"`
	}		`xml:"data" json:"data"`//Data,ChoiceOption
	Consequence	[]struct {
		Unknown		interface{}	`xml:"unknown" json:"unknown"`
		Splicing	interface{}	`xml:"splicing" json:"splicing"`
		Note		string		`xml:"note" json:"note"`
		Variation	*VariationRef	`xml:"variation" json:"variation,omitempty"`
		Frameshift	struct {
			Phase	int64	`xml:"phase" json:"phase,omitempty" asn1:"optional"`
			XLength	int64	`xml:"x-length" json:"x_length,omitempty" asn1:"optional"`
		}	`xml:"frameshift" json:"frameshift"`
		LossOfHeterozygosity	struct {
			Reference	string	`xml:"reference" json:"reference,omitempty" asn1:"optional"`
			Test		string	`xml:"test" json:"test,omitempty" asn1:"optional"`
		}	`xml:"loss-of-heterozygosity" json:"loss_of_heterozygosity"`
	}	`xml:"consequence" json:"consequence,omitempty" asn1:"optional"`
	Location	*NCBISeqloc.SeqLoc	`xml:"location" json:"location,omitempty" asn1:"optional"`
	ExtLocs		[]ExtLoc		`xml:"ext-locs" json:"ext_locs,omitempty" asn1:"optional"`
	Ext		*NCBIGeneral.UserObject	`xml:"ext" json:"ext,omitempty" asn1:"optional"`
	SomaticOrigin	[]struct {
		Source		*NCBIBioSource.SubSource	`xml:"source" json:"source,omitempty" asn1:"optional"`
		Condition	struct {
			Description	string			`xml:"description" json:"description,omitempty" asn1:"optional"`
			ObjectId	[]NCBIGeneral.Dbtag	`xml:"object-id" json:"object_id,omitempty" asn1:"optional"`
		}	`xml:"condition" json:"condition,omitempty" asn1:"optional"`
	}	`xml:"somatic-origin" json:"somatic_origin,omitempty" asn1:"optional"`
}
type DeltaItem struct {
	Seq	struct {
		Literal	*NCBISequence.SeqLiteral	`xml:"literal" json:"literal,omitempty"`
		Loc	*NCBISeqloc.SeqLoc		`xml:"loc" json:"loc,omitempty"`
		This	interface{}			`xml:"this" json:"this"`
	}					`xml:"seq" json:"seq,omitempty" asn1:"optional"`//Seq,ChoiceOption
	Multiplier	int64			`xml:"multiplier" json:"multiplier,omitempty" asn1:"optional"`
	MultiplierFuzz	*NCBIGeneral.IntFuzz	`xml:"multiplier-fuzz" json:"multiplier_fuzz,omitempty" asn1:"optional"`
	Action		int			`xml:"action" json:"action"`//Action,IntegerEnum:morph(0),offset(1),del-at(2),ins-before(3)
}
type VariationInst struct {
	Type		int		`xml:"type" json:"type"`//Type,IntegerEnum:unknown(0),identity(1),inv(2),snv(3),mnp(4),delins(5),del(6),ins(7),microsatellite(8),transposon(9),cnv(10),direct-copy(11),rev-direct-copy(12),inverted-copy(13),everted-copy(14),translocation(15),prot-missense(16),prot-nonsense(17),prot-neutral(18),prot-silent(19),prot-other(20),other(255)
	Delta		[]DeltaItem	`xml:"delta" json:"delta,omitempty"`
	Observation	int		`xml:"observation" json:"observation,omitempty" asn1:"optional"`//Observation,IntegerEnum:asserted(1),reference(2),variant(4)
}
package NCBIRsite

import "NCBIGeneral"

type RsiteRef struct {
	Str	string			`xml:"str" json:"str"`
	Db	*NCBIGeneral.Dbtag	`xml:"db" json:"db,omitempty"`
}
//RsiteRef,ChoiceOption
package NCBIRNA

import "NCBISeqloc"

type RNARef struct {
	Type	string	`xml:"type" json:"type"`//Type,EnumList:unknown(0),premsg(1),mRNA(2),tRNA(3),rRNA(4),snRNA(5),scRNA(6),snoRNA(7),ncRNA(8),tmRNA(9),miscRNA(10),other(255)
	Pseudo	bool	`xml:"pseudo" json:"pseudo,omitempty" asn1:"optional"`
	Ext	struct {
		Name	string		`xml:"name" json:"name"`
		TRNA	*TrnaExt	`xml:"tRNA" json:"tRNA,omitempty"`
		Gen	*RNAGen		`xml:"gen" json:"gen,omitempty"`
	}	`xml:"ext" json:"ext,omitempty" asn1:"optional"`//Ext,ChoiceOption
}
type TrnaExt struct {
	Aa	struct {
		Iupacaa		int64	`xml:"iupacaa" json:"iupacaa"`
		Ncbieaa		int64	`xml:"ncbieaa" json:"ncbieaa"`
		Ncbi8aa		int64	`xml:"ncbi8aa" json:"ncbi8aa"`
		Ncbistdaa	int64	`xml:"ncbistdaa" json:"ncbistdaa"`
	}					`xml:"aa" json:"aa,omitempty" asn1:"optional"`//Aa,ChoiceOption
	Codon		[]int64			`xml:"codon" json:"codon,omitempty" asn1:"optional"`
	Anticodon	*NCBISeqloc.SeqLoc	`xml:"anticodon" json:"anticodon,omitempty" asn1:"optional"`
}
type RNAGen struct {
	Class	string		`xml:"class" json:"class,omitempty" asn1:"optional"`
	Product	string		`xml:"product" json:"product,omitempty" asn1:"optional"`
	Quals	*RNAQualSet	`xml:"quals" json:"quals,omitempty" asn1:"optional"`
}
type RNAQual struct {
	Qual	string	`xml:"qual" json:"qual"`
	Val	string	`xml:"val" json:"val"`
}
type RNAQualSet []RNAQual
package NCBIGene

import "NCBIGeneral"

type GeneRef struct {
	Locus		string			`xml:"locus" json:"locus,omitempty" asn1:"optional"`
	Allele		string			`xml:"allele" json:"allele,omitempty" asn1:"optional"`
	Desc		string			`xml:"desc" json:"desc,omitempty" asn1:"optional"`
	Maploc		string			`xml:"maploc" json:"maploc,omitempty" asn1:"optional"`
	Pseudo		bool			`xml:"pseudo" json:"pseudo"`
	Db		[]NCBIGeneral.Dbtag	`xml:"db" json:"db,omitempty" asn1:"optional"`
	Syn		[]string		`xml:"syn" json:"syn,omitempty" asn1:"optional"`
	LocusTag	string			`xml:"locus-tag" json:"locus_tag,omitempty" asn1:"optional"`
	FormalName	*GeneNomenclature	`xml:"formal-name" json:"formal_name,omitempty" asn1:"optional"`
}
type GeneNomenclature struct {
	Status	string			`xml:"status" json:"status"`//Status,EnumList:unknown(0),official(1),interim(2)
	Symbol	string			`xml:"symbol" json:"symbol,omitempty" asn1:"optional"`
	Name	string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Source	*NCBIGeneral.Dbtag	`xml:"source" json:"source,omitempty" asn1:"optional"`
}
package NCBIOrganism

import "NCBIGeneral"

type OrgRef struct {
	Taxname	string			`xml:"taxname" json:"taxname,omitempty" asn1:"optional"`
	Common	string			`xml:"common" json:"common,omitempty" asn1:"optional"`
	Mod	[]string		`xml:"mod" json:"mod,omitempty" asn1:"optional"`
	Db	[]NCBIGeneral.Dbtag	`xml:"db" json:"db,omitempty" asn1:"optional"`
	Syn	[]string		`xml:"syn" json:"syn,omitempty" asn1:"optional"`
	Orgname	*OrgName		`xml:"orgname" json:"orgname,omitempty" asn1:"optional"`
}
type OrgName struct {
	Name	struct {
		Binomial	*BinomialOrgName	`xml:"binomial" json:"binomial,omitempty"`
		Virus		string			`xml:"virus" json:"virus"`
		Hybrid		*MultiOrgName		`xml:"hybrid" json:"hybrid,omitempty"`
		Namedhybrid	*BinomialOrgName	`xml:"namedhybrid" json:"namedhybrid,omitempty"`
		Partial		*PartialOrgName		`xml:"partial" json:"partial,omitempty"`
	}			`xml:"name" json:"name,omitempty" asn1:"optional"`//Name,ChoiceOption
	Attrib	string		`xml:"attrib" json:"attrib,omitempty" asn1:"optional"`
	Mod	[]OrgMod	`xml:"mod" json:"mod,omitempty" asn1:"optional"`
	Lineage	string		`xml:"lineage" json:"lineage,omitempty" asn1:"optional"`
	Gcode	int64		`xml:"gcode" json:"gcode,omitempty" asn1:"optional"`
	Mgcode	int64		`xml:"mgcode" json:"mgcode,omitempty" asn1:"optional"`
	Div	string		`xml:"div" json:"div,omitempty" asn1:"optional"`
	Pgcode	int64		`xml:"pgcode" json:"pgcode,omitempty" asn1:"optional"`
}
type OrgMod struct {
	Subtype	int	`xml:"subtype" json:"subtype"`//Subtype,IntegerEnum:strain(2),substrain(3),type(4),subtype(5),variety(6),serotype(7),serogroup(8),serovar(9),cultivar(10),pathovar(11),chemovar(12),biovar(13),biotype(14),group(15),subgroup(16),isolate(17),common(18),acronym(19),dosage(20),nat-host(21),sub-species(22),specimen-voucher(23),authority(24),forma(25),forma-specialis(26),ecotype(27),synonym(28),anamorph(29),teleomorph(30),breed(31),gb-acronym(32),gb-anamorph(33),gb-synonym(34),culture-collection(35),bio-material(36),metagenome-source(37),type-material(38),nomenclature(39),old-lineage(253),old-name(254),other(255)
	Subname	string	`xml:"subname" json:"subname"`
	Attrib	string	`xml:"attrib" json:"attrib,omitempty" asn1:"optional"`
}
type BinomialOrgName struct {
	Genus		string	`xml:"genus" json:"genus"`
	Species		string	`xml:"species" json:"species,omitempty" asn1:"optional"`
	Subspecies	string	`xml:"subspecies" json:"subspecies,omitempty" asn1:"optional"`
}
type MultiOrgName []OrgName
type PartialOrgName []TaxElement
type TaxElement struct {
	FixedLevel	int	`xml:"fixed-level" json:"fixed_level"`//FixedLevel,IntegerEnum:other(0),family(1),order(2),class(3)
	Level		string	`xml:"level" json:"level,omitempty" asn1:"optional"`
	Name		string	`xml:"name" json:"name"`
}
package NCBIBioSource

import "NCBIOrganism"

type BioSource struct {
	Genome		int			`xml:"genome" json:"genome"`//Genome,IntegerEnum:unknown(0),genomic(1),chloroplast(2),chromoplast(3),kinetoplast(4),mitochondrion(5),plastid(6),macronuclear(7),extrachrom(8),plasmid(9),transposon(10),insertion-seq(11),cyanelle(12),proviral(13),virion(14),nucleomorph(15),apicoplast(16),leucoplast(17),proplastid(18),endogenous-virus(19),hydrogenosome(20),chromosome(21),chromatophore(22),plasmid-in-mitochondrion(23),plasmid-in-plastid(24)
	Origin		int			`xml:"origin" json:"origin"`//Origin,IntegerEnum:unknown(0),natural(1),natmut(2),mut(3),artificial(4),synthetic(5),other(255)
	Org		*NCBIOrganism.OrgRef	`xml:"org" json:"org,omitempty"`
	Subtype		[]SubSource		`xml:"subtype" json:"subtype,omitempty" asn1:"optional"`
	IsFocus		interface{}		`xml:"is-focus" json:"is_focus,omitempty" asn1:"optional"`
	PcrPrimers	*PCRReactionSet		`xml:"pcr-primers" json:"pcr_primers,omitempty" asn1:"optional"`
}
type PCRReactionSet []PCRReaction
type PCRReaction struct {
	Forward	*PCRPrimerSet	`xml:"forward" json:"forward,omitempty" asn1:"optional"`
	Reverse	*PCRPrimerSet	`xml:"reverse" json:"reverse,omitempty" asn1:"optional"`
}
type PCRPrimerSet []PCRPrimer
type PCRPrimer struct {
	Seq	*PCRPrimerSeq	`xml:"seq" json:"seq,omitempty" asn1:"optional"`
	Name	*PCRPrimerName	`xml:"name" json:"name,omitempty" asn1:"optional"`
}
type PCRPrimerSeq string
type PCRPrimerName string
type SubSource struct {
	Subtype	int	`xml:"subtype" json:"subtype"`//Subtype,IntegerEnum:chromosome(1),map(2),clone(3),subclone(4),haplotype(5),genotype(6),sex(7),cell-line(8),cell-type(9),tissue-type(10),clone-lib(11),dev-stage(12),frequency(13),germline(14),rearranged(15),lab-host(16),pop-variant(17),tissue-lib(18),plasmid-name(19),transposon-name(20),insertion-seq-name(21),plastid-name(22),country(23),segment(24),endogenous-virus-name(25),transgenic(26),environmental-sample(27),isolation-source(28),lat-lon(29),collection-date(30),collected-by(31),identified-by(32),fwd-primer-seq(33),rev-primer-seq(34),fwd-primer-name(35),rev-primer-name(36),metagenomic(37),mating-type(38),linkage-group(39),haplogroup(40),whole-replicon(41),phenotype(42),altitude(43),other(255)
	Name	string	`xml:"name" json:"name"`
	Attrib	string	`xml:"attrib" json:"attrib,omitempty" asn1:"optional"`
}
package NCBIProtein

import "NCBIGeneral"

type ProtRef struct {
	Name		[]string		`xml:"name" json:"name,omitempty" asn1:"optional"`
	Desc		string			`xml:"desc" json:"desc,omitempty" asn1:"optional"`
	Ec		[]string		`xml:"ec" json:"ec,omitempty" asn1:"optional"`
	Activity	[]string		`xml:"activity" json:"activity,omitempty" asn1:"optional"`
	Db		[]NCBIGeneral.Dbtag	`xml:"db" json:"db,omitempty" asn1:"optional"`
	Processed	string			`xml:"processed" json:"processed"`//Processed,EnumList:not-set(0),preprotein(1),mature(2),signal-peptide(3),transit-peptide(4),propeptide(5)
}
package NCBITxInit

import "NCBIGene"
import "NCBIProtein"
import "NCBIOrganism"

type Txinit struct {
	Name			string			`xml:"name" json:"name"`
	Syn			[]string		`xml:"syn" json:"syn,omitempty" asn1:"optional"`
	Gene			[]NCBIGene.GeneRef	`xml:"gene" json:"gene,omitempty" asn1:"optional"`
	Protein			[]NCBIProtein.ProtRef	`xml:"protein" json:"protein,omitempty" asn1:"optional"`
	Rna			[]string		`xml:"rna" json:"rna,omitempty" asn1:"optional"`
	Expression		string			`xml:"expression" json:"expression,omitempty" asn1:"optional"`
	Txsystem		string			`xml:"txsystem" json:"txsystem"`//Txsystem,EnumList:unknown(0),pol1(1),pol2(2),pol3(3),bacterial(4),viral(5),rna(6),organelle(7),other(255)
	Txdescr			string			`xml:"txdescr" json:"txdescr,omitempty" asn1:"optional"`
	Txorg			*NCBIOrganism.OrgRef	`xml:"txorg" json:"txorg,omitempty" asn1:"optional"`
	MappingPrecise		bool			`xml:"mapping-precise" json:"mapping_precise"`
	LocationAccurate	bool			`xml:"location-accurate" json:"location_accurate"`
	Inittype		string			`xml:"inittype" json:"inittype,omitempty" asn1:"optional"`//Inittype,EnumList:unknown(0),single(1),multiple(2),region(3)
	Evidence		[]TxEvidence		`xml:"evidence" json:"evidence,omitempty" asn1:"optional"`
}
type TxEvidence struct {
	ExpCode			string	`xml:"exp-code" json:"exp_code"`//ExpCode,EnumList:unknown(0),rna-seq(1),rna-size(2),np-map(3),np-size(4),pe-seq(5),cDNA-seq(6),pe-map(7),pe-size(8),pseudo-seq(9),rev-pe-map(10),other(255)
	ExpressionSystem	string	`xml:"expression-system" json:"expression_system"`//ExpressionSystem,EnumList:unknown(0),physiological(1),in-vitro(2),oocyte(3),transfection(4),transgenic(5),other(255)
	LowPrecData		bool	`xml:"low-prec-data" json:"low_prec_data"`
	FromHomolog		bool	`xml:"from-homolog" json:"from_homolog"`
}
package NCBISeqloc

import "NCBIGeneral"
import "NCBIBiblio"
import "NCBISeqfeat"

type SeqId struct {
	Local		*NCBIGeneral.ObjectId	`xml:"local" json:"local,omitempty"`
	Gibbsq		int64			`xml:"gibbsq" json:"gibbsq"`
	Gibbmt		int64			`xml:"gibbmt" json:"gibbmt"`
	Giim		*GiimportId		`xml:"giim" json:"giim,omitempty"`
	Genbank		*TextseqId		`xml:"genbank" json:"genbank,omitempty"`
	Embl		*TextseqId		`xml:"embl" json:"embl,omitempty"`
	Pir		*TextseqId		`xml:"pir" json:"pir,omitempty"`
	Swissprot	*TextseqId		`xml:"swissprot" json:"swissprot,omitempty"`
	Patent		*PatentSeqId		`xml:"patent" json:"patent,omitempty"`
	Other		*TextseqId		`xml:"other" json:"other,omitempty"`
	General		*NCBIGeneral.Dbtag	`xml:"general" json:"general,omitempty"`
	Gi		int64			`xml:"gi" json:"gi"`
	Ddbj		*TextseqId		`xml:"ddbj" json:"ddbj,omitempty"`
	Prf		*TextseqId		`xml:"prf" json:"prf,omitempty"`
	Pdb		*PDBSeqId		`xml:"pdb" json:"pdb,omitempty"`
	Tpg		*TextseqId		`xml:"tpg" json:"tpg,omitempty"`
	Tpe		*TextseqId		`xml:"tpe" json:"tpe,omitempty"`
	Tpd		*TextseqId		`xml:"tpd" json:"tpd,omitempty"`
	Gpipe		*TextseqId		`xml:"gpipe" json:"gpipe,omitempty"`
	NamedAnnotTrack	*TextseqId		`xml:"named-annot-track" json:"named_annot_track,omitempty"`
}
//SeqId,ChoiceOption
type SeqIdSet []SeqId
type PatentSeqId struct {
	Seqid	int64			`xml:"seqid" json:"seqid"`
	Cit	*NCBIBiblio.IdPat	`xml:"cit" json:"cit,omitempty"`
}
type TextseqId struct {
	Name		string	`xml:"name" json:"name,omitempty" asn1:"optional"`
	Accession	string	`xml:"accession" json:"accession,omitempty" asn1:"optional"`
	Release		string	`xml:"release" json:"release,omitempty" asn1:"optional"`
	Version		int64	`xml:"version" json:"version,omitempty" asn1:"optional"`
}
type GiimportId struct {
	Id	int64	`xml:"id" json:"id"`
	Db	string	`xml:"db" json:"db,omitempty" asn1:"optional"`
	Release	string	`xml:"release" json:"release,omitempty" asn1:"optional"`
}
type PDBSeqId struct {
	Mol	*PDBMolId		`xml:"mol" json:"mol,omitempty"`
	Chain	int64			`xml:"chain" json:"chain" asn1:"default:32"`
	Rel	*NCBIGeneral.Date	`xml:"rel" json:"rel,omitempty" asn1:"optional"`
}
type PDBMolId string
type SeqLoc struct {
	Null		interface{}		`xml:"null" json:"null"`
	Empty		*SeqId			`xml:"empty" json:"empty,omitempty"`
	Whole		*SeqId			`xml:"whole" json:"whole,omitempty"`
	Int		*SeqInterval		`xml:"int" json:"int,omitempty"`
	PackedInt	*PackedSeqint		`xml:"packed-int" json:"packed_int,omitempty"`
	Pnt		*SeqPoint		`xml:"pnt" json:"pnt,omitempty"`
	PackedPnt	*PackedSeqpnt		`xml:"packed-pnt" json:"packed_pnt,omitempty"`
	Mix		*SeqLocMix		`xml:"mix" json:"mix,omitempty"`
	Equiv		*SeqLocEquiv		`xml:"equiv" json:"equiv,omitempty"`
	Bond		*SeqBond		`xml:"bond" json:"bond,omitempty"`
	Feat		*NCBISeqfeat.FeatId	`xml:"feat" json:"feat,omitempty"`
}
//SeqLoc,ChoiceOption
type SeqInterval struct {
	From		int64			`xml:"from" json:"from"`
	To		int64			`xml:"to" json:"to"`
	Strand		*NaStrand		`xml:"strand" json:"strand,omitempty" asn1:"optional"`
	Id		*SeqId			`xml:"id" json:"id,omitempty"`
	FuzzFrom	*NCBIGeneral.IntFuzz	`xml:"fuzz-from" json:"fuzz_from,omitempty" asn1:"optional"`
	FuzzTo		*NCBIGeneral.IntFuzz	`xml:"fuzz-to" json:"fuzz_to,omitempty" asn1:"optional"`
}
type PackedSeqint []SeqInterval
type SeqPoint struct {
	Point	int64			`xml:"point" json:"point"`
	Strand	*NaStrand		`xml:"strand" json:"strand,omitempty" asn1:"optional"`
	Id	*SeqId			`xml:"id" json:"id,omitempty"`
	Fuzz	*NCBIGeneral.IntFuzz	`xml:"fuzz" json:"fuzz,omitempty" asn1:"optional"`
}
type PackedSeqpnt struct {
	Strand	*NaStrand		`xml:"strand" json:"strand,omitempty" asn1:"optional"`
	Id	*SeqId			`xml:"id" json:"id,omitempty"`
	Fuzz	*NCBIGeneral.IntFuzz	`xml:"fuzz" json:"fuzz,omitempty" asn1:"optional"`
	Points	[]int64			`xml:"points" json:"points,omitempty"`
}
type NaStrand string
//NaStrand,EnumList:unknown(0),plus(1),minus(2),both(3),both-rev(4),other(255)
type SeqBond struct {
	A	*SeqPoint	`xml:"a" json:"a,omitempty"`
	B	*SeqPoint	`xml:"b" json:"b,omitempty" asn1:"optional"`
}
type SeqLocMix []SeqLoc
type SeqLocEquiv []SeqLoc
package NCBISeqres

import "NCBISeqloc"

type SeqGraph struct {
	Title	string			`xml:"title" json:"title,omitempty" asn1:"optional"`
	Comment	string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
	Loc	*NCBISeqloc.SeqLoc	`xml:"loc" json:"loc,omitempty"`
	TitleX	string			`xml:"title-x" json:"title_x,omitempty" asn1:"optional"`
	TitleY	string			`xml:"title-y" json:"title_y,omitempty" asn1:"optional"`
	Comp	int64			`xml:"comp" json:"comp,omitempty" asn1:"optional"`
	A	float64			`xml:"a" json:"a,omitempty" asn1:"optional"`
	B	float64			`xml:"b" json:"b,omitempty" asn1:"optional"`
	Numval	int64			`xml:"numval" json:"numval"`
	Graph	struct {
		Real	*RealGraph	`xml:"real" json:"real,omitempty"`
		Int	*IntGraph	`xml:"int" json:"int,omitempty"`
		Byte	*ByteGraph	`xml:"byte" json:"byte,omitempty"`
	}	`xml:"graph" json:"graph"`//Graph,ChoiceOption
}
type RealGraph struct {
	Max	float64		`xml:"max" json:"max"`
	Min	float64		`xml:"min" json:"min"`
	Axis	float64		`xml:"axis" json:"axis"`
	Values	[]float64	`xml:"values" json:"values,omitempty"`
}
type IntGraph struct {
	Max	int64	`xml:"max" json:"max"`
	Min	int64	`xml:"min" json:"min"`
	Axis	int64	`xml:"axis" json:"axis"`
	Values	[]int64	`xml:"values" json:"values,omitempty"`
}
type ByteGraph struct {
	Max	int64	`xml:"max" json:"max"`
	Min	int64	`xml:"min" json:"min"`
	Axis	int64	`xml:"axis" json:"axis"`
	Values	[]byte	`xml:"values" json:"values,omitempty"`
}
package NCBISeqset

import "NCBISequence"
import "NCBIGeneral"

type BioseqSet struct {
	Id	*NCBIGeneral.ObjectId	`xml:"id" json:"id,omitempty" asn1:"optional"`
	Coll	*NCBIGeneral.Dbtag	`xml:"coll" json:"coll,omitempty" asn1:"optional"`
	Level	int64			`xml:"level" json:"level,omitempty" asn1:"optional"`
	Class	string			`xml:"class" json:"class"`//Class,EnumList:not-set(0),nuc-prot(1),segset(2),conset(3),parts(4),gibb(5),gi(6),genbank(7),pir(8),pub-set(9),equiv(10),swissprot(11),pdb-entry(12),mut-set(13),pop-set(14),phy-set(15),eco-set(16),gen-prod-set(17),wgs-set(18),named-annot(19),named-annot-prod(20),read-set(21),paired-end-reads(22),small-genome-set(23),other(255)
	Release	string			`xml:"release" json:"release,omitempty" asn1:"optional"`
	Date	*NCBIGeneral.Date	`xml:"date" json:"date,omitempty" asn1:"optional"`
	Descr	*NCBISequence.SeqDescr	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	SeqSet	[]SeqEntry		`xml:"seq-set" json:"seq_set,omitempty"`
	Annot	[]NCBISequence.SeqAnnot	`xml:"annot" json:"annot,omitempty" asn1:"optional"`
}
type SeqEntry struct {
	Seq	*NCBISequence.Bioseq	`xml:"seq" json:"seq,omitempty"`
	Set	*BioseqSet		`xml:"set" json:"set,omitempty"`
}
//SeqEntry,ChoiceOption
package NCBISeqSplit

import "NCBISeqloc"
import "NCBISeqset"
import "NCBISequence"
import "NCBISeqalign"

type ID2SSplitInfo struct {
	BioseqsInfo	[]ID2SBioseqsInfo	`xml:"bioseqs-info" json:"bioseqs_info,omitempty" asn1:"optional"`
	Chunks		[]ID2SChunkInfo		`xml:"chunks" json:"chunks,omitempty"`
	Skeleton	*NCBISeqset.SeqEntry	`xml:"skeleton" json:"skeleton,omitempty" asn1:"optional"`
}
type ID2SBioseqsInfo struct {
	Info	*ID2SBioseqInfo	`xml:"info" json:"info,omitempty"`
	Bioseqs	*ID2SBioseqIds	`xml:"bioseqs" json:"bioseqs,omitempty"`
}
type ID2SBioseqInfo struct {
	GapCount	int64	`xml:"gap-count" json:"gap_count,omitempty" asn1:"optional"`
	SeqMapHasRef	bool	`xml:"seq-map-has-ref" json:"seq_map_has_ref,omitempty" asn1:"optional"`
}
type ID2SChunkInfo struct {
	Id	*ID2SChunkId		`xml:"id" json:"id,omitempty"`
	Content	[]ID2SChunkContent	`xml:"content" json:"content,omitempty"`
}
type ID2SChunkContent struct {
	SeqDescr	*ID2SSeqDescrInfo	`xml:"seq-descr" json:"seq_descr,omitempty"`
	SeqAnnot	*ID2SSeqAnnotInfo	`xml:"seq-annot" json:"seq_annot,omitempty"`
	SeqAssembly	*ID2SSeqAssemblyInfo	`xml:"seq-assembly" json:"seq_assembly,omitempty"`
	SeqMap		*ID2SSeqMapInfo		`xml:"seq-map" json:"seq_map,omitempty"`
	SeqData		*ID2SSeqDataInfo	`xml:"seq-data" json:"seq_data,omitempty"`
	SeqAnnotPlace	*ID2SSeqAnnotPlaceInfo	`xml:"seq-annot-place" json:"seq_annot_place,omitempty"`
	BioseqPlace	[]ID2SBioseqPlaceInfo	`xml:"bioseq-place" json:"bioseq_place,omitempty"`
	FeatIds		[]ID2SSeqFeatIdsInfo	`xml:"feat-ids" json:"feat_ids,omitempty"`
}
//ID2SChunkContent,ChoiceOption
type ID2SSeqDescrInfo struct {
	TypeMask	int64			`xml:"type-mask" json:"type_mask"`
	Bioseqs		*ID2SBioseqIds		`xml:"bioseqs" json:"bioseqs,omitempty" asn1:"optional"`
	BioseqSets	*ID2SBioseqSetIds	`xml:"bioseq-sets" json:"bioseq_sets,omitempty" asn1:"optional"`
}
type ID2SSeqAnnotInfo struct {
	Name	string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Align	interface{}		`xml:"align" json:"align,omitempty" asn1:"optional"`
	Graph	interface{}		`xml:"graph" json:"graph,omitempty" asn1:"optional"`
	Feat	[]ID2SFeatTypeInfo	`xml:"feat" json:"feat,omitempty" asn1:"optional"`
	SeqLoc	*ID2SSeqLoc		`xml:"seq-loc" json:"seq_loc,omitempty" asn1:"optional"`
}
type ID2SSeqAnnotPlaceInfo struct {
	Name		string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Bioseqs		*ID2SBioseqIds		`xml:"bioseqs" json:"bioseqs,omitempty" asn1:"optional"`
	BioseqSets	*ID2SBioseqSetIds	`xml:"bioseq-sets" json:"bioseq_sets,omitempty" asn1:"optional"`
}
type ID2SSeqFeatIdsInfo struct {
	FeatTypes	[]ID2SFeatTypeInfo	`xml:"feat-types" json:"feat_types,omitempty" asn1:"optional"`
	XrefTypes	[]ID2SFeatTypeInfo	`xml:"xref-types" json:"xref_types,omitempty" asn1:"optional"`
	LocalIds	[]int64			`xml:"local-ids" json:"local_ids,omitempty" asn1:"optional"`
	LocalStrIds	[]string		`xml:"local-str-ids" json:"local_str_ids,omitempty" asn1:"optional"`
}
type ID2SFeatTypeInfo struct {
	Type		int64	`xml:"type" json:"type"`
	Subtypes	[]int64	`xml:"subtypes" json:"subtypes,omitempty" asn1:"optional"`
}
type ID2SSeqAssemblyInfo struct {
	Bioseqs *ID2SBioseqIds `xml:"bioseqs" json:"bioseqs,omitempty"`
}
type ID2SSeqMapInfo ID2SSeqLoc
type ID2SSeqDataInfo ID2SSeqLoc
type ID2SBioseqPlaceInfo struct {
	BioseqSet	int64		`xml:"bioseq-set" json:"bioseq_set"`
	SeqIds		*ID2SBioseqIds	`xml:"seq-ids" json:"seq_ids,omitempty"`
}
type ID2SChunk struct {
	Data []ID2SChunkData `xml:"data" json:"data,omitempty"`
}
type ID2SChunkData struct {
	Id	struct {
		BioseqSet	int64			`xml:"bioseq-set" json:"bioseq_set"`
		Gi		int64			`xml:"gi" json:"gi"`
		SeqId		*NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty"`
	}					`xml:"id" json:"id"`//Id,ChoiceOption
	Descr		*NCBISequence.SeqDescr	`xml:"descr" json:"descr,omitempty" asn1:"optional"`
	Annots		[]NCBISequence.SeqAnnot	`xml:"annots" json:"annots,omitempty" asn1:"optional"`
	Assembly	[]NCBISeqalign.SeqAlign	`xml:"assembly" json:"assembly,omitempty" asn1:"optional"`
	SeqMap		[]ID2SSequencePiece	`xml:"seq-map" json:"seq_map,omitempty" asn1:"optional"`
	SeqData		[]ID2SSequencePiece	`xml:"seq-data" json:"seq_data,omitempty" asn1:"optional"`
	Bioseqs		[]NCBISequence.Bioseq	`xml:"bioseqs" json:"bioseqs,omitempty" asn1:"optional"`
}
type ID2SSequencePiece struct {
	Start	int64				`xml:"start" json:"start"`
	Data	[]NCBISequence.SeqLiteral	`xml:"data" json:"data,omitempty"`
}
type ID2SChunkId int64
type ID2SBioseqSetIds []int64
type ID2SBioseqIds []struct {
	Gi	int64			`xml:"gi" json:"gi"`
	SeqId	*NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty"`
	GiRange	*ID2SGiRange		`xml:"gi-range" json:"gi_range,omitempty"`
}
type ID2SGiRange struct {
	Start	int64	`xml:"start" json:"start"`
	Count	int64	`xml:"count" json:"count" asn1:"default:1"`
}
type ID2SSeqLoc struct {
	WholeGi		int64			`xml:"whole-gi" json:"whole_gi"`
	WholeSeqId	*NCBISeqloc.SeqId	`xml:"whole-seq-id" json:"whole_seq_id,omitempty"`
	WholeGiRange	*ID2SGiRange		`xml:"whole-gi-range" json:"whole_gi_range,omitempty"`
	GiInterval	*ID2SGiInterval		`xml:"gi-interval" json:"gi_interval,omitempty"`
	SeqIdInterval	*ID2SSeqIdInterval	`xml:"seq-id-interval" json:"seq_id_interval,omitempty"`
	GiInts		*ID2SGiInts		`xml:"gi-ints" json:"gi_ints,omitempty"`
	SeqIdInts	*ID2SSeqIdInts		`xml:"seq-id-ints" json:"seq_id_ints,omitempty"`
	LocSet		[]ID2SSeqLoc		`xml:"loc-set" json:"loc_set,omitempty"`
}
//ID2SSeqLoc,ChoiceOption
type ID2SGiInterval struct {
	Gi	int64	`xml:"gi" json:"gi"`
	Start	int64	`xml:"start" json:"start"`
	Length	int64	`xml:"length" json:"length" asn1:"default:1"`
}
type ID2SSeqIdInterval struct {
	SeqId	*NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty"`
	Start	int64			`xml:"start" json:"start"`
	Length	int64			`xml:"length" json:"length" asn1:"default:1"`
}
type ID2SInterval struct {
	Start	int64	`xml:"start" json:"start"`
	Length	int64	`xml:"length" json:"length" asn1:"default:1"`
}
type ID2SGiInts struct {
	Gi	int64		`xml:"gi" json:"gi"`
	Ints	[]ID2SInterval	`xml:"ints" json:"ints,omitempty"`
}
type ID2SSeqIdInts struct {
	SeqId	*NCBISeqloc.SeqId	`xml:"seq-id" json:"seq_id,omitempty"`
	Ints	[]ID2SInterval		`xml:"ints" json:"ints,omitempty"`
}
package NCBISeqTable

import "NCBISeqloc"

type SeqTableColumnInfo struct {
	Title		string	`xml:"title" json:"title,omitempty" asn1:"optional"`
	FieldId		int	`xml:"field-id" json:"field_id,omitempty" asn1:"optional"`//FieldId,IntegerEnum:location(0),location-id(1),location-gi(2),location-from(3),location-to(4),location-strand(5),location-fuzz-from-lim(6),location-fuzz-to-lim(7),product(10),product-id(11),product-gi(12),product-from(13),product-to(14),product-strand(15),product-fuzz-from-lim(16),product-fuzz-to-lim(17),id-local(20),xref-id-local(21),partial(22),comment(23),title(24),ext(25),qual(26),dbxref(27),data-imp-key(30),data-region(31),data-cdregion-frame(32),ext-type(40),qual-qual(41),qual-val(42),dbxref-db(43),dbxref-tag(44)
	FieldName	string	`xml:"field-name" json:"field_name,omitempty" asn1:"optional"`
}
type CommonStringTable struct {
	Strings	[]string	`xml:"strings" json:"strings,omitempty"`
	Indexes	[]int64		`xml:"indexes" json:"indexes,omitempty"`
}
type CommonBytesTable struct {
	Bytes	[][]byte	`xml:"bytes" json:"bytes,omitempty"`
	Indexes	[]int64		`xml:"indexes" json:"indexes,omitempty"`
}
type SeqTableMultiData struct {
	Int		[]int64				`xml:"int" json:"int,omitempty"`
	Real		[]float64			`xml:"real" json:"real,omitempty"`
	String		[]string			`xml:"string" json:"string,omitempty"`
	Bytes		[][]byte			`xml:"bytes" json:"bytes,omitempty"`
	CommonString	*CommonStringTable		`xml:"common-string" json:"common_string,omitempty"`
	CommonBytes	*CommonBytesTable		`xml:"common-bytes" json:"common_bytes,omitempty"`
	Bit		[]byte				`xml:"bit" json:"bit,omitempty"`
	Loc		[]NCBISeqloc.SeqLoc		`xml:"loc" json:"loc,omitempty"`
	Id		[]NCBISeqloc.SeqId		`xml:"id" json:"id,omitempty"`
	Interval	[]NCBISeqloc.SeqInterval	`xml:"interval" json:"interval,omitempty"`
}
//SeqTableMultiData,ChoiceOption
type SeqTableSingleData struct {
	Int		int64			`xml:"int" json:"int"`
	Real		float64			`xml:"real" json:"real"`
	String		string			`xml:"string" json:"string" asn1:"utf8"`
	Bytes		[]byte			`xml:"bytes" json:"bytes,omitempty"`
	Bit		bool			`xml:"bit" json:"bit"`
	Loc		*NCBISeqloc.SeqLoc	`xml:"loc" json:"loc,omitempty"`
	Id		*NCBISeqloc.SeqId	`xml:"id" json:"id,omitempty"`
	Interval	*NCBISeqloc.SeqInterval	`xml:"interval" json:"interval,omitempty"`
}
//SeqTableSingleData,ChoiceOption
type SeqTableSparseIndex struct {
	Indexes	[]int64	`xml:"indexes" json:"indexes,omitempty"`
	BitSet	[]byte	`xml:"bit-set" json:"bit_set,omitempty"`
}
//SeqTableSparseIndex,ChoiceOption
type SeqTableColumn struct {
	Header		*SeqTableColumnInfo	`xml:"header" json:"header,omitempty"`
	Data		*SeqTableMultiData	`xml:"data" json:"data,omitempty" asn1:"optional"`
	Sparse		*SeqTableSparseIndex	`xml:"sparse" json:"sparse,omitempty" asn1:"optional"`
	Default		*SeqTableSingleData	`xml:"default" json:"default,omitempty" asn1:"optional"`
	SparseOther	*SeqTableSingleData	`xml:"sparse-other" json:"sparse_other,omitempty" asn1:"optional"`
}
type SeqTable struct {
	FeatType	int64			`xml:"feat-type" json:"feat_type"`
	FeatSubtype	int64			`xml:"feat-subtype" json:"feat_subtype,omitempty" asn1:"optional"`
	NumRows		int64			`xml:"num-rows" json:"num_rows"`
	Columns		[]SeqTableColumn	`xml:"columns" json:"columns,omitempty"`
}
package NCBISubmit

import "NCBIBiblio"
import "NCBIGeneral"
import "NCBISequence"
import "NCBISeqloc"
import "NCBISeqset"

type SeqSubmit struct {
	Sub	*SubmitBlock	`xml:"sub" json:"sub,omitempty"`
	Data	struct {
		Entrys	[]NCBISeqset.SeqEntry	`xml:"entrys" json:"entrys,omitempty"`
		Annots	[]NCBISequence.SeqAnnot	`xml:"annots" json:"annots,omitempty"`
		Delete	[]NCBISeqloc.SeqId	`xml:"delete" json:"delete,omitempty"`
	}	`xml:"data" json:"data"`//Data,ChoiceOption
}
type SubmitBlock struct {
	Contact	*ContactInfo		`xml:"contact" json:"contact,omitempty"`
	Cit	*NCBIBiblio.CitSub	`xml:"cit" json:"cit,omitempty"`
	Hup	bool			`xml:"hup" json:"hup"`
	Reldate	*NCBIGeneral.Date	`xml:"reldate" json:"reldate,omitempty" asn1:"optional"`
	Subtype	int			`xml:"subtype" json:"subtype,omitempty" asn1:"optional"`//Subtype,IntegerEnum:new(1),update(2),revision(3),other(255)
	Tool	string			`xml:"tool" json:"tool,omitempty" asn1:"optional"`
	UserTag	string			`xml:"user-tag" json:"user_tag,omitempty" asn1:"optional"`
	Comment	string			`xml:"comment" json:"comment,omitempty" asn1:"optional"`
}
type ContactInfo struct {
	Name		string			`xml:"name" json:"name,omitempty" asn1:"optional"`
	Address		[]string		`xml:"address" json:"address,omitempty" asn1:"optional"`
	Phone		string			`xml:"phone" json:"phone,omitempty" asn1:"optional"`
	Fax		string			`xml:"fax" json:"fax,omitempty" asn1:"optional"`
	Email		string			`xml:"email" json:"email,omitempty" asn1:"optional"`
	Telex		string			`xml:"telex" json:"telex,omitempty" asn1:"optional"`
	OwnerId		*NCBIGeneral.ObjectId	`xml:"owner-id" json:"owner_id,omitempty" asn1:"optional"`
	Password	[]byte			`xml:"password" json:"password,omitempty" asn1:"optional"`
	LastName	string			`xml:"last-name" json:"last_name,omitempty" asn1:"optional"`
	FirstName	string			`xml:"first-name" json:"first_name,omitempty" asn1:"optional"`
	MiddleInitial	string			`xml:"middle-initial" json:"middle_initial,omitempty" asn1:"optional"`
	Contact		*NCBIBiblio.Author	`xml:"contact" json:"contact,omitempty" asn1:"optional"`
}
package NCBITSeq

type TSeq struct {
	Seqtype		string	`xml:"seqtype" json:"seqtype"`//Seqtype,EnumList:nucleotide(1),protein(2)
	Gi		int64	`xml:"gi" json:"gi,omitempty" asn1:"optional"`
	Accver		string	`xml:"accver" json:"accver,omitempty" asn1:"optional"`
	Sid		string	`xml:"sid" json:"sid,omitempty" asn1:"optional"`
	Local		string	`xml:"local" json:"local,omitempty" asn1:"optional"`
	Taxid		int64	`xml:"taxid" json:"taxid,omitempty" asn1:"optional"`
	Orgname		string	`xml:"orgname" json:"orgname,omitempty" asn1:"optional"`
	Defline		string	`xml:"defline" json:"defline"`
	Length		int64	`xml:"length" json:"length"`
	Sequence	string	`xml:"sequence" json:"sequence"`
}
type TSeqSet []TSeq
